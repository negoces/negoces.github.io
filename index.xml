<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>NEGOCES's Blog</title><link>https://negoces.github.io/</link><description>NEGOCES's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>negoces@163.com (NEGOCES)</managingEditor><webMaster>negoces@163.com (NEGOCES)</webMaster><lastBuildDate>Sat, 20 Mar 2021 22:59:49 +0800</lastBuildDate><atom:link href="https://negoces.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes 学习日记</title><link>https://negoces.github.io/posts/baaa9162/</link><pubDate>Sat, 20 Mar 2021 22:59:49 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/baaa9162/</guid><description><![CDATA[<p>Kubernetes 是用于自动部署，扩展和管理容器化应用程序的开源系统。</p>
<div class="details admonition danger open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-skull-crossbones fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">当前处于草稿状态，且目前仅到安装 kubeadm 可以，创建集群暂未测试</div>
        </div>
    </div>
<div class="details admonition note">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>文章更新时间轴<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>2021/03/20 文章创建</li>
</ul>
</div>
        </div>
    </div>
<h2 id="引言">引言</h2>
<p>随着微服务、分布式的流行，容器化也逐渐流行起来，Kubernetes 也逐渐成为了一项技能，我便在课余时间抽时间来学习了一下。</p>
<p>Kubernetes 是一个容器编排工具，学习它肯定需要一个集群，但毕竟是学习，肯定没那么的资源来使用，我便使用虚拟机模拟了一个集群来进行学习。</p>
<h2 id="用虚拟机创建集群">用虚拟机创建集群</h2>
<p>考虑到 Kubernetes 的系统要求，我打算用 Fedora Server 作为虚拟机的系统，至于虚拟软件则因人而异了，有的人喜欢用 VM，我使用的是 KVM。</p>
<div class="details admonition tip">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Kubernetes 支持的系统<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>Ubuntu 16.04+</li>
<li>Debian 9+</li>
<li>CentOS 7+</li>
<li>Red Hat Enterprise Linux (RHEL) 7+</li>
<li>Fedora 25+</li>
<li>HypriotOS v1.0.1+</li>
<li>Flatcar Container Linux （使用 2512.3.0 版本测试通过）</li>
</ul>
</div>
        </div>
    </div>
<ol>
<li>前往 <a href="https://mirrors.aliyun.com/fedora/releases/33/Server/x86_64/iso/" target="_blank" rel="noopener noreffer">Aliyun</a> 下载<code>Fedora-*.iso</code>文件。</li>
<li>下载完毕后创建虚拟机，因为 k8s 的要求我们分配的虚拟机至少需要 <code>2 核 和 2G RAM</code>。</li>
<li>启动虚拟机，根据提示安装。</li>
<li>安装完毕后使用<code>reboot</code>重启，此时<code>iso</code>文件已经可以移除了。</li>
</ol>
<p>使用以上步骤创建至少两个虚拟机。</p>
<h2 id="安装-kubeadm-及其他组件">安装 kubeadm 及其他组件</h2>
<h3 id="每个节点上-mac-地址和-product_uuid-的唯一性">每个节点上 MAC 地址和 product_uuid 的唯一性</h3>
<p>Kubernetes 使用这些值来唯一确定集群中的节点。 如果这些值在每个节点上不唯一，可能会导致安装失败。</p>
<ul>
<li>你可以使用命令 <code>ip link</code> 或 <code>ifconfig -a</code> 来获取网络接口的 MAC 地址</li>
<li>可以使用 <code>sudo cat /sys/class/dmi/id/product_uuid</code> 命令对 product_uuid 校验</li>
</ul>
<h3 id="允许-iptables-检查桥接流量">允许 iptables 检查桥接流量</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo modprobe br_netfilter
cat <span class="s">&lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf
</span><span class="s">br_netfilter
</span><span class="s">EOF</span>

cat <span class="s">&lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
</span><span class="s">net.bridge.bridge-nf-call-ip6tables = 1
</span><span class="s">net.bridge.bridge-nf-call-iptables = 1
</span><span class="s">EOF</span>
sudo sysctl --system
</code></pre></td></tr></table>
</div>
</div><div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>放行端口<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>如果你用的是云服务器请确保以下端口已被放行</p>
<ul>
<li>控制平面节点: <code>6443</code>,<code>2379-2380</code>,<code>10250</code>,<code>10251</code>,<code>10252</code></li>
<li>工作节点: <code>10250</code>,<code>30000-32767</code></li>
</ul>
<p>端口的具体作用请查阅<a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports" target="_blank" rel="noopener noreffer">官网</a></p>
</div>
        </div>
    </div>
<h3 id="设置系统镜像">设置系统镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo rm -f /etc/yum.repos.d/*

<span class="nb">echo</span> <span class="s1">&#39;[fedora]
</span><span class="s1">name=Fedora $releasever - $basearch
</span><span class="s1">failovermethod=priority
</span><span class="s1">baseurl=https://mirrors.aliyun.com/fedora/releases/$releasever/Everything/$basearch/os/
</span><span class="s1">metadata_expire=28d
</span><span class="s1">gpgcheck=1
</span><span class="s1">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch
</span><span class="s1">skip_if_unavailable=False&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/yum.repos.d/fedora.repo &gt; /dev/null

<span class="nb">echo</span> <span class="s1">&#39;[updates]
</span><span class="s1">name=Fedora $releasever - $basearch - Updates
</span><span class="s1">failovermethod=priority
</span><span class="s1">baseurl=https://mirrors.aliyun.com/fedora/updates/$releasever/Everything/$basearch/
</span><span class="s1">enabled=1
</span><span class="s1">gpgcheck=1
</span><span class="s1">metadata_expire=6h
</span><span class="s1">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch
</span><span class="s1">skip_if_unavailable=False&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/yum.repos.d/fedora-updates.repo &gt; /dev/null

<span class="nb">echo</span> <span class="s1">&#39;[fedora-modular]
</span><span class="s1">name=Fedora Modular $releasever - $basearch
</span><span class="s1">failovermethod=priority
</span><span class="s1">baseurl=https://mirrors.aliyun.com/fedora/releases/$releasever/Modular/$basearch/os/
</span><span class="s1">enabled=1
</span><span class="s1">metadata_expire=7d
</span><span class="s1">gpgcheck=1
</span><span class="s1">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch
</span><span class="s1">skip_if_unavailable=False&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/yum.repos.d/fedora-modular.repo &gt; /dev/null

<span class="nb">echo</span> <span class="s1">&#39;[updates-modular]
</span><span class="s1">name=Fedora Modular $releasever - $basearch - Updates
</span><span class="s1">failovermethod=priority
</span><span class="s1">baseurl=https://mirrors.aliyun.com/fedora/updates/$releasever/Modular/$basearch/
</span><span class="s1">enabled=1
</span><span class="s1">gpgcheck=1
</span><span class="s1">metadata_expire=6h
</span><span class="s1">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch
</span><span class="s1">skip_if_unavailable=False&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/yum.repos.d/fedora-updates-modular.repo &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>系统更新: <code>sudo dnf update</code></p>
<h3 id="安装-docker">安装 Docker</h3>
<p>添加 mirrors</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo dnf -y install dnf-plugins-core
sudo dnf config-manager --add-repo <span class="se">\
</span><span class="se"></span>https://mirrors.aliyun.com/docker-ce/linux/fedora/docker-ce.repo
</code></pre></td></tr></table>
</div>
</div><p>安装 Docker</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo dnf install docker-ce docker-ce-cli containerd.io
</code></pre></td></tr></table>
</div>
</div><p>赋予账户可直接操作 Docker 的权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo usermod -aG docker <span class="nv">$USER</span>
newgrp docker
</code></pre></td></tr></table>
</div>
</div><p>添加 Docker 仓库加速</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="se">\
</span><span class="se"></span><span class="s1">&#39;{
</span><span class="s1">    &#34;exec-opts&#34;: [
</span><span class="s1">        &#34;native.cgroupdriver=systemd&#34;
</span><span class="s1">    ],
</span><span class="s1">    &#34;log-driver&#34;: &#34;json-file&#34;,
</span><span class="s1">    &#34;log-opts&#34;: {
</span><span class="s1">        &#34;max-size&#34;: &#34;100m&#34;
</span><span class="s1">    },
</span><span class="s1">    &#34;storage-driver&#34;: &#34;overlay2&#34;,
</span><span class="s1">    &#34;registry-mirrors&#34;: [
</span><span class="s1">        &#34;https://docker.mirrors.sjtug.sjtu.edu.cn&#34;
</span><span class="s1">    ]
</span><span class="s1">}&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/docker/daemon.json &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>启动 Docker 并设置自启</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo systemctl start docker
sudo systemctl <span class="nb">enable</span> docker
</code></pre></td></tr></table>
</div>
</div><h3 id="安装-kubeadm">安装 kubeadm</h3>
<p>添加 mirror</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
</span><span class="s">[kubernetes]
</span><span class="s">name=kubernetes
</span><span class="s">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
</span><span class="s">enabled=1
</span><span class="s">gpgcheck=1
</span><span class="s">repo_gpgcheck=1
</span><span class="s">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
</span><span class="s">exclude=kubelet kubeadm kubectl
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><p>禁用 SELinux</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">setenforce <span class="m">0</span>
sed -i <span class="s1">&#39;s/^SELINUX=enforcing$/SELINUX=permissive/&#39;</span> /etc/selinux/config
</code></pre></td></tr></table>
</div>
</div><p>安装并启动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo dnf install -y kubelet kubeadm kubectl --disableexcludes<span class="o">=</span>kubernetes

systemctl <span class="nb">enable</span> --now kubelet
</code></pre></td></tr></table>
</div>
</div><h2 id="使用-kubeadm-创建集群">使用 kubeadm 创建集群</h2>
<p>关闭防火墙</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">systemctl stop firewalld
systemctl disable firewalld
</code></pre></td></tr></table>
</div>
</div><p>关闭 swap</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">swapoff -a
sed -ri <span class="s1">&#39;s/.*swap.*/#&amp;/&#39;</span> /etc/fstab
</code></pre></td></tr></table>
</div>
</div><p>提前拉取所需镜像(因版本而异)，可用<code>kubeadm config images list</code>查看</p>
<blockquote>
<p>将<code>k8s.gcr.io</code>换成<code>registry.aliyuncs.com/google_containers/</code></p>
</blockquote>
<blockquote>
<p>也可修改配置实现加速<br>
<code>kubeadm config print-defaults --api-objects ClusterConfiguration &gt; kubeadm.conf</code>生成配置<br>
修改<code>kubernetesVersion:</code>为当前版本<br>
修改<code>imageRepository:</code>为<code>registry.aliyuncs.com/google_containers</code></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker pull registry.aliyuncs.com/google_containers/kube-apiserver:v1.20.5
docker pull registry.aliyuncs.com/google_containers/kube-controller-manager:v1.20.5
docker pull registry.aliyuncs.com/google_containers/kube-scheduler:v1.20.5
docker pull registry.aliyuncs.com/google_containers/kube-proxy:v1.20.5
docker pull registry.aliyuncs.com/google_containers/pause:3.2
docker pull registry.aliyuncs.com/google_containers/etcd:3.4.13-0
docker pull registry.aliyuncs.com/google_containers/coredns:1.7.0

docker tag registry.aliyuncs.com/google_containers/kube-apiserver:v1.20.5 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/kube-apiserver:v1.20.5
docker tag registry.aliyuncs.com/google_containers/kube-controller-manager:v1.20.5 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/kube-controller-manager:v1.20.5
docker tag registry.aliyuncs.com/google_containers/kube-scheduler:v1.20.5 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/kube-scheduler:v1.20.5
docker tag registry.aliyuncs.com/google_containers/kube-proxy:v1.20.5 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/kube-proxy:v1.20.5
docker tag registry.aliyuncs.com/google_containers/pause:3.2 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/pause:3.2
docker tag registry.aliyuncs.com/google_containers/etcd:3.4.13-0 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/etcd:3.4.13-0
docker tag registry.aliyuncs.com/google_containers/coredns:1.7.0 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/coredns:1.7.0
</code></pre></td></tr></table>
</div>
</div><p>初始化</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">kubeadm init
<span class="c1"># 或</span>
kubeadm init --ignore-preflight-errors<span class="o">=</span>Swap
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>在Linux上安装cifsd启用SMB共享</title><link>https://negoces.github.io/posts/4ab61985/</link><pubDate>Wed, 17 Mar 2021 19:14:22 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/4ab61985/</guid><description><![CDATA[<p>用树莓派做了一个网络存储，想挂载到系统上，便想到了 SMB 协议，之前用过 Samba 但是性能实属不行，恰巧在 Github 上看到了 cifsd 这个项目，并且支持 RDMA 所以在树莓派上面安装试试，结果发现效果还不错，速度蛮快的。</p>
<h2 id="安装必要的依赖">安装必要的依赖</h2>
<p>Github 上只有源码，没有现成的二进制文件，软件仓库里面也没有，所以必须自己编译(其实并不意外，这个程序是作为内核模块运行的，所以才有如此之高的性能)。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt update
sudo apt install linux-headers gcc make git autoconf <span class="se">\
</span><span class="se"></span>libtool pkg-config libnl-3-dev libnl-genl-3-dev libglib2.0-dev -y
</code></pre></td></tr></table>
</div>
</div><h2 id="编译安装-cifsd">编译安装 cifsd</h2>
<p>克隆并进入目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> ~
git clone https://github.com.cnpmjs.org/cifsd-team/cifsd.git
<span class="nb">cd</span> cifsd
</code></pre></td></tr></table>
</div>
</div><p>编译并安装，如果出现问题。。。我相信你百度能力一直可以。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">make                <span class="c1"># 编译</span>
sudo make install   <span class="c1"># 安装</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="编译安装-ksmbd-tools">编译安装 ksmbd-tools</h2>
<p>克隆并进入目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> ~
git clone https://github.com.cnpmjs.org/cifsd-team/cifsd-tools.git
<span class="nb">cd</span> ksmbd-tools
</code></pre></td></tr></table>
</div>
</div><p>编译并安装，如果出现问题。。。我相信你百度能力一直可以。(悄悄告诉你，其实这一步最容易出错)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">./autogen.sh
./configure
make
sudo make install
</code></pre></td></tr></table>
</div>
</div><h2 id="加载模块并设置开机自动加载">加载模块并设置开机自动加载</h2>
<p>加载模块，并编辑<code>/etc/modules-load.d/ksmbd.conf</code>文件以设置开机自动加载。。。算了，怕你不会，直接运行下面的指令吧</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo modprobe ksmbd
<span class="nb">echo</span> <span class="s1">&#39;ksmbd&#39;</span> <span class="p">|</span> sudo tee /etc/modules-load.d/ksmbd.conf &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>用<code>lsmod | grep ksmbd</code>查看模块是否被加载</p>
<h2 id="创建并编辑配置">创建并编辑配置</h2>
<p>先创建配置文件夹</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo mkdir /etc/ksmbd/
</code></pre></td></tr></table>
</div>
</div><h3 id="创建用户">创建用户</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># $USER 换成你想用的用户名</span>
sudo ksmbd.adduser -a <span class="nv">$USER</span>
<span class="c1"># 输密码，回车，再输一遍，回车</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="创建共享">创建共享</h3>
<p>参考<a href="https://github.com/cifsd-team/ksmbd-tools/blob/master/Documentation/configuration.txt" target="_blank" rel="noopener noreffer">文档(Github)</a>对<code>/etc/ksmbd/smb.conf</code>进行配置，下面是一键生成示例配置的指令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="s1">&#39;[global]
</span><span class="s1">tcp port = 445
</span><span class="s1">
</span><span class="s1">[share]
</span><span class="s1">comment = Share
</span><span class="s1">path = /home/share
</span><span class="s1">read only = no
</span><span class="s1">browseable = yes
</span><span class="s1">writeable = yes&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/ksmbd/smb.conf &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>经测试<code>tcp port = 445</code>这一行必须存在且需在<code>[global]</code>键下面，否则服务将无法在网络上监听。</p>
</blockquote>
<h2 id="启动测试">启动测试</h2>
<p>使用下面的指令启动服务，并用其他设备连接测试(别和我说你不会连接 SMB)，如果测试成功就可以停止服务进行下一步了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 启动</span>
sudo ksmbd.mountd
<span class="c1"># 停止</span>
sudo ksmbd.control -s
</code></pre></td></tr></table>
</div>
</div><h2 id="创建-sevice-文件实现开机自启">创建 sevice 文件实现开机自启</h2>
<h3 id="创建-sevice-文件">创建 sevice 文件</h3>
<p>创建<code>/etc/systemd/system/cifsd.service</code>文件，以下是一键指令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="s1">&#39;[Unit]
</span><span class="s1">Description=CIFSD
</span><span class="s1">After=network.target network-online.target nss-lookup.target
</span><span class="s1">
</span><span class="s1">[Service]
</span><span class="s1">Type=oneshot
</span><span class="s1">StandardError=journal
</span><span class="s1">User=root
</span><span class="s1">Group=root
</span><span class="s1">ExecStart=/usr/local/sbin/ksmbd.mountd
</span><span class="s1">ExecStop=/usr/local/sbin/ksmbd.control -s
</span><span class="s1">RemainAfterExit=true
</span><span class="s1">Restart=on-failure
</span><span class="s1">RestartSec=1s
</span><span class="s1">
</span><span class="s1">[Install]
</span><span class="s1">WantedBy=multi-user.target&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/systemd/system/cifsd.service &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><h3 id="设置开机自启">设置开机自启</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo systemctl daemon-reload
sudo systemctl <span class="nb">enable</span> --now cifsd   <span class="c1"># 设置自启并立即启动</span>
sudo systemctl status cifsd         <span class="c1"># 查看当前进程状态</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>大功告成，可以存你喜欢的小姐姐了<br>
因为 <code>cifsd</code> 支持 <code>RDMA</code> 可以不经过 CPU 直接传输数据，所以理论上是可以跑满网络带宽的<br>
至于你的带宽有多少你可以使用 <code>iperf3</code> 进行测试</p>
</blockquote>]]></description></item><item><title>从零开始搭建一个我的世界服务器</title><link>https://negoces.github.io/posts/079848ab/</link><pubDate>Wed, 10 Mar 2021 17:13:41 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/079848ab/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/079848ab/cover.png" referrerpolicy="no-referrer">
            </div><p>相信有不少人玩 Minecraft 的时候都想与自己的小伙伴一起玩耍，如过你们恰好在同一局域网，那么可以通过游戏内的<code>对局域网开放</code>与小伙伴联机，但是房主必须一直在线，而且非局域网内的小伙伴也无法一起玩耍。</p>
<blockquote>
<p>本文章只介绍了如何搭建一个 Minecraft 服务器，并不能直接让非局域网的用户连接，如果你恰好有公网 IP 只需要在路由器里面做个小小的设置(<code>端口映射</code>、<code>端口转发</code>或者叫<code>虚拟服务器</code>)就可以访问了，如果你没有公网 IP 你可以百度<code>内网穿透</code>寻找解决方案</p>
</blockquote>
<h2 id="基础知识">基础知识</h2>
<h3 id="java">Java</h3>
<p>Minecraft 玩家应该都知道这是什么东西，这里也不做过多的解释，想要了解的可以自己去百度、Google 或者<a href="https://zh.wikipedia.org/wiki/Java" target="_blank" rel="noopener noreffer">Wiki</a>。</p>
<p>我们搭建服务需要一个 Java 运行环境即 JRE(Java Runtime Environment)，不过我建议使用 Server JRE 或者 JDK 以便使用更多的启动参数，比如<code>-server</code>。</p>
<h3 id="ip-地址和端口">IP 地址和端口</h3>
<ul>
<li>
<p>IP 地址(IP Address)：这是一个网络上的概念，在网络上我们的手机、电脑相当于一个个建筑，网络则是一条条道路，IP 地址则是你的的门牌号，通过 IP 地址可以找到你的手机、电脑在什么地方，从而与你建立连接，发送数据。</p>
</li>
<li>
<p>端口(Port)：前面说 IP 地址是你的门牌号，那么端口指的就是你家的哪个门，前门、后门或者窗户？与哪个端口连接就相当于从哪个入口进去。Java 版 Minecraft 服务器默认监听(listen)端口: 25565</p>
</li>
</ul>
<h2 id="准备工作">准备工作</h2>
<h3 id="查看-java-是否安装">查看 Java 是否安装</h3>
<p>使用<code>java -version</code>指令查看 Java 是否已经正确安装，如果输出类似以下内容则表示 Java 已正确安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">java version <span class="s2">&#34;1.8.0_281&#34;</span>
Java<span class="o">(</span>TM<span class="o">)</span> SE Runtime Environment <span class="o">(</span>build 1.8.0_281-b09<span class="o">)</span>
Java HotSpot<span class="o">(</span>TM<span class="o">)</span> 64-Bit Server VM <span class="o">(</span>build 25.281-b09, mixed mode<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><p>若报错则表示你的 Java 未正确安装</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>关于 Server JRE<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Server JRE 不需要安装(也可以手动安装)，不需要上述操作，在启动服务器时将<code>java</code>指令换成 Server JRE 内 java 二进制文件的<code>绝对路径</code>(如<code>/opt/serverjre/jre/bin/java</code>或<code>D:\ServerJRE\jre\bin\java.exe</code>)即可。</div>
        </div>
    </div>
<h3 id="下载一个服务端">下载一个服务端</h3>
<p>下载一个服务端 Jar 文件，官方、spigot、paper 都行，这里用官方 1.16.5 作为演示，下面是下载地址:</p>
<ul>
<li><a href="https://download.mcbbs.net/v1/objects/1b557e7b033b583cd9f66746b7a9ab1ec1673ced/server.jar">https://download.mcbbs.net/v1/objects/1b557e7b033b583cd9f66746b7a9ab1ec1673ced/server.jar</a></li>
</ul>
<p>创建一个文件夹，名字任意，这里以<code>mcs-1.16.5</code>为例，位置为<code>~/RAMDisk/mcs-1.16.5</code>，将下载的<code>server.jar</code>丢进这个文件夹。</p>
<h2 id="启动并配置">启动并配置</h2>
<p><strong>在我们创建的文件夹内打开终端(命令行)</strong>，使用以下指令启动服务端</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># -Xms2G 是最小分配内存，这里设置的是2GB，理论上越大启动越快</span>
<span class="c1"># -Xmx4G 是最大分配内存，这里设置的是4GB，理论上不大于物理内存的80%</span>
java -Xms2G -Xmx4G -jar server.jar nogui
</code></pre></td></tr></table>
</div>
</div><p>你会发现他输出三行文字就退出了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>20:01:55<span class="o">]</span> <span class="o">[</span>main/ERROR<span class="o">]</span>: Failed to load properties from file: server.properties
<span class="o">[</span>20:01:55<span class="o">]</span> <span class="o">[</span>main/WARN<span class="o">]</span>: Failed to load eula.txt
<span class="o">[</span>20:01:55<span class="o">]</span> <span class="o">[</span>main/INFO<span class="o">]</span>: You need to agree to the EULA in order to run the server. Go to eula.txt <span class="k">for</span> more info.
</code></pre></td></tr></table>
</div>
</div><p>从字面也能看出我们没有同意用户协议，将文件夹下<code>eula.txt</code>文件里面的<code>eula=false</code>改成<code>eula=true</code>即可。同时，我们发现它还在文件夹里面创建了一个叫<code>server.properties</code>的配置文件，我们就现在对其进行修改。</p>
<p>点击下面的<code>&gt; Code</code>以展开配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ini" data-lang="ini"><span class="c1">#Minecraft server properties</span>
<span class="c1">#Wed Mar 10 20:01:55 CST 2021</span>

<span class="c1"># 出生点保护范围，非op玩家在出生点这个距离的范围内无法建造与破坏</span>
<span class="na">spawn-protection</span><span class="o">=</span><span class="s">16</span>
<span class="c1"># 设置每个tick花费的最大毫秒数。超过该毫秒数时，服务器看门狗将停止服务器程序并附带上信息：服务器的一个tick花费了60.00秒（最长也应该只有0.05秒）；判定服务器已崩溃，它将被强制关闭。遇到这种情况的时候，它会调用 System.exit(1)。</span>
<span class="na">max-tick-time</span><span class="o">=</span><span class="s">60000</span>
<span class="c1"># GameSpy4协议的服务器监听端口。用于获取服务器信息。</span>
<span class="na">query.port</span><span class="o">=</span><span class="s">25565</span>
<span class="c1"># 用于自定义世界的生成，参见 https://minecraft-zh.gamepedia.com/%E8%87%AA%E5%AE%9A%E4%B9%89</span>
<span class="na">generator-settings</span><span class="o">=</span>
<span class="c1"># 启用后区块文件以同步模式写入。</span>
<span class="na">sync-chunk-writes</span><span class="o">=</span><span class="s">true</span>
<span class="c1"># 是否强制游戏模式</span>
<span class="na">force-gamemode</span><span class="o">=</span><span class="s">false</span>
<span class="c1"># 是否允许进入下界</span>
<span class="na">allow-nether</span><span class="o">=</span><span class="s">true</span>
<span class="c1"># 在服务器上强制执行白名单</span>
<span class="na">enforce-whitelist</span><span class="o">=</span><span class="s">false</span>
<span class="c1"># 游戏模式(高版本不接受数字参数) survival|creative|adventure|spectator</span>
<span class="na">gamemode</span><span class="o">=</span><span class="s">survival</span>
<span class="c1"># 向所有在线OP发送所执行命令的输出。</span>
<span class="na">broadcast-console-to-ops</span><span class="o">=</span><span class="s">true</span>
<span class="c1"># GameSpy4协议的服务器监听开关。用于获取服务器信息。</span>
<span class="na">enable-query</span><span class="o">=</span><span class="s">false</span>
<span class="c1"># 如果不为0，服务器将在玩家的空闲时间达到设置的时间（单位为分钟）时将玩家踢出服务器</span>
<span class="na">player-idle-timeout</span><span class="o">=</span><span class="s">0</span>
<span class="na">text-filtering-config</span><span class="o">=</span>
<span class="c1"># 游戏难度(高版本不接受数字参数) peaceful|easy|normal|hard</span>
<span class="na">difficulty</span><span class="o">=</span><span class="s">easy</span>
<span class="c1"># 向所有在线OP发送通过RCON执行的命令的输出。</span>
<span class="na">broadcast-rcon-to-ops</span><span class="o">=</span><span class="s">true</span>
<span class="c1"># 决定攻击型生物（怪物）是否可以生成。</span>
<span class="na">spawn-monsters</span><span class="o">=</span><span class="s">true</span>
<span class="c1"># OP的权限等级</span>
<span class="na">op-permission-level</span><span class="o">=</span><span class="s">4</span>
<span class="c1"># pvp开关</span>
<span class="na">pvp</span><span class="o">=</span><span class="s">true</span>
<span class="c1"># 此选项控制实体需要距离玩家有多近才会将数据包发送给客户端。更高的数值意味着实体可以在更远的地方就被渲染，同时也可能提高增加延迟的几率。(单位:% 范围:10-1000)</span>
<span class="na">entity-broadcast-range-percentage</span><span class="o">=</span><span class="s">100</span>
<span class="c1"># 是否允许服务端定期发送统计数据到http://snoop.minecraft.net。</span>
<span class="na">snooper-enabled</span><span class="o">=</span><span class="s">true</span>
<span class="c1"># 决定生成的地图的类型。 FLAT|LEGACY|DEFAULT</span>
<span class="na">level-type</span><span class="o">=</span><span class="s">default</span>
<span class="c1"># 使服务器在服务器列表中看起来是“在线”的。</span>
<span class="na">enable-status</span><span class="o">=</span><span class="s">true</span>
<span class="c1"># 如果设为 true，服务器难度的设置会被忽略并且设为 hard（困难），玩家在死后会自动切换至旁观模式。</span>
<span class="na">hardcore</span><span class="o">=</span><span class="s">false</span>
<span class="c1"># 是否启用命令方块。</span>
<span class="na">enable-command-block</span><span class="o">=</span><span class="s">false</span>
<span class="c1"># 默认会允许n-1字节的数据包正常发送, 如果数据包为n字节或更大时会进行压缩。-1：完全禁用数据包压缩 0：压缩全部数据包</span>
<span class="na">network-compression-threshold</span><span class="o">=</span><span class="s">256</span>
<span class="c1"># 设置服务器同时能容纳的最大玩家数量。</span>
<span class="na">max-players</span><span class="o">=</span><span class="s">20</span>
<span class="c1"># 世界最大半径值</span>
<span class="na">max-world-size</span><span class="o">=</span><span class="s">29999984</span>
<span class="c1"># 资源包的SHA-1值，必须为小写十六进制，建议填写它。这还没有用于验证资源包的完整性，但是它提高了资源包缓存的有效性和可靠性。</span>
<span class="na">resource-pack-sha1</span><span class="o">=</span>
<span class="c1"># 设定函数的默认权限等级。</span>
<span class="na">function-permission-level</span><span class="o">=</span><span class="s">2</span>
<span class="c1"># rcon远程控制端口</span>
<span class="na">rcon.port</span><span class="o">=</span><span class="s">25575</span>
<span class="c1"># 服务器（监听的）端口号。</span>
<span class="na">server-port</span><span class="o">=</span><span class="s">25565</span>
<span class="c1"># 将服务器与一个特定IP绑定。强烈建议留空该属性值！</span>
<span class="na">server-ip</span><span class="o">=</span>
<span class="c1"># 决定是否生成村民。</span>
<span class="na">spawn-npcs</span><span class="o">=</span><span class="s">true</span>
<span class="c1"># 允许玩家在安装添加飞行功能的mod前提下在生存模式下飞行。</span>
<span class="na">allow-flight</span><span class="o">=</span><span class="s">false</span>
<span class="c1"># 世界名称及其文件夹名（你可以把你已生成的世界存档复制过来，然后让这个值与那个文件夹的名字保持一致，服务器就可以载入该存档。）</span>
<span class="na">level-name</span><span class="o">=</span><span class="s">world</span>
<span class="c1"># 最大视距(单位：区块)，客户端大于此数值也不会显示更远的区块</span>
<span class="na">view-distance</span><span class="o">=</span><span class="s">10</span>
<span class="c1"># 可选选项，可输入指向一个资源包的URI。玩家可选择是否使用该资源包。注意若该值含&#34;:&#34;和&#34;=&#34;字符，需要在其前加上反斜线(\)</span>
<span class="na">resource-pack</span><span class="o">=</span>
<span class="c1"># 决定动物是否可以生成。</span>
<span class="na">spawn-animals</span><span class="o">=</span><span class="s">true</span>
<span class="c1"># 启用服务器的白名单。</span>
<span class="na">white-list</span><span class="o">=</span><span class="s">false</span>
<span class="c1"># 设置RCON远程访问的密码</span>
<span class="na">rcon.password</span><span class="o">=</span>
<span class="c1"># 定义是否能生成结构（例如村庄）</span>
<span class="na">generate-structures</span><span class="o">=</span><span class="s">true</span>
<span class="c1"># 是否让服务器对比Minecraft账户数据库验证登录信息。(俗称：正版验证)</span>
<span class="na">online-mode</span><span class="o">=</span><span class="s">true</span>
<span class="c1"># 玩家在游戏中能够建造的最大高度。</span>
<span class="na">max-build-height</span><span class="o">=</span><span class="s">256</span>
<span class="c1"># 为世界定义一个种子。</span>
<span class="na">level-seed</span><span class="o">=</span>
<span class="c1"># 如果服务器发送的ISP/AS和Mojang的验证服务器的不一样，玩家将会被踢出。(即：不允许使用VPN或代理)</span>
<span class="na">prevent-proxy-connections</span><span class="o">=</span><span class="s">false</span>
<span class="c1"># 是否使用针对Linux平台的数据包收发优化。此选项仅会在Linux平台上生成。</span>
<span class="na">use-native-transport</span><span class="o">=</span><span class="s">true</span>
<span class="na">enable-jmx-monitoring</span><span class="o">=</span><span class="s">false</span>
<span class="c1"># 玩家客户端的多人游戏服务器列表中显示的服务器信息，显示于名称下方。中文需要用unicode，超过59个字符可能会返回“通讯错误”</span>
<span class="na">motd</span><span class="o">=</span><span class="s">A Minecraft Server</span>
<span class="c1"># 设置玩家被踢出服务器前，可以发送的数据包数量。设置为0表示关闭此功能。</span>
<span class="na">rate-limit</span><span class="o">=</span><span class="s">0</span>
<span class="c1"># rcon远程控制开关</span>
<span class="na">enable-rcon</span><span class="o">=</span><span class="s">false</span>
</code></pre></td></tr></table>
</div>
</div><p>然后保存，<strong>记得保存！！！</strong></p>
<p>再次使用上面的指令启动，出现<code>Done (16.409s)! For help, type &quot;help&quot;</code>字样表示启动成功。此时便可以进入服务器了。在终端输入<code>stop</code>后回车可关闭服务器。</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>关于模组和插件<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>forge 服务端的启动文件不是<code>server.jar</code>，而是<code>forge-x.xx.x.jar</code>，需要将<code>-jar server.jar</code>改成<code>-jar forge-x.xx.x.jar</code>，否则服务器不会加载模组。(注：这里的 xx 只是版本代称，请以实际版本填写。)</li>
<li>模组一般放在<code>mods</code>文件夹内。只有放入指定文件夹才能被服务器加载。<code>(只有 forge 或 fabric 服务器才能加载模组)</code></li>
<li>插件一般放在<code>plugins</code>文件夹内。只有放入指定文件夹才能被服务器加载。<code>(只有 spigot、paper 等基于 bukkit 或 sponge 服务器才能使用插件)</code></li>
</ul>
</div>
        </div>
    </div>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>关于 server-ip=<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>此参数为服务端监听地址，绑定的是具有此 IP 的网卡<br>
假定我有两张网卡，名称和 IP 分别为:</p>
<ul>
<li>eth0: 192.168.0.101</li>
<li>eth1: 192.168.1.101</li>
</ul>
<p>如果我设置 server-ip=192.168.1.101 那么服务端只会接受来自 eth1 网卡的连接，来自 eth0 的连接会被丢弃。</p>
<p>如果我设置 server-ip=127.0.0.1 那么服务端只会接受本地回环(loopback)的连接，即只有本机才能进入游戏，就算是来自局域网的连接也无法进入</p>
<p>设置 server-ip=0.0.0.0 或着留空则会监听所有网卡，会接受来自所有网卡的连接，<strong>故强烈建议此参数留空！</strong></p>
</div>
        </div>
    </div>]]></description></item><item><title>树莓派4安装Gitea</title><link>https://negoces.github.io/posts/a6cf258f/</link><pubDate>Thu, 04 Mar 2021 20:10:24 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/a6cf258f/</guid><description><![CDATA[<p>在树莓派上面搭建一个内网 git 服务器，用来存放一些代码及镜像一些常用仓库。顺便搭建个 DroneCI 玩玩。</p>
<blockquote>
<p>此文章依据怎么方便怎么来的准则，并未考虑稳定与性能，切勿用作生产环境！</p>
</blockquote>
<h2 id="安装-mariadb">安装 MariaDB</h2>
<h3 id="拉取-mariadb-镜像">拉取 mariadb 镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker pull mariadb
</code></pre></td></tr></table>
</div>
</div><h3 id="部署-mariadb">部署 mariadb</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker run -d <span class="se">\
</span><span class="se"></span>--name mariadb <span class="se">\
</span><span class="se"></span>-p 3306:3306 <span class="se">\
</span><span class="se"></span>-e <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span>&lt;password&gt; <span class="se">\
</span><span class="se"></span>--restart<span class="o">=</span>always <span class="se">\
</span><span class="se"></span>mariadb
</code></pre></td></tr></table>
</div>
</div><h2 id="安装-phpmyadmin">安装 phpMyAdmin</h2>
<h3 id="拉取-phpmyadmin-镜像">拉取 phpmyadmin 镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker pull phpmyadmin
</code></pre></td></tr></table>
</div>
</div><h3 id="部署-phpmyadmin">部署 phpmyadmin</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker run -d <span class="se">\
</span><span class="se"></span>--name phpmyadmin <span class="se">\
</span><span class="se"></span>-p 3380:80 <span class="se">\
</span><span class="se"></span>-e <span class="nv">PMA_HOST</span><span class="o">=</span>&lt;树莓派IP&gt; <span class="se">\
</span><span class="se"></span>--restart<span class="o">=</span>always <span class="se">\
</span><span class="se"></span>phpmyadmin
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意：&lt;树莓派 IP&gt;不能填写 127.0.0.1，负责无法连接到数据库</p>
</blockquote>
<h2 id="安装-gitea">安装 Gitea</h2>
<h3 id="创建-gitea-数据库">创建 Gitea 数据库</h3>
<p>登录<code>&lt;树莓派IP&gt;:3380</code>创建 gitea 用户并创建同名数据库并赋予权限，注意把密码记着</p>
<h3 id="获取-gitea">获取 Gitea</h3>
<p>下载地址: <a href="https://dl.gitea.io/gitea/">https://dl.gitea.io/gitea/</a></p>
<h3 id="安装-git">安装 git</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt install git git-lfs -y
</code></pre></td></tr></table>
</div>
</div><h3 id="创建文件夹并复制文件">创建文件夹并复制文件</h3>
<p>创建文件夹</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo mkdir /opt/gitea
sudo mkdir /opt/gitea/etc
sudo mkdir /opt/gitea/home
sudo mkdir /opt/gitea/var
sudo mkdir /opt/gitea/var/lib
</code></pre></td></tr></table>
</div>
</div><p>复制文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo mv gitea /opt/gitea
</code></pre></td></tr></table>
</div>
</div><p>设置权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo chown git:git -R /opt/gitea
sudo chmod <span class="m">775</span> -R /opt/gitea
</code></pre></td></tr></table>
</div>
</div><p>最终目录结构</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">/opt/gitea/
├── etc
├── gitea
├── home
└── var
    └── lib
</code></pre></td></tr></table>
</div>
</div><h3 id="创建-git-用户">创建 git 用户</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo useradd -d /opt/gitea/home -s /bin/bash -U git
</code></pre></td></tr></table>
</div>
</div><h3 id="创建-service-文件">创建 service 文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="se">\
</span><span class="se"></span><span class="s1">&#39;[Unit]
</span><span class="s1">Description=Gitea (Git with a cup of tea)
</span><span class="s1">After=syslog.target
</span><span class="s1">After=network.target docker.service
</span><span class="s1">Requires=docker.service
</span><span class="s1">
</span><span class="s1">[Service]
</span><span class="s1">RestartSec=2s
</span><span class="s1">Type=simple
</span><span class="s1">User=git
</span><span class="s1">Group=git
</span><span class="s1">WorkingDirectory=/opt/gitea/var/lib
</span><span class="s1">ExecStart=/opt/gitea/gitea web --config /opt/gitea/etc/app.ini
</span><span class="s1">Restart=always
</span><span class="s1">Environment=USER=git HOME=/opt/gitea/home GITEA_WORK_DIR=/opt/gitea/var/lib
</span><span class="s1">CapabilityBoundingSet=CAP_NET_BIND_SERVICE
</span><span class="s1">AmbientCapabilities=CAP_NET_BIND_SERVICE
</span><span class="s1">
</span><span class="s1">[Install]
</span><span class="s1">WantedBy=multi-user.target&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/systemd/system/gitea.service &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><h3 id="启动-gitea-并设置自启">启动 gitea 并设置自启</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo systemctl start gitea
sudo systemctl <span class="nb">enable</span> gitea
sudo systemctl status gitea
</code></pre></td></tr></table>
</div>
</div><p>访问<code>&lt;IP&gt;:3000</code>进行 Gitea 初始化设置</p>
<h2 id="配置-gitea">配置 Gitea</h2>
<p>编辑<code>/opt/gitea/etc/app.ini</code>，添加或修改以下内容以解除 release 发布限制</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ini" data-lang="ini"><span class="k">[attachment]</span>
<span class="na">ENABLE</span> <span class="o">=</span> <span class="s">true</span>
<span class="na">PATH</span> <span class="o">=</span> <span class="s">/opt/gitea/home/attachments</span>
<span class="na">ALLOWED_TYPES</span> <span class="o">=</span> <span class="s">&lt;文件格式&gt;</span>
<span class="na">MAX_SIZE</span> <span class="o">=</span> <span class="s">&lt;文件最大大小,单位M,不需要加&gt;</span>
<span class="na">MAX_FILES</span> <span class="o">=</span> <span class="s">&lt;文件最大数量&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>关于文件格式:</p>
<p>查询网址:</p>
<ul>
<li><a href="https://filext.com/" target="_blank" rel="noopener noreffer">filext.com</a></li>
<li><a href="https://tool.oschina.net/commons/" target="_blank" rel="noopener noreffer">OSChina</a></li>
</ul>
<p>比如要接受所有文件就填写</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ini" data-lang="ini"><span class="na">ALLOWED_TYPES</span> <span class="o">=</span> <span class="s">octet-stream</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="配置-nginx-反向代理">配置 Nginx 反向代理</h2>
<h3 id="安装-nginx">安装 Nginx</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt update
sudo apt install nginx -y
</code></pre></td></tr></table>
</div>
</div><h3 id="修改配置">修改配置</h3>
<p>编辑<code>/etc/nginx/sites-available/default</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">server {
    listen 80 default_server;
    listen [::]:80 default_server;

    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name &lt;域名&gt;;

    ssl_certificate &lt;证书路径&gt;;
    ssl_certificate_key &lt;密钥路径&gt;;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;
    ssl_session_tickets off;

    # curl https://ssl-config.mozilla.org/ffdhe2048.txt &gt; /path/to/dhparam
    ssl_dhparam /path/to/dhparam;

    # intermediate configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    add_header Strict-Transport-Security &#34;max-age=63072000&#34; always;

    client_max_body_size 4096M;
    location / {
        proxy_pass http://127.0.0.1:3000;
    }
}
</code></pre></td></tr></table>
</div>
</div><h3 id="重启-nginx">重启 Nginx</h3>
<p>检查配置并更新</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo nginx -t
sudo systemctl restart nginx
</code></pre></td></tr></table>
</div>
</div><h2 id="安装-droneci">安装 DroneCI</h2>
<h3 id="拉取镜像">拉取镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker pull drone/drone:1
docker pull drone/drone-runner-docker:1
</code></pre></td></tr></table>
</div>
</div><h3 id="生成-rpc-密钥">生成 RPC 密钥</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">openssl rand -hex <span class="m">16</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="部署-droneci">部署 DroneCI</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker run <span class="se">\
</span><span class="se"></span>--volume<span class="o">=</span>/var/lib/drone:/data <span class="se">\
</span><span class="se"></span>--env<span class="o">=</span><span class="nv">DRONE_GITEA_SERVER</span><span class="o">={{</span>DRONE_GITEA_SERVER<span class="o">}}</span> <span class="se">\
</span><span class="se"></span>--env<span class="o">=</span><span class="nv">DRONE_GITEA_CLIENT_ID</span><span class="o">={{</span>DRONE_GITEA_CLIENT_ID<span class="o">}}</span> <span class="se">\
</span><span class="se"></span>--env<span class="o">=</span><span class="nv">DRONE_GITEA_CLIENT_SECRET</span><span class="o">={{</span>DRONE_GITEA_CLIENT_SECRET<span class="o">}}</span> <span class="se">\
</span><span class="se"></span>--env<span class="o">=</span><span class="nv">DRONE_RPC_SECRET</span><span class="o">={{</span>DRONE_RPC_SECRET<span class="o">}}</span> <span class="se">\
</span><span class="se"></span>--env<span class="o">=</span><span class="nv">DRONE_SERVER_HOST</span><span class="o">={{</span>DRONE_SERVER_HOST<span class="o">}}</span> <span class="se">\
</span><span class="se"></span>--env<span class="o">=</span><span class="nv">DRONE_SERVER_PROTO</span><span class="o">={{</span>DRONE_SERVER_PROTO<span class="o">}}</span> <span class="se">\
</span><span class="se"></span>--env<span class="o">=</span><span class="nv">DRONE_USER_CREATE</span><span class="o">=</span>username:<span class="o">{{</span>ADMIN_USERNAME<span class="o">}}</span>,admin:true <span class="se">\
</span><span class="se"></span>--publish<span class="o">=</span>80:80 <span class="se">\
</span><span class="se"></span>--restart<span class="o">=</span>always <span class="se">\
</span><span class="se"></span>--detach<span class="o">=</span><span class="nb">true</span> <span class="se">\
</span><span class="se"></span>--name<span class="o">=</span>drone <span class="se">\
</span><span class="se"></span>drone/drone:1
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker run -d <span class="se">\
</span><span class="se"></span>-v /var/run/docker.sock:/var/run/docker.sock <span class="se">\
</span><span class="se"></span>-e <span class="nv">DRONE_RPC_PROTO</span><span class="o">=</span>https <span class="se">\
</span><span class="se"></span>-e <span class="nv">DRONE_RPC_HOST</span><span class="o">=</span>drone.company.com <span class="se">\
</span><span class="se"></span>-e <span class="nv">DRONE_RPC_SECRET</span><span class="o">=</span>super-duper-secret <span class="se">\
</span><span class="se"></span>-e <span class="nv">DRONE_RUNNER_CAPACITY</span><span class="o">=</span><span class="m">2</span> <span class="se">\
</span><span class="se"></span>-e <span class="nv">DRONE_RUNNER_NAME</span><span class="o">=</span><span class="si">${</span><span class="nv">HOSTNAME</span><span class="si">}</span> <span class="se">\
</span><span class="se"></span>-e <span class="nv">DRONE_UI_USERNAME</span><span class="o">=</span>admin <span class="se">\
</span><span class="se"></span>-e <span class="nv">DRONE_UI_PASSWORD</span><span class="o">=</span>admin <span class="se">\
</span><span class="se"></span>-p 3200:3000 <span class="se">\
</span><span class="se"></span>--restart always <span class="se">\
</span><span class="se"></span>--name runner <span class="se">\
</span><span class="se"></span>drone/drone-runner-docker:1
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker logs runner
</code></pre></td></tr></table>
</div>
</div><h3 id="配置-nginx-反代">配置 Nginx 反代</h3>
<p>在<code>/etc/nginx/sites-available/default</code>后面追加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">server <span class="o">{</span>
    listen <span class="m">443</span> ssl http2<span class="p">;</span>
    listen <span class="o">[</span>::<span class="o">]</span>:443 ssl http2<span class="p">;</span>

    server_name &lt;域名&gt;<span class="p">;</span>

    ssl_certificate &lt;证书路径&gt;<span class="p">;</span>
    ssl_certificate_key &lt;密钥路径&gt;<span class="p">;</span>
    ssl_session_timeout 1d<span class="p">;</span>
    ssl_session_cache shared:MozSSL:10m<span class="p">;</span>
    ssl_session_tickets off<span class="p">;</span>

    <span class="c1"># curl https://ssl-config.mozilla.org/ffdhe2048.txt &gt; /path/to/dhparam</span>
    ssl_dhparam /path/to/dhparam<span class="p">;</span>

    <span class="c1"># intermediate configuration</span>
    ssl_protocols TLSv1.2 TLSv1.3<span class="p">;</span>
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384<span class="p">;</span>
    ssl_prefer_server_ciphers off<span class="p">;</span>

    <span class="c1"># HSTS (ngx_http_headers_module is required) (63072000 seconds)</span>
    add_header Strict-Transport-Security <span class="s2">&#34;max-age=63072000&#34;</span> always<span class="p">;</span>

    client_max_body_size 4096M<span class="p">;</span>
    location / <span class="o">{</span>
        proxy_pass http://127.0.0.1:3100<span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Drone 默认会选择 amd64 架构的 runner，但是我们的树莓派是 arm64 的，会导致构建一直处于<code>Pending</code>状态，所以项目的<code>.drone.yml</code>需要指定平台，比如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">pipeline</span><span class="w">
</span><span class="w"></span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">docker</span><span class="w">
</span><span class="w"></span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span><span class="w"></span><span class="nt">platform</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">os</span><span class="p">:</span><span class="w"> </span><span class="l">linux</span><span class="w">
</span><span class="w">  </span><span class="nt">arch</span><span class="p">:</span><span class="w"> </span><span class="l">arm64</span><span class="w">
</span><span class="w"></span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">build</span><span class="w">
</span><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">golang</span><span class="w">
</span><span class="w">    </span><span class="nt">commands</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">go build</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>]]></description></item><item><title>树莓派4安装Docker</title><link>https://negoces.github.io/posts/c0b3720d/</link><pubDate>Wed, 03 Mar 2021 21:55:47 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/c0b3720d/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/c0b3720d/cover.png" referrerpolicy="no-referrer">
            </div><p>Docker 大法好！！！</p>
<h2 id="安装必要工具">安装必要工具</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt update
sudo apt install apt-transport-https ca-certificates curl gnupg -y
</code></pre></td></tr></table>
</div>
</div><h2 id="安装-docker">安装 Docker</h2>
<p>下载安装 GPG 密钥</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -fsSL https://mirror.sjtu.edu.cn/docker-ce/linux/debian/gpg <span class="p">|</span> sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
</code></pre></td></tr></table>
</div>
</div><p>添加镜像源</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="se">\
</span><span class="se"></span><span class="s2">&#34;deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirror.sjtu.edu.cn/docker-ce/linux/debian buster stable&#34;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>安装 Docker-ce</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt update
sudo apt install docker-ce docker-ce-cli containerd.io -y
</code></pre></td></tr></table>
</div>
</div><h2 id="赋予账户可直接操作-docker-的权限">赋予账户可直接操作 Docker 的权限</h2>
<p>将自己的账户添加到 docker 组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo usermod -aG docker <span class="nv">$USER</span>
newgrp docker
</code></pre></td></tr></table>
</div>
</div><h2 id="添加-docker-仓库加速">添加 Docker 仓库加速</h2>
<p>编辑或新建<code>/etc/docker/daemon.json</code>文件，向其中添加<code>registry-mirrors</code>项</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="se">\
</span><span class="se"></span><span class="s1">&#39;{
</span><span class="s1">    &#34;registry-mirrors&#34;: [&#34;https://docker.mirrors.sjtug.sjtu.edu.cn&#34;]
</span><span class="s1">}&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/docker/daemon.json &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><h2 id="启动-docker-并设置自启">启动 Docker 并设置自启</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo systemctl start docker
sudo systemctl <span class="nb">enable</span> docker
sudo systemctl status docker
</code></pre></td></tr></table>
</div>
</div><h2 id="安装-portainer-面板">安装 Portainer 面板</h2>
<p>为了防止待会部署面板时拉取过慢，我们提前拉取</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker pull portainer/portainer-ce
</code></pre></td></tr></table>
</div>
</div><p>部署面板</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker volume create portainer_data
docker run -d <span class="se">\
</span><span class="se"></span>-p 8000:8000 <span class="se">\
</span><span class="se"></span>-p 9000:9000 <span class="se">\
</span><span class="se"></span>--name<span class="o">=</span>portainer <span class="se">\
</span><span class="se"></span>--restart<span class="o">=</span>always <span class="se">\
</span><span class="se"></span>-v /var/run/docker.sock:/var/run/docker.sock <span class="se">\
</span><span class="se"></span>-v portainer_data:/data <span class="se">\
</span><span class="se"></span>portainer/portainer-ce
</code></pre></td></tr></table>
</div>
</div><p>到此为止，Docker 和 Portainer 面板均已部署完毕，可前往<code>&lt;ip&gt;：9000</code>访问面板</p>]]></description></item><item><title>树莓派4入门指南(无显示器)</title><link>https://negoces.github.io/posts/04c00a0d/</link><pubDate>Wed, 03 Mar 2021 20:54:16 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/04c00a0d/</guid><description><![CDATA[<h2 id="准备">准备</h2>
<p>所需材料:</p>
<ul>
<li>树莓派*1</li>
<li>SD 卡*1</li>
<li>树莓派系统镜像*1</li>
<li>PC*1</li>
<li>Etcher*1</li>
<li>活人*1</li>
</ul>
<h2 id="制作带有系统的-sd-卡">制作带有系统的 SD 卡</h2>
<p>打开 Etcher，点击最左侧的<code>Flash from file</code>，选择你所下载的树莓派镜像，点击中间的<code>Select target</code>，勾选你的 SD 卡，点击<code>Select</code>，点击最右边的<code>Flash</code>等待烧录完即可。</p>
<p>烧录完之后系统里面会多出一个命名为<code>boot</code>的分区，在此分区里面创建一个空白的名为<code>ssh</code>的文件以开启 ssh 远程访问。</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>连接到WiFi网络<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>在<code>boot</code>分区创建<code>wpa_supplicant.conf</code>并编辑</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">ctrl_interface</span><span class="o">=</span><span class="nv">DIR</span><span class="o">=</span>/var/run/wpa_supplicant <span class="nv">GROUP</span><span class="o">=</span>netdev
<span class="nv">update_config</span><span class="o">=</span><span class="m">1</span>
<span class="nv">country</span><span class="o">=</span>&lt;填写ISO 3166-1国家码&gt;<span class="o">(</span>建议使用<span class="sb">`</span>US<span class="sb">`</span>,<span class="sb">`</span>CN<span class="sb">`</span>可能会导致连接不上WiFi<span class="o">)</span>

<span class="nv">network</span><span class="o">={</span>
 <span class="nv">ssid</span><span class="o">=</span><span class="s2">&#34;&lt;无线名称&gt;&#34;</span>
 <span class="nv">psk</span><span class="o">=</span><span class="s2">&#34;&lt;无线密码&gt;&#34;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>使用USB启动<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>一、更新<code>eeprom</code></p>
<ol>
<li>准备一张 SD 卡，格式化成 FAT32 格式</li>
<li>前往<a href="https://github.com/raspberrypi/rpi-eeprom/releases/" target="_blank" rel="noopener noreffer">Github</a>下载<code>rpi-boot-eeprom-recovery-xxx.zip</code>(要求 vl805 以上的版本)</li>
<li>将 zip 内的文件解压到 SD 卡内</li>
<li>将 SD 卡插入树莓派，插电</li>
<li>等待一段时间，当绿灯开始规律闪烁时则表示更新完毕</li>
</ol>
<p>二、制作 USB 启动镜像</p>
<ul>
<li>与制作 SD 卡镜像一样，把勾选 SD 卡改为勾选 USB 设备即可</li>
</ul>
</div>
        </div>
    </div>
<h2 id="装配你的树莓派">装配你的树莓派</h2>
<p>插上 SD 卡(U 盘)，装上散热马甲(如果有的话)，插上网线，插上电源，静待开机</p>
<h2 id="连接你的树莓派">连接你的树莓派</h2>
<p>前往你的路由器查看你的树莓派 IP，一般主机名就是<code>raspberrypi</code>，我的树莓派分配到的 IP 是<code>10.0.0.181</code>，用 ssh 连接(默认用户名:<code>pi</code>密码:<code>raspberry</code>)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">ssh pi@10.0.0.181
<span class="c1"># 进去之后改一下密码</span>
passwd
<span class="c1"># 第一个输入当前密码，第二个和第三个是新密码</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="设置镜像并更新">设置镜像并更新</h2>
<blockquote>
<p>我的配置用的是 testing 更新通道，软件比较新但也可能出现 bug</p>
</blockquote>
<p>设置 Debian 仓库镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="se">\
</span><span class="se"></span><span class="s2">&#34;# /etc/apt/sources.list
</span><span class="s2">deb https://mirrors.sjtug.sjtu.edu.cn/debian testing main contrib non-free
</span><span class="s2">deb https://mirrors.sjtug.sjtu.edu.cn/debian testing-updates main contrib non-free
</span><span class="s2">deb https://mirrors.sjtug.sjtu.edu.cn/debian-security/ stable/updates main contrib non-free
</span><span class="s2">deb-src https://mirrors.sjtug.sjtu.edu.cn/debian testing main contrib non-free
</span><span class="s2">deb-src https://mirrors.sjtug.sjtu.edu.cn/debian testing-updates main contrib non-free
</span><span class="s2">deb-src https://mirrors.sjtug.sjtu.edu.cn/debian-security/ stable/updates main contrib non-free&#34;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/apt/sources.list &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>设置 RaspberryPi 仓库镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="se">\
</span><span class="se"></span><span class="s2">&#34;# /etc/apt/sources.list.d/raspi.list
</span><span class="s2">deb https://mirrors.sjtug.sjtu.edu.cn/raspberrypi/debian/ buster main
</span><span class="s2">deb-src https://mirrors.sjtug.sjtu.edu.cn/raspberrypi/debian/ buster main&#34;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/apt/sources.list.d/raspi.list &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>对系统镜像全量更新</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt update
sudo apt full-upgrade -y
</code></pre></td></tr></table>
</div>
</div><h2 id="设置中文">设置中文</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="se">\
</span><span class="se"></span><span class="s1">&#39;LANG=zh_CN.UTF-8
</span><span class="s1">LANGUAGE=&#34;zh_CN:zh:en_US:en&#34;&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/environment &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>然后重启</p>
<p>然后，Enjoy youself!</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>小技巧<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><h4 id="磁盘测速">磁盘测速</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>./test.dbf <span class="nv">bs</span><span class="o">=</span>512k <span class="nv">count</span><span class="o">=</span><span class="m">1024</span> <span class="nv">conv</span><span class="o">=</span>fdatasync
</code></pre></td></tr></table>
</div>
</div><p>将会在当前目录写入一个 512MiB 的<code>test.dbf</code>文件来测试写入速度</p>
<h4 id="查看温度">查看温度</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 方法一：直接查看系统文件</span>
cat /sys/class/thermal/thermal_zone0/temp
<span class="c1"># 方法二：通过vcgencmd查看</span>
vcgencmd measure_temp
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>]]></description></item><item><title>Linux ane Me</title><link>https://negoces.github.io/posts/2109a7df/</link><pubDate>Mon, 25 Jan 2021 14:42:03 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/2109a7df/</guid><description><![CDATA[<p>Linux 因为其稳定和安全被不少服务器所使用，我也因为偶然接触到了 Linux，发现了它的方便，甚至将它作为日常系统使用。</p>
<h2 id="第一次接触-linux">第一次接触 Linux</h2>
<p>我一个接触到的 Linux 叫<a href="https://www.slax.org/" target="_blank" rel="noopener noreffer">Slax</a>，我也不清楚它算不算一个发行版本，总之它是基于 Debian 的。</p>
<p>当时我高一，上的是封闭式学校，不给带电子产品，一周下来唯一能接触电子产品的时候便是微机课。因为平时的高强度学习，微机课一般都被我们当作放松时间(虽然要过会考)，便想着通过机房的电脑玩些什么。然而学校的老师们早就想到了这一点，通过路由切断了网络，安装了极域电子教室对 USB 进行管控(虽然后期通过注册表找到了卸载密码)。我曾因为重装家里面电脑的系统在 U 盘写了个老毛桃 PE，于是在微机室的电脑上启动试了一下发现可以启动。但是 PE 在运行时将系统加载到内存上，安装的软件关机之后就没有了。于是我在万恶的百度(当时还不会上谷歌)上面搜索&quot;口袋系统&quot;，我便在搜索结果里面看到了 Slax。<br>
当时没管那么多，下载下来解压到 U 盘，执行安装脚本。进入系统之后看到了 KDE 桌面和浏览器，那时候只会上网，不知道怎么装软件。<br>
之后官网更新了 Slax9 桌面环境变了，变成了 Slax 自己开发的桌面，但是因为软件太少我也从官网学会了用<code>apt</code>(debian 系 Linux 的包管理器)指令来安装软件，此时的我还没接触到镜像(mirrors)这一概念，看着十几 KB/s 的速度在那傻傻的等软件下好。</p>
<p>虽然当时没有通过 Slax 接触到 Linux 很深层的东西，但是也接触到了 Linux 的部分指令。</p>
<h2 id="再次接触">再次接触</h2>
<p>过了些时候，忽然不知道在哪看到了国产 Linux(Deepin) 然后就想去试一下，安装完之后被那华丽的动画惊艳了(那时配置不好，有点卡)，体验了一把，确实不错，但是最后被无线网卡的驱动给劝退了(还是因为当时不懂)。之后又看到了网上 Cyborg Hawk Linux(目前好像停止维护了) 的界面，觉得挺帅又去尝试了一下，发现自己不会用，卸载！</p>
<figure>
     <figcaption>
            <h4>Cyborg Hawk Linux</h4>
        </figcaption>
</figure>

<h2 id="深入接触">深入接触</h2>
<p>真正的接触 Linux 是我买了个树莓派，其系统 Raspbian 基于 Debian，也是因为树莓派让我接触到了 mirrors(镜像)这一概念，看着 9M/s 的下载速度真舒服，后来尝试这在树莓派上面搭建 Wordpress，出于树莓派的性能有限便抛弃了桌面环境使用指令对系统进行操作，刚开始是用 Xshell 连接到树莓派的，后来因为重装了系统懒得下载了便直接使用了 Windows10 自带的 ssh(发现 ssh 真香)。之后又不满足在内网里面搭建博客又在腾讯云买了个云服务器(用的是 Ubuntu Server)而且还搞了备案(因为服务器续费太贵且用不到便退还了服务器并撤销了备案)，然后又折腾了很长时间的 Nginx 和 HTTPS，最后发现服务器带宽太低了就 1Mbps 访问速度非常慢就没搞了。服务器买了一年放在那也是闲着就尝试着搭建了 Minecraft 服务器、内网穿透等等东西。</p>
<figure>
     <figcaption>
            <h4>Raspbian</h4>
        </figcaption>
</figure>

<p>到此为止我学会了一些简单的指令，比如删除、复制、移动、新建文件夹、使用 nano 编辑文本等。</p>
<p>其实对 Linux 了解最为深入的还是买了笔记本然后在笔记本上装了个 Linux，刚开始装的是 Ubuntu 装了个 Geany 作为 C 语言学习环境，顺便装了个 JRE 用来玩我的世界。结果发现 Ubuntu 有 BUG，显卡驱动有问题，有时候还管不了机，正好看见这样一篇文章《人生苦短，我选 Manjaro》然后就尝试了一下 Manjaro，说实话真的方便安装驱动直接用<code>mhwd</code>指令就能完成。</p>
<figure>
     <figcaption>
            <h4>Manjaro</h4>
        </figcaption>
</figure>

<p>目前 Manjaro GNOME 是我日常使用的系统，装了 VSCode 还有一些其他 IDE，众所周知，Linux 没用 QQ，我用的是用 yay 装的 com.qq.tim.spark
虽然托盘独立了看起来有点难受，但是使用起来并没有什么大问题。</p>]]></description></item><item><title>iptables从入门到放弃</title><link>https://negoces.github.io/posts/16e870f5/</link><pubDate>Mon, 18 Jan 2021 17:29:57 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/16e870f5/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/16e870f5/cover.png" referrerpolicy="no-referrer">
            </div><p>iptables 是 Linux 系统上常用的命令行工具，主要用来配置防火墙。运用 iptables 我们能够实现流量的转发、拦截等操作</p>
<h2 id="iptables-是什么">iptables 是什么</h2>
<p>iptables 是运行在用户空间的应用软件，通过控制 Linux 内核 netfilter 模块，来管理网络数据包的处理和转发。在大部分 Linux 发行版中，可以通过手册页或<code>man iptables</code>获取用户手册。</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>netfilter是什么(摘自Wiki)<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Netfilter，在 Linux 内核中的一个软件框架，用于管理网络数据包。不仅具有网络地址转换（NAT）的功能，也具备数据包内容修改、以及数据包过滤等防火墙功能。利用运作于用户空间的应用软件，如 iptables、ebtables 和 arptables 等，来控制 Netfilter，系统管理者可以管理通过 Linux 操作系统的各种网络数据包。1990 年代，Netfilter 在 Linux 2.3.15 版时进入 Linux 内核，正式应用于 Linux 2.4 版。</div>
        </div>
    </div>
<p>简而言之就是 Netfilter 的上层程序，用户通过 iptables 指定规则，由 Netfilter 来执行，实现流量的拦截、转发等操作。</p>
<h2 id="iptables-的链chain">iptables 的链(chain)</h2>
<p>iptables 中有 5 个链，分别与 netfilter 中的 hook 对应</p>
<ul>
<li><code>PREROUTING</code> - 对应<code>NF_IP_PRE_ROUTING</code>,任何进入网络堆栈的流量都会触发此 hook。</li>
<li><code>INPUT</code> - 对应<code>NF_IP_LOCAL_IN</code>，如果数据包发送到本地系统，则在路由传入数据包之后，将触发此 hook。</li>
<li><code>FORWARD</code> - 对应<code>NF_IP_FORWARD</code>，如果该数据包转发到另一台主机，则在路由输入数据包之后将触发此 hook。</li>
<li><code>OUTPUT</code> - 对应<code>NF_IP_LOCAL_OUT</code>，由本地的出栈流量触发。</li>
<li><code>POSTROUTING</code> - 对应<code>NF_IP_POST_ROUTING</code>，任何传出的流量都将触发此 hook。</li>
</ul>
<p>数据包走向:</p>
<ul>
<li>目的地址为本机的传入流量: -&gt; <code>PREROUTING</code> -&gt; <code>INPUT</code></li>
<li>目的地址为其他主机的传入流量: -&gt; <code>PREROUTING</code> -&gt; <code>FORWARD</code> -&gt; <code>POSTROUTING</code> -&gt;</li>
<li>本机出站流量: <code>OUTPUT</code> -&gt; <code>POSTROUTING</code> -&gt;</li>
</ul>
<h2 id="iptables-的表tables">iptables 的表(tables)</h2>
<h3 id="filter-表">filter 表</h3>
<p>filter 表是默认的表，如果不指明表则使用此表。其通常用于过滤数据包。其中的内建链包括：</p>
<ul>
<li>INPUT,OUTPUT,FORWARD</li>
</ul>
<h3 id="nat-表">nat 表</h3>
<p>nat 表如其名，用于地址转换操作。其中的内建链包括：</p>
<ul>
<li>PREROUTING,POSTROUTING,OUTPUT</li>
</ul>
<h3 id="mangle-表">mangle 表</h3>
<p>mangle 表用于处理数据包。其和 nat 表的主要区别在于，nat 表侧重连接而 mangle 表侧重每一个数据包。其中内建链列表如下。</p>
<ul>
<li>PREROUTING,OUTPUT,FORWARD,INPUT,POSTROUTING</li>
</ul>
<h3 id="raw-表">raw 表</h3>
<p>raw 表用于处理异常，有如下两个内建链：</p>
<ul>
<li>PREROUTING,OUTPUT</li>
</ul>
<figure>
     <figcaption>
            <h4>流量流向</h4>
        </figcaption>
</figure>

<h2 id="iptables-的规则rules">iptables 的规则(rules)</h2>
<p>根据规则匹配条件来尝试匹配报文，一旦匹配成功，就由规则定义的处理动作做出处理。</p>
<h3 id="匹配条件">匹配条件</h3>
<p>基本匹配条件：源地址，目标地址，传输层协议<br>
扩展匹配条件：由扩展模块定义</p>
<h3 id="处理动作">处理动作</h3>
<p>基本处理动作：ACCEPT、DROP<br>
扩展处理动作：REJECT、RETURN、LOG、REDIRECT</p>
<h3 id="iptables的链内置链和自定义链">iptables的链：内置链和自定义链</h3>
<p>内置链：对应于hook functions<br>
自定义链接：用于内置链的扩展和补充，可实现更灵活的规则管理机制；自定义链可以设置完之后，添加到内置链中，方便管理</p>
<blockquote>
<p>待续&hellip; (iptables的命令操作)</p>
</blockquote>]]></description></item><item><title>C语言链表实现</title><link>https://negoces.github.io/posts/53e2617f/</link><pubDate>Sat, 09 Jan 2021 00:29:35 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/53e2617f/</guid><description><![CDATA[<h2 id="实现思路">实现思路</h2>
<p>假设现在有个三节点的链表,每个节点具有两个指针:</p>
<ul>
<li>prev —— 上一节点地址</li>
<li>next —— 下一节点地址</li>
</ul>
<div class="mermaid" id="id-1"></div>
<h3 id="插入节点">插入节点</h3>
<p>注:虚线表示删除,D为插入的节点</p>
<div class="mermaid" id="id-2"></div>
<p>按照这个图的操作应该是:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">C</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">D</span>
<span class="n">D</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">C</span>
<span class="n">D</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">B</span>
<span class="n">B</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">D</span>
</code></pre></td></tr></table>
</div>
</div><p>假设此时的链表传入的table是B,插入的node为D,那么C语言代码为:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">node</span>
<span class="n">node</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span>
<span class="n">node</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">table</span>
<span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">node</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="删除节点">删除节点</h3>
<p>注:虚线表示删除,B为要删除的节点</p>
<div class="mermaid" id="id-3"></div>
<p>按照这个图的操作应该是:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">A</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">C</span>
<span class="n">C</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">A</span>
</code></pre></td></tr></table>
</div>
</div><p>假设此时的链表传入的table是B,那么C语言代码为:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">table</span><span class="o">-&gt;</span><span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
<span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
<span class="n">free</span><span class="p">(</span><span class="n">table</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="代码实现">代码实现</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">node</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>   <span class="c1">//节点ID
</span><span class="c1"></span>    <span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="n">prev</span><span class="p">;</span> <span class="c1">//上节点地址
</span><span class="c1"></span>    <span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span> <span class="c1">//下节点地址
</span><span class="c1"></span><span class="p">}</span> <span class="n">node</span><span class="p">;</span>

<span class="n">node</span> <span class="o">*</span><span class="nf">createNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">uid</span><span class="p">);</span>                      <span class="c1">//创建(节点ID)
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">addNode</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">table</span><span class="p">,</span> <span class="kt">int</span> <span class="n">uid</span><span class="p">,</span> <span class="kt">int</span> <span class="n">newUid</span><span class="p">);</span> <span class="c1">//增(链表,节点UID,新建节点UID)[在UID节点后插入]
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">delNode</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">table</span><span class="p">,</span> <span class="kt">int</span> <span class="n">uid</span><span class="p">);</span>             <span class="c1">//删(链表,节点UID)
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">printTable</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">table</span><span class="p">);</span>                   <span class="c1">//打印(链表)
</span><span class="c1"></span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">node</span> <span class="o">*</span><span class="n">table</span> <span class="o">=</span> <span class="n">createNode</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">addNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">addNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
    <span class="n">addNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">addNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
    <span class="n">addNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="n">addNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
    <span class="n">delNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">delNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
    <span class="n">delNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="n">printTable</span><span class="p">(</span><span class="n">table</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">node</span> <span class="o">*</span><span class="nf">createNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">uid</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">node</span> <span class="o">*</span><span class="n">newTable</span> <span class="o">=</span> <span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">node</span><span class="p">));</span>
    <span class="n">newTable</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">=</span> <span class="n">uid</span><span class="p">;</span>
    <span class="n">newTable</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">newTable</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">newTable</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">addNode</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">table</span><span class="p">,</span> <span class="kt">int</span> <span class="n">uid</span><span class="p">,</span> <span class="kt">int</span> <span class="n">newUid</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">table</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">//未查找到相应节点
</span><span class="c1"></span>            <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Node %d not find!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">uid</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">==</span> <span class="n">newUid</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">//节点ID已存在
</span><span class="c1"></span>            <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Node %d exist!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">newUid</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">==</span> <span class="n">uid</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">//查找到相应节点
</span><span class="c1"></span>            <span class="n">node</span> <span class="o">*</span><span class="n">newTable</span> <span class="o">=</span> <span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">node</span><span class="p">));</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="p">{</span> <span class="c1">//如果存在下一节点
</span><span class="c1"></span>                <span class="c1">//建立当前与下一链表的联系
</span><span class="c1"></span>                <span class="n">newTable</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
                <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">newTable</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="c1">//建立当前与上一链表的联系
</span><span class="c1"></span>            <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">newTable</span><span class="p">;</span>
            <span class="n">newTable</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">table</span><span class="p">;</span>
            <span class="c1">//写入当前链表ID
</span><span class="c1"></span>            <span class="n">newTable</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">=</span> <span class="n">newUid</span><span class="p">;</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">table</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">delNode</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">table</span><span class="p">,</span> <span class="kt">int</span> <span class="n">uid</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">table</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">//未查找到相应节点
</span><span class="c1"></span>            <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Node %d not find!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">uid</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">==</span> <span class="n">uid</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">//查找到相应节点
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="p">{</span> <span class="c1">//如果存在下一节点
</span><span class="c1"></span>                <span class="c1">//建立上一节点与下一节点的连接
</span><span class="c1"></span>                <span class="n">table</span><span class="o">-&gt;</span><span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
                <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span> <span class="c1">//如果不存在下一节点
</span><span class="c1"></span>                <span class="c1">//设置上一节点的next为NULL
</span><span class="c1"></span>                <span class="n">table</span><span class="o">-&gt;</span><span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="c1">//释放当前节点
</span><span class="c1"></span>            <span class="n">free</span><span class="p">(</span><span class="n">table</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">table</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">printTable</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">table</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">table</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Node: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">);</span>
        <span class="n">table</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>使用curl测试API</title><link>https://negoces.github.io/posts/9058bdc8/</link><pubDate>Sat, 07 Nov 2020 12:33:57 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/9058bdc8/</guid><description><![CDATA[<div class="featured-image">
                <img src="/cover.png" referrerpolicy="no-referrer">
            </div><p>curl是从服务器传输数据或向服务器传输数据的工具，熟悉其用法后，完全可以取代 Postman 这一类的图形界面工具。</p>
<h2 id="常规用法">常规用法</h2>
<p>模拟浏览器向网站发送请求<code>curl &lt;URL&gt;</code>,比如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl <span class="s2">&#34;https://www.bilibili.com&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="参数解释">参数解释</h2>
<h3 id="-x-指定请求方法">-X 指定请求方法</h3>
<p>指定 HTTP 请求的方法。RESTful API的四种方法:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -X GET <span class="s2">&#34;https://example.com&#34;</span>
curl -X POST <span class="s2">&#34;https://example.com&#34;</span>
curl -X PUT <span class="s2">&#34;https://example.com&#34;</span>
curl -X DELETE <span class="s2">&#34;https://example.com&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="-a-指定ua">-A 指定UA</h3>
<p>指定UA（<code>User-Agent</code>）。curl 的默认用户代理字符串是（<code>curl/[version]</code>）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -A <span class="s1">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#39;</span> https://google.com
</code></pre></td></tr></table>
</div>
</div><p>也可以通过<code>-H</code>参数直接指定</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -H <span class="s1">&#39;User-Agent: php/1.0&#39;</span> https://google.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-b-发送cookies">-b 发送Cookies</h3>
<p>向服务器发送 Cookies。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -b <span class="s1">&#39;foo1=bar;foo2=bar2&#39;</span> https://google.com
</code></pre></td></tr></table>
</div>
</div><p>或者发送本地文件中的Cookies</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -b cookies.txt https://www.google.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-c-保存cookies">-c 保存Cookies</h3>
<p>将服务器设置的 Cookies 写入一个文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -c cookies.txt https://www.google.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-d-发送post数据体">-d 发送POST数据体</h3>
<p>用于发送 POST 请求的数据体。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -d<span class="s1">&#39;login=emma＆password=123&#39;</span> -X POST https://google.com/login
<span class="c1">#或者使用本地文件</span>
curl -d <span class="s1">&#39;@data.txt&#39;</span> https://google.com/login
</code></pre></td></tr></table>
</div>
</div><p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p>
<h3 id="-e-设置referer">-e 设置Referer</h3>
<p>设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -e <span class="s1">&#39;https://google.com?q=example&#39;</span> https://www.example.com
</code></pre></td></tr></table>
</div>
</div><p>可以通过<code>-H</code>参数直接添加标头<code>Referer</code>，达到同样效果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -H <span class="s1">&#39;Referer: https://google.com?q=example&#39;</span> https://www.example.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-f-上传文件">-F 上传文件</h3>
<p>向服务器上传二进制文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -F <span class="s1">&#39;file=@photo.png&#39;</span> https://google.com/profile
</code></pre></td></tr></table>
</div>
</div><p>指定 MIME 类型。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -F <span class="s1">&#39;file=@photo.png;type=image/png&#39;</span> https://google.com/profile
</code></pre></td></tr></table>
</div>
</div><h3 id="-h-指定http标头">-H 指定HTTP标头</h3>
<p>添加 HTTP 请求的标头。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -H <span class="s1">&#39;Accept-Language: en-US&#39;</span> -H <span class="s1">&#39;Secret-Message: xyzzy&#39;</span> https://google.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-i-打印http标头">-i 打印HTTP标头</h3>
<p>打印出服务器回应的 HTTP 标头。收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -i https://www.example.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-k-跳过ssl检测">-k 跳过SSL检测</h3>
<p>跳过 SSL 检测。不会检查服务器的 SSL 证书是否正确。</p>
<h3 id="-l-开启重定向">-L 开启重定向</h3>
<p>让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p>
<h3 id="-o-保存为文件">-o 保存为文件</h3>
<p>将服务器的回应保存成文件，等同于<code>wget</code>命令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -o example.html https://www.example.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-u-basic-auth认证">-u Basic Auth认证</h3>
<p>用来设置服务器认证的用户名和密码。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -u <span class="s1">&#39;bob:12345&#39;</span> https://google.com/login
<span class="c1">#或</span>
curl https://bob:12345@google.com/login
</code></pre></td></tr></table>
</div>
</div><h3 id="-x-设置代理">-x 设置代理</h3>
<p>指定 HTTP 请求的代理。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -x socks5://user:passwd@proxy.com:8080 https://www.example.com
</code></pre></td></tr></table>
</div>
</div><p>如果没有指定代理协议，默认为 HTTP。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -x user:passwd@proxy.com:8080 https://www.example.com
</code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>