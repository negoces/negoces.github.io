<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Linux - 标签 - NEGOCES's Blog</title><link>https://negoces.github.io/tags/linux/</link><description>Linux - 标签 - NEGOCES's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>negoces@163.com (NEGOCES)</managingEditor><webMaster>negoces@163.com (NEGOCES)</webMaster><lastBuildDate>Sat, 20 Mar 2021 22:59:49 +0800</lastBuildDate><atom:link href="https://negoces.github.io/tags/linux/" rel="self" type="application/rss+xml"/><item><title>Kubernetes 学习日记</title><link>https://negoces.github.io/posts/baaa9162/</link><pubDate>Sat, 20 Mar 2021 22:59:49 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/baaa9162/</guid><description><![CDATA[<p>Kubernetes 是用于自动部署，扩展和管理容器化应用程序的开源系统。</p>
<div class="details admonition danger open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-skull-crossbones fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">当前处于草稿状态，且目前仅到安装 kubeadm 可以，创建集群暂未测试</div>
        </div>
    </div>
<div class="details admonition note">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>文章更新时间轴<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>2021/03/20 文章创建</li>
</ul>
</div>
        </div>
    </div>
<h2 id="引言">引言</h2>
<p>随着微服务、分布式的流行，容器化也逐渐流行起来，Kubernetes 也逐渐成为了一项技能，我便在课余时间抽时间来学习了一下。</p>
<p>Kubernetes 是一个容器编排工具，学习它肯定需要一个集群，但毕竟是学习，肯定没那么的资源来使用，我便使用虚拟机模拟了一个集群来进行学习。</p>
<h2 id="用虚拟机创建集群">用虚拟机创建集群</h2>
<p>考虑到 Kubernetes 的系统要求，我打算用 Fedora Server 作为虚拟机的系统，至于虚拟软件则因人而异了，有的人喜欢用 VM，我使用的是 KVM。</p>
<div class="details admonition tip">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Kubernetes 支持的系统<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>Ubuntu 16.04+</li>
<li>Debian 9+</li>
<li>CentOS 7+</li>
<li>Red Hat Enterprise Linux (RHEL) 7+</li>
<li>Fedora 25+</li>
<li>HypriotOS v1.0.1+</li>
<li>Flatcar Container Linux （使用 2512.3.0 版本测试通过）</li>
</ul>
</div>
        </div>
    </div>
<ol>
<li>前往 <a href="https://mirrors.aliyun.com/fedora/releases/33/Server/x86_64/iso/" target="_blank" rel="noopener noreffer">Aliyun</a> 下载<code>Fedora-*.iso</code>文件。</li>
<li>下载完毕后创建虚拟机，因为 k8s 的要求我们分配的虚拟机至少需要 <code>2 核 和 2G RAM</code>。</li>
<li>启动虚拟机，根据提示安装。</li>
<li>安装完毕后使用<code>reboot</code>重启，此时<code>iso</code>文件已经可以移除了。</li>
</ol>
<p>使用以上步骤创建至少两个虚拟机。</p>
<h2 id="安装-kubeadm-及其他组件">安装 kubeadm 及其他组件</h2>
<h3 id="每个节点上-mac-地址和-product_uuid-的唯一性">每个节点上 MAC 地址和 product_uuid 的唯一性</h3>
<p>Kubernetes 使用这些值来唯一确定集群中的节点。 如果这些值在每个节点上不唯一，可能会导致安装失败。</p>
<ul>
<li>你可以使用命令 <code>ip link</code> 或 <code>ifconfig -a</code> 来获取网络接口的 MAC 地址</li>
<li>可以使用 <code>sudo cat /sys/class/dmi/id/product_uuid</code> 命令对 product_uuid 校验</li>
</ul>
<h3 id="允许-iptables-检查桥接流量">允许 iptables 检查桥接流量</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo modprobe br_netfilter
cat <span class="s">&lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf
</span><span class="s">br_netfilter
</span><span class="s">EOF</span>

cat <span class="s">&lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
</span><span class="s">net.bridge.bridge-nf-call-ip6tables = 1
</span><span class="s">net.bridge.bridge-nf-call-iptables = 1
</span><span class="s">EOF</span>
sudo sysctl --system
</code></pre></td></tr></table>
</div>
</div><div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>放行端口<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>如果你用的是云服务器请确保以下端口已被放行</p>
<ul>
<li>控制平面节点: <code>6443</code>,<code>2379-2380</code>,<code>10250</code>,<code>10251</code>,<code>10252</code></li>
<li>工作节点: <code>10250</code>,<code>30000-32767</code></li>
</ul>
<p>端口的具体作用请查阅<a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports" target="_blank" rel="noopener noreffer">官网</a></p>
</div>
        </div>
    </div>
<h3 id="设置系统镜像">设置系统镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo rm -f /etc/yum.repos.d/*

<span class="nb">echo</span> <span class="s1">&#39;[fedora]
</span><span class="s1">name=Fedora $releasever - $basearch
</span><span class="s1">failovermethod=priority
</span><span class="s1">baseurl=https://mirrors.aliyun.com/fedora/releases/$releasever/Everything/$basearch/os/
</span><span class="s1">metadata_expire=28d
</span><span class="s1">gpgcheck=1
</span><span class="s1">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch
</span><span class="s1">skip_if_unavailable=False&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/yum.repos.d/fedora.repo &gt; /dev/null

<span class="nb">echo</span> <span class="s1">&#39;[updates]
</span><span class="s1">name=Fedora $releasever - $basearch - Updates
</span><span class="s1">failovermethod=priority
</span><span class="s1">baseurl=https://mirrors.aliyun.com/fedora/updates/$releasever/Everything/$basearch/
</span><span class="s1">enabled=1
</span><span class="s1">gpgcheck=1
</span><span class="s1">metadata_expire=6h
</span><span class="s1">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch
</span><span class="s1">skip_if_unavailable=False&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/yum.repos.d/fedora-updates.repo &gt; /dev/null

<span class="nb">echo</span> <span class="s1">&#39;[fedora-modular]
</span><span class="s1">name=Fedora Modular $releasever - $basearch
</span><span class="s1">failovermethod=priority
</span><span class="s1">baseurl=https://mirrors.aliyun.com/fedora/releases/$releasever/Modular/$basearch/os/
</span><span class="s1">enabled=1
</span><span class="s1">metadata_expire=7d
</span><span class="s1">gpgcheck=1
</span><span class="s1">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch
</span><span class="s1">skip_if_unavailable=False&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/yum.repos.d/fedora-modular.repo &gt; /dev/null

<span class="nb">echo</span> <span class="s1">&#39;[updates-modular]
</span><span class="s1">name=Fedora Modular $releasever - $basearch - Updates
</span><span class="s1">failovermethod=priority
</span><span class="s1">baseurl=https://mirrors.aliyun.com/fedora/updates/$releasever/Modular/$basearch/
</span><span class="s1">enabled=1
</span><span class="s1">gpgcheck=1
</span><span class="s1">metadata_expire=6h
</span><span class="s1">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch
</span><span class="s1">skip_if_unavailable=False&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/yum.repos.d/fedora-updates-modular.repo &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>系统更新: <code>sudo dnf update</code></p>
<h3 id="安装-docker">安装 Docker</h3>
<p>添加 mirrors</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo dnf -y install dnf-plugins-core
sudo dnf config-manager --add-repo <span class="se">\
</span><span class="se"></span>https://mirrors.aliyun.com/docker-ce/linux/fedora/docker-ce.repo
</code></pre></td></tr></table>
</div>
</div><p>安装 Docker</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo dnf install docker-ce docker-ce-cli containerd.io
</code></pre></td></tr></table>
</div>
</div><p>赋予账户可直接操作 Docker 的权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo usermod -aG docker <span class="nv">$USER</span>
newgrp docker
</code></pre></td></tr></table>
</div>
</div><p>添加 Docker 仓库加速</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="se">\
</span><span class="se"></span><span class="s1">&#39;{
</span><span class="s1">    &#34;exec-opts&#34;: [
</span><span class="s1">        &#34;native.cgroupdriver=systemd&#34;
</span><span class="s1">    ],
</span><span class="s1">    &#34;log-driver&#34;: &#34;json-file&#34;,
</span><span class="s1">    &#34;log-opts&#34;: {
</span><span class="s1">        &#34;max-size&#34;: &#34;100m&#34;
</span><span class="s1">    },
</span><span class="s1">    &#34;storage-driver&#34;: &#34;overlay2&#34;,
</span><span class="s1">    &#34;registry-mirrors&#34;: [
</span><span class="s1">        &#34;https://docker.mirrors.sjtug.sjtu.edu.cn&#34;
</span><span class="s1">    ]
</span><span class="s1">}&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/docker/daemon.json &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>启动 Docker 并设置自启</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo systemctl start docker
sudo systemctl <span class="nb">enable</span> docker
</code></pre></td></tr></table>
</div>
</div><h3 id="安装-kubeadm">安装 kubeadm</h3>
<p>添加 mirror</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
</span><span class="s">[kubernetes]
</span><span class="s">name=kubernetes
</span><span class="s">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
</span><span class="s">enabled=1
</span><span class="s">gpgcheck=1
</span><span class="s">repo_gpgcheck=1
</span><span class="s">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
</span><span class="s">exclude=kubelet kubeadm kubectl
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><p>禁用 SELinux</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">setenforce <span class="m">0</span>
sed -i <span class="s1">&#39;s/^SELINUX=enforcing$/SELINUX=permissive/&#39;</span> /etc/selinux/config
</code></pre></td></tr></table>
</div>
</div><p>安装并启动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo dnf install -y kubelet kubeadm kubectl --disableexcludes<span class="o">=</span>kubernetes

systemctl <span class="nb">enable</span> --now kubelet
</code></pre></td></tr></table>
</div>
</div><h2 id="使用-kubeadm-创建集群">使用 kubeadm 创建集群</h2>
<p>关闭防火墙</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">systemctl stop firewalld
systemctl disable firewalld
</code></pre></td></tr></table>
</div>
</div><p>关闭 swap</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">swapoff -a
sed -ri <span class="s1">&#39;s/.*swap.*/#&amp;/&#39;</span> /etc/fstab
</code></pre></td></tr></table>
</div>
</div><p>提前拉取所需镜像(因版本而异)，可用<code>kubeadm config images list</code>查看</p>
<blockquote>
<p>将<code>k8s.gcr.io</code>换成<code>registry.aliyuncs.com/google_containers/</code></p>
</blockquote>
<blockquote>
<p>也可修改配置实现加速<br>
<code>kubeadm config print-defaults --api-objects ClusterConfiguration &gt; kubeadm.conf</code>生成配置<br>
修改<code>kubernetesVersion:</code>为当前版本<br>
修改<code>imageRepository:</code>为<code>registry.aliyuncs.com/google_containers</code></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker pull registry.aliyuncs.com/google_containers/kube-apiserver:v1.20.5
docker pull registry.aliyuncs.com/google_containers/kube-controller-manager:v1.20.5
docker pull registry.aliyuncs.com/google_containers/kube-scheduler:v1.20.5
docker pull registry.aliyuncs.com/google_containers/kube-proxy:v1.20.5
docker pull registry.aliyuncs.com/google_containers/pause:3.2
docker pull registry.aliyuncs.com/google_containers/etcd:3.4.13-0
docker pull registry.aliyuncs.com/google_containers/coredns:1.7.0

docker tag registry.aliyuncs.com/google_containers/kube-apiserver:v1.20.5 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/kube-apiserver:v1.20.5
docker tag registry.aliyuncs.com/google_containers/kube-controller-manager:v1.20.5 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/kube-controller-manager:v1.20.5
docker tag registry.aliyuncs.com/google_containers/kube-scheduler:v1.20.5 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/kube-scheduler:v1.20.5
docker tag registry.aliyuncs.com/google_containers/kube-proxy:v1.20.5 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/kube-proxy:v1.20.5
docker tag registry.aliyuncs.com/google_containers/pause:3.2 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/pause:3.2
docker tag registry.aliyuncs.com/google_containers/etcd:3.4.13-0 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/etcd:3.4.13-0
docker tag registry.aliyuncs.com/google_containers/coredns:1.7.0 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/coredns:1.7.0
</code></pre></td></tr></table>
</div>
</div><p>初始化</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">kubeadm init
<span class="c1"># 或</span>
kubeadm init --ignore-preflight-errors<span class="o">=</span>Swap
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>在Linux上安装cifsd启用SMB共享</title><link>https://negoces.github.io/posts/4ab61985/</link><pubDate>Wed, 17 Mar 2021 19:14:22 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/4ab61985/</guid><description><![CDATA[<p>用树莓派做了一个网络存储，想挂载到系统上，便想到了 SMB 协议，之前用过 Samba 但是性能实属不行，恰巧在 Github 上看到了 cifsd 这个项目，并且支持 RDMA 所以在树莓派上面安装试试，结果发现效果还不错，速度蛮快的。</p>
<h2 id="安装必要的依赖">安装必要的依赖</h2>
<p>Github 上只有源码，没有现成的二进制文件，软件仓库里面也没有，所以必须自己编译(其实并不意外，这个程序是作为内核模块运行的，所以才有如此之高的性能)。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt update
sudo apt install linux-headers gcc make git autoconf <span class="se">\
</span><span class="se"></span>libtool pkg-config libnl-3-dev libnl-genl-3-dev libglib2.0-dev -y
</code></pre></td></tr></table>
</div>
</div><h2 id="编译安装-cifsd">编译安装 cifsd</h2>
<p>克隆并进入目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> ~
git clone https://github.com.cnpmjs.org/cifsd-team/cifsd.git
<span class="nb">cd</span> cifsd
</code></pre></td></tr></table>
</div>
</div><p>编译并安装，如果出现问题。。。我相信你百度能力一直可以。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">make                <span class="c1"># 编译</span>
sudo make install   <span class="c1"># 安装</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="编译安装-ksmbd-tools">编译安装 ksmbd-tools</h2>
<p>克隆并进入目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> ~
git clone https://github.com.cnpmjs.org/cifsd-team/cifsd-tools.git
<span class="nb">cd</span> ksmbd-tools
</code></pre></td></tr></table>
</div>
</div><p>编译并安装，如果出现问题。。。我相信你百度能力一直可以。(悄悄告诉你，其实这一步最容易出错)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">./autogen.sh
./configure
make
sudo make install
</code></pre></td></tr></table>
</div>
</div><h2 id="加载模块并设置开机自动加载">加载模块并设置开机自动加载</h2>
<p>加载模块，并编辑<code>/etc/modules-load.d/ksmbd.conf</code>文件以设置开机自动加载。。。算了，怕你不会，直接运行下面的指令吧</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo modprobe ksmbd
<span class="nb">echo</span> <span class="s1">&#39;ksmbd&#39;</span> <span class="p">|</span> sudo tee /etc/modules-load.d/ksmbd.conf &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>用<code>lsmod | grep ksmbd</code>查看模块是否被加载</p>
<h2 id="创建并编辑配置">创建并编辑配置</h2>
<p>先创建配置文件夹</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo mkdir /etc/ksmbd/
</code></pre></td></tr></table>
</div>
</div><h3 id="创建用户">创建用户</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># $USER 换成你想用的用户名</span>
sudo ksmbd.adduser -a <span class="nv">$USER</span>
<span class="c1"># 输密码，回车，再输一遍，回车</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="创建共享">创建共享</h3>
<p>参考<a href="https://github.com/cifsd-team/ksmbd-tools/blob/master/Documentation/configuration.txt" target="_blank" rel="noopener noreffer">文档(Github)</a>对<code>/etc/ksmbd/smb.conf</code>进行配置，下面是一键生成示例配置的指令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="s1">&#39;[global]
</span><span class="s1">tcp port = 445
</span><span class="s1">
</span><span class="s1">[share]
</span><span class="s1">comment = Share
</span><span class="s1">path = /home/share
</span><span class="s1">read only = no
</span><span class="s1">browseable = yes
</span><span class="s1">writeable = yes&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/ksmbd/smb.conf &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>经测试<code>tcp port = 445</code>这一行必须存在且需在<code>[global]</code>键下面，否则服务将无法在网络上监听。</p>
</blockquote>
<h2 id="启动测试">启动测试</h2>
<p>使用下面的指令启动服务，并用其他设备连接测试(别和我说你不会连接 SMB)，如果测试成功就可以停止服务进行下一步了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 启动</span>
sudo ksmbd.mountd
<span class="c1"># 停止</span>
sudo ksmbd.control -s
</code></pre></td></tr></table>
</div>
</div><h2 id="创建-sevice-文件实现开机自启">创建 sevice 文件实现开机自启</h2>
<h3 id="创建-sevice-文件">创建 sevice 文件</h3>
<p>创建<code>/etc/systemd/system/cifsd.service</code>文件，以下是一键指令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="s1">&#39;[Unit]
</span><span class="s1">Description=CIFSD
</span><span class="s1">After=network.target network-online.target nss-lookup.target
</span><span class="s1">
</span><span class="s1">[Service]
</span><span class="s1">Type=oneshot
</span><span class="s1">StandardError=journal
</span><span class="s1">User=root
</span><span class="s1">Group=root
</span><span class="s1">ExecStart=/usr/local/sbin/ksmbd.mountd
</span><span class="s1">ExecStop=/usr/local/sbin/ksmbd.control -s
</span><span class="s1">RemainAfterExit=true
</span><span class="s1">Restart=on-failure
</span><span class="s1">RestartSec=1s
</span><span class="s1">
</span><span class="s1">[Install]
</span><span class="s1">WantedBy=multi-user.target&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/systemd/system/cifsd.service &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><h3 id="设置开机自启">设置开机自启</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo systemctl daemon-reload
sudo systemctl <span class="nb">enable</span> --now cifsd   <span class="c1"># 设置自启并立即启动</span>
sudo systemctl status cifsd         <span class="c1"># 查看当前进程状态</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>大功告成，可以存你喜欢的小姐姐了<br>
因为 <code>cifsd</code> 支持 <code>RDMA</code> 可以不经过 CPU 直接传输数据，所以理论上是可以跑满网络带宽的<br>
至于你的带宽有多少你可以使用 <code>iperf3</code> 进行测试</p>
</blockquote>]]></description></item><item><title>Linux ane Me</title><link>https://negoces.github.io/posts/2109a7df/</link><pubDate>Mon, 25 Jan 2021 14:42:03 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/2109a7df/</guid><description><![CDATA[<p>Linux 因为其稳定和安全被不少服务器所使用，我也因为偶然接触到了 Linux，发现了它的方便，甚至将它作为日常系统使用。</p>
<h2 id="第一次接触-linux">第一次接触 Linux</h2>
<p>我一个接触到的 Linux 叫<a href="https://www.slax.org/" target="_blank" rel="noopener noreffer">Slax</a>，我也不清楚它算不算一个发行版本，总之它是基于 Debian 的。</p>
<p>当时我高一，上的是封闭式学校，不给带电子产品，一周下来唯一能接触电子产品的时候便是微机课。因为平时的高强度学习，微机课一般都被我们当作放松时间(虽然要过会考)，便想着通过机房的电脑玩些什么。然而学校的老师们早就想到了这一点，通过路由切断了网络，安装了极域电子教室对 USB 进行管控(虽然后期通过注册表找到了卸载密码)。我曾因为重装家里面电脑的系统在 U 盘写了个老毛桃 PE，于是在微机室的电脑上启动试了一下发现可以启动。但是 PE 在运行时将系统加载到内存上，安装的软件关机之后就没有了。于是我在万恶的百度(当时还不会上谷歌)上面搜索&quot;口袋系统&quot;，我便在搜索结果里面看到了 Slax。<br>
当时没管那么多，下载下来解压到 U 盘，执行安装脚本。进入系统之后看到了 KDE 桌面和浏览器，那时候只会上网，不知道怎么装软件。<br>
之后官网更新了 Slax9 桌面环境变了，变成了 Slax 自己开发的桌面，但是因为软件太少我也从官网学会了用<code>apt</code>(debian 系 Linux 的包管理器)指令来安装软件，此时的我还没接触到镜像(mirrors)这一概念，看着十几 KB/s 的速度在那傻傻的等软件下好。</p>
<p>虽然当时没有通过 Slax 接触到 Linux 很深层的东西，但是也接触到了 Linux 的部分指令。</p>
<h2 id="再次接触">再次接触</h2>
<p>过了些时候，忽然不知道在哪看到了国产 Linux(Deepin) 然后就想去试一下，安装完之后被那华丽的动画惊艳了(那时配置不好，有点卡)，体验了一把，确实不错，但是最后被无线网卡的驱动给劝退了(还是因为当时不懂)。之后又看到了网上 Cyborg Hawk Linux(目前好像停止维护了) 的界面，觉得挺帅又去尝试了一下，发现自己不会用，卸载！</p>
<figure>
     <figcaption>
            <h4>Cyborg Hawk Linux</h4>
        </figcaption>
</figure>

<h2 id="深入接触">深入接触</h2>
<p>真正的接触 Linux 是我买了个树莓派，其系统 Raspbian 基于 Debian，也是因为树莓派让我接触到了 mirrors(镜像)这一概念，看着 9M/s 的下载速度真舒服，后来尝试这在树莓派上面搭建 Wordpress，出于树莓派的性能有限便抛弃了桌面环境使用指令对系统进行操作，刚开始是用 Xshell 连接到树莓派的，后来因为重装了系统懒得下载了便直接使用了 Windows10 自带的 ssh(发现 ssh 真香)。之后又不满足在内网里面搭建博客又在腾讯云买了个云服务器(用的是 Ubuntu Server)而且还搞了备案(因为服务器续费太贵且用不到便退还了服务器并撤销了备案)，然后又折腾了很长时间的 Nginx 和 HTTPS，最后发现服务器带宽太低了就 1Mbps 访问速度非常慢就没搞了。服务器买了一年放在那也是闲着就尝试着搭建了 Minecraft 服务器、内网穿透等等东西。</p>
<figure>
     <figcaption>
            <h4>Raspbian</h4>
        </figcaption>
</figure>

<p>到此为止我学会了一些简单的指令，比如删除、复制、移动、新建文件夹、使用 nano 编辑文本等。</p>
<p>其实对 Linux 了解最为深入的还是买了笔记本然后在笔记本上装了个 Linux，刚开始装的是 Ubuntu 装了个 Geany 作为 C 语言学习环境，顺便装了个 JRE 用来玩我的世界。结果发现 Ubuntu 有 BUG，显卡驱动有问题，有时候还管不了机，正好看见这样一篇文章《人生苦短，我选 Manjaro》然后就尝试了一下 Manjaro，说实话真的方便安装驱动直接用<code>mhwd</code>指令就能完成。</p>
<figure>
     <figcaption>
            <h4>Manjaro</h4>
        </figcaption>
</figure>

<p>目前 Manjaro GNOME 是我日常使用的系统，装了 VSCode 还有一些其他 IDE，众所周知，Linux 没用 QQ，我用的是用 yay 装的 com.qq.tim.spark
虽然托盘独立了看起来有点难受，但是使用起来并没有什么大问题。</p>]]></description></item><item><title>iptables从入门到放弃</title><link>https://negoces.github.io/posts/16e870f5/</link><pubDate>Mon, 18 Jan 2021 17:29:57 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/16e870f5/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/16e870f5/cover.png" referrerpolicy="no-referrer">
            </div><p>iptables 是 Linux 系统上常用的命令行工具，主要用来配置防火墙。运用 iptables 我们能够实现流量的转发、拦截等操作</p>
<h2 id="iptables-是什么">iptables 是什么</h2>
<p>iptables 是运行在用户空间的应用软件，通过控制 Linux 内核 netfilter 模块，来管理网络数据包的处理和转发。在大部分 Linux 发行版中，可以通过手册页或<code>man iptables</code>获取用户手册。</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>netfilter是什么(摘自Wiki)<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Netfilter，在 Linux 内核中的一个软件框架，用于管理网络数据包。不仅具有网络地址转换（NAT）的功能，也具备数据包内容修改、以及数据包过滤等防火墙功能。利用运作于用户空间的应用软件，如 iptables、ebtables 和 arptables 等，来控制 Netfilter，系统管理者可以管理通过 Linux 操作系统的各种网络数据包。1990 年代，Netfilter 在 Linux 2.3.15 版时进入 Linux 内核，正式应用于 Linux 2.4 版。</div>
        </div>
    </div>
<p>简而言之就是 Netfilter 的上层程序，用户通过 iptables 指定规则，由 Netfilter 来执行，实现流量的拦截、转发等操作。</p>
<h2 id="iptables-的链chain">iptables 的链(chain)</h2>
<p>iptables 中有 5 个链，分别与 netfilter 中的 hook 对应</p>
<ul>
<li><code>PREROUTING</code> - 对应<code>NF_IP_PRE_ROUTING</code>,任何进入网络堆栈的流量都会触发此 hook。</li>
<li><code>INPUT</code> - 对应<code>NF_IP_LOCAL_IN</code>，如果数据包发送到本地系统，则在路由传入数据包之后，将触发此 hook。</li>
<li><code>FORWARD</code> - 对应<code>NF_IP_FORWARD</code>，如果该数据包转发到另一台主机，则在路由输入数据包之后将触发此 hook。</li>
<li><code>OUTPUT</code> - 对应<code>NF_IP_LOCAL_OUT</code>，由本地的出栈流量触发。</li>
<li><code>POSTROUTING</code> - 对应<code>NF_IP_POST_ROUTING</code>，任何传出的流量都将触发此 hook。</li>
</ul>
<p>数据包走向:</p>
<ul>
<li>目的地址为本机的传入流量: -&gt; <code>PREROUTING</code> -&gt; <code>INPUT</code></li>
<li>目的地址为其他主机的传入流量: -&gt; <code>PREROUTING</code> -&gt; <code>FORWARD</code> -&gt; <code>POSTROUTING</code> -&gt;</li>
<li>本机出站流量: <code>OUTPUT</code> -&gt; <code>POSTROUTING</code> -&gt;</li>
</ul>
<h2 id="iptables-的表tables">iptables 的表(tables)</h2>
<h3 id="filter-表">filter 表</h3>
<p>filter 表是默认的表，如果不指明表则使用此表。其通常用于过滤数据包。其中的内建链包括：</p>
<ul>
<li>INPUT,OUTPUT,FORWARD</li>
</ul>
<h3 id="nat-表">nat 表</h3>
<p>nat 表如其名，用于地址转换操作。其中的内建链包括：</p>
<ul>
<li>PREROUTING,POSTROUTING,OUTPUT</li>
</ul>
<h3 id="mangle-表">mangle 表</h3>
<p>mangle 表用于处理数据包。其和 nat 表的主要区别在于，nat 表侧重连接而 mangle 表侧重每一个数据包。其中内建链列表如下。</p>
<ul>
<li>PREROUTING,OUTPUT,FORWARD,INPUT,POSTROUTING</li>
</ul>
<h3 id="raw-表">raw 表</h3>
<p>raw 表用于处理异常，有如下两个内建链：</p>
<ul>
<li>PREROUTING,OUTPUT</li>
</ul>
<figure>
     <figcaption>
            <h4>流量流向</h4>
        </figcaption>
</figure>

<h2 id="iptables-的规则rules">iptables 的规则(rules)</h2>
<p>根据规则匹配条件来尝试匹配报文，一旦匹配成功，就由规则定义的处理动作做出处理。</p>
<h3 id="匹配条件">匹配条件</h3>
<p>基本匹配条件：源地址，目标地址，传输层协议<br>
扩展匹配条件：由扩展模块定义</p>
<h3 id="处理动作">处理动作</h3>
<p>基本处理动作：ACCEPT、DROP<br>
扩展处理动作：REJECT、RETURN、LOG、REDIRECT</p>
<h3 id="iptables的链内置链和自定义链">iptables的链：内置链和自定义链</h3>
<p>内置链：对应于hook functions<br>
自定义链接：用于内置链的扩展和补充，可实现更灵活的规则管理机制；自定义链可以设置完之后，添加到内置链中，方便管理</p>
<blockquote>
<p>待续&hellip; (iptables的命令操作)</p>
</blockquote>]]></description></item><item><title>使用curl测试API</title><link>https://negoces.github.io/posts/9058bdc8/</link><pubDate>Sat, 07 Nov 2020 12:33:57 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/9058bdc8/</guid><description><![CDATA[<div class="featured-image">
                <img src="/cover.png" referrerpolicy="no-referrer">
            </div><p>curl是从服务器传输数据或向服务器传输数据的工具，熟悉其用法后，完全可以取代 Postman 这一类的图形界面工具。</p>
<h2 id="常规用法">常规用法</h2>
<p>模拟浏览器向网站发送请求<code>curl &lt;URL&gt;</code>,比如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl <span class="s2">&#34;https://www.bilibili.com&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="参数解释">参数解释</h2>
<h3 id="-x-指定请求方法">-X 指定请求方法</h3>
<p>指定 HTTP 请求的方法。RESTful API的四种方法:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -X GET <span class="s2">&#34;https://example.com&#34;</span>
curl -X POST <span class="s2">&#34;https://example.com&#34;</span>
curl -X PUT <span class="s2">&#34;https://example.com&#34;</span>
curl -X DELETE <span class="s2">&#34;https://example.com&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="-a-指定ua">-A 指定UA</h3>
<p>指定UA（<code>User-Agent</code>）。curl 的默认用户代理字符串是（<code>curl/[version]</code>）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -A <span class="s1">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#39;</span> https://google.com
</code></pre></td></tr></table>
</div>
</div><p>也可以通过<code>-H</code>参数直接指定</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -H <span class="s1">&#39;User-Agent: php/1.0&#39;</span> https://google.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-b-发送cookies">-b 发送Cookies</h3>
<p>向服务器发送 Cookies。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -b <span class="s1">&#39;foo1=bar;foo2=bar2&#39;</span> https://google.com
</code></pre></td></tr></table>
</div>
</div><p>或者发送本地文件中的Cookies</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -b cookies.txt https://www.google.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-c-保存cookies">-c 保存Cookies</h3>
<p>将服务器设置的 Cookies 写入一个文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -c cookies.txt https://www.google.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-d-发送post数据体">-d 发送POST数据体</h3>
<p>用于发送 POST 请求的数据体。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -d<span class="s1">&#39;login=emma＆password=123&#39;</span> -X POST https://google.com/login
<span class="c1">#或者使用本地文件</span>
curl -d <span class="s1">&#39;@data.txt&#39;</span> https://google.com/login
</code></pre></td></tr></table>
</div>
</div><p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p>
<h3 id="-e-设置referer">-e 设置Referer</h3>
<p>设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -e <span class="s1">&#39;https://google.com?q=example&#39;</span> https://www.example.com
</code></pre></td></tr></table>
</div>
</div><p>可以通过<code>-H</code>参数直接添加标头<code>Referer</code>，达到同样效果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -H <span class="s1">&#39;Referer: https://google.com?q=example&#39;</span> https://www.example.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-f-上传文件">-F 上传文件</h3>
<p>向服务器上传二进制文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -F <span class="s1">&#39;file=@photo.png&#39;</span> https://google.com/profile
</code></pre></td></tr></table>
</div>
</div><p>指定 MIME 类型。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -F <span class="s1">&#39;file=@photo.png;type=image/png&#39;</span> https://google.com/profile
</code></pre></td></tr></table>
</div>
</div><h3 id="-h-指定http标头">-H 指定HTTP标头</h3>
<p>添加 HTTP 请求的标头。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -H <span class="s1">&#39;Accept-Language: en-US&#39;</span> -H <span class="s1">&#39;Secret-Message: xyzzy&#39;</span> https://google.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-i-打印http标头">-i 打印HTTP标头</h3>
<p>打印出服务器回应的 HTTP 标头。收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -i https://www.example.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-k-跳过ssl检测">-k 跳过SSL检测</h3>
<p>跳过 SSL 检测。不会检查服务器的 SSL 证书是否正确。</p>
<h3 id="-l-开启重定向">-L 开启重定向</h3>
<p>让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p>
<h3 id="-o-保存为文件">-o 保存为文件</h3>
<p>将服务器的回应保存成文件，等同于<code>wget</code>命令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -o example.html https://www.example.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-u-basic-auth认证">-u Basic Auth认证</h3>
<p>用来设置服务器认证的用户名和密码。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -u <span class="s1">&#39;bob:12345&#39;</span> https://google.com/login
<span class="c1">#或</span>
curl https://bob:12345@google.com/login
</code></pre></td></tr></table>
</div>
</div><h3 id="-x-设置代理">-x 设置代理</h3>
<p>指定 HTTP 请求的代理。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -x socks5://user:passwd@proxy.com:8080 https://www.example.com
</code></pre></td></tr></table>
</div>
</div><p>如果没有指定代理协议，默认为 HTTP。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -x user:passwd@proxy.com:8080 https://www.example.com
</code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>