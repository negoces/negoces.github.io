<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>学习日记 - 分类 - NEGOCES's Blog</title><link>https://negoces.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</link><description>学习日记 - 分类 - NEGOCES's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>negoces@163.com (NEGOCES)</managingEditor><webMaster>negoces@163.com (NEGOCES)</webMaster><lastBuildDate>Sun, 06 Jun 2021 15:45:47 +0800</lastBuildDate><atom:link href="https://negoces.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/" rel="self" type="application/rss+xml"/><item><title>树莓派安装Seafile文件服务</title><link>https://negoces.github.io/posts/37b9e15f/</link><pubDate>Sun, 06 Jun 2021 15:45:47 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/37b9e15f/</guid><description><![CDATA[<div class="details admonition danger open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-skull-crossbones fa-fw"></i>警告<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">此文章的部分内容仅适用于 <code>debian buster arm64</code> 系统，对于其他系统仅做参考，不保证能够正常运行</div>
        </div>
    </div>
<h2 id="安装-mariadb-数据库">安装 MariaDB 数据库</h2>
<p><code>若已使用 Docker 安装过 MariaDB 且可用，可忽略此步骤</code></p>
<p>安装 MariaDB 并设置自启</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt install mariadb-server mariadb-client -y
sudo systemctl <span class="nb">enable</span> --now mariadb
</code></pre></td></tr></table>
</div>
</div><p>用 <code>root</code> 权限进入数据库开启密码登录:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">USE</span> <span class="n">mysql</span><span class="p">;</span> <span class="cm">/* 进入 mysql 库 */</span>
<span class="k">ALTER</span> <span class="k">USER</span> <span class="o">`</span><span class="n">root</span><span class="o">`@`</span><span class="n">localhost</span><span class="o">`</span> <span class="n">IDENTIFIED</span> <span class="k">WITH</span> <span class="n">mysql_native_password</span><span class="p">;</span> <span class="cm">/* 使用MySQL原生验证 */</span>
<span class="k">ALTER</span> <span class="k">USER</span> <span class="o">`</span><span class="n">root</span><span class="o">`@`</span><span class="n">localhost</span><span class="o">`</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="s1">&#39;$PASSWORD&#39;</span><span class="p">;</span> <span class="cm">/* 设置登录密码为 $PASSWORD */</span>
<span class="n">FLUSH</span> <span class="k">privileges</span><span class="p">;</span> <span class="cm">/* 刷新权限 */</span>
</code></pre></td></tr></table>
</div>
</div><p>可使用以下指令测试连接:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mysql -u root -p
</code></pre></td></tr></table>
</div>
</div><div class="details admonition tip">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>为什么在其他计算机上无法登入数据库<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>MariaDB 默认监听 <code>127.0.0.1</code> 即:仅本机可登入数据库,如有需求前往 <code>/etc/mysql/mariadb.conf.d/50-server.cnf</code> 文件修改 <code>bind-address = 0.0.0.0</code> 后重启服务,并登入入数据库通过以下 SQL 语句开启 root 的任意域登录:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="n">USE</span> <span class="n">mysql</span><span class="p">;</span> <span class="cm">/* 进入 mysql 库 */</span>
<span class="k">CREATE</span> <span class="k">USER</span> <span class="o">`</span><span class="n">root</span><span class="o">`@`%`</span> <span class="n">IDENTIFIED</span> <span class="k">WITH</span> <span class="n">mysql_native_password</span><span class="p">;</span> <span class="cm">/* 使用MySQL原生验证 */</span>
<span class="k">CREATE</span> <span class="k">USER</span> <span class="o">`</span><span class="n">root</span><span class="o">`@`%`</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="s1">&#39;$PASSWORD&#39;</span><span class="p">;</span> <span class="cm">/* 设置登录密码为 $PASSWORD */</span>
<span class="n">FLUSH</span> <span class="k">privileges</span><span class="p">;</span> <span class="cm">/* 刷新权限 */</span>
</code></pre></td></tr></table>
</div>
</div><p>若在 <code>CREATE</code> 过程中出现 <code>ERROR 1396 (HY000)</code> 错误，则表明该条目已存在，将 <code>CREATE</code> 替换成 <code>ALTER</code> 执行即可。</p>
</div>
        </div>
    </div>
<h2 id="安装-seafile">安装 Seafile</h2>
<h3 id="安装依赖">安装依赖</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt install python3 python3-setuptools python3-pip libmemcached-dev python3-mysqldb -y
pip config <span class="nb">set</span> global.index-url https://mirrors.sjtug.sjtu.edu.cn/pypi/web/simple
sudo pip config <span class="nb">set</span> global.index-url https://mirrors.sjtug.sjtu.edu.cn/pypi/web/simple
sudo pip3 install Pillow pylibmc captcha jinja2 <span class="nv">sqlalchemy</span><span class="o">==</span>1.4.3 django-pylibmc django-simple-captcha python3-ldap pymysql
</code></pre></td></tr></table>
</div>
</div><h3 id="创建-seafile-用户">创建 Seafile 用户</h3>
<p><code>非必选，但不进行此操作可能会导致后续的步骤需要改动</code></p>
<p>对 Seafile 服务进行用户隔离，保障数据安全，防止误操作或其他用户恶意删除。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo useradd -MUr seafile
</code></pre></td></tr></table>
</div>
</div><h3 id="下载-seafile">下载 Seafile</h3>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>关于32位(armhf,armv7)系统用户<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">32 位系统用户请下载<code>8.0.5-armv7</code>版本: <a href="https://ghproxy.com/github.com/haiwen/seafile-rpi/releases/download/v8.0.5/seafile-server-8.0.5-buster-armv7.tar.gz" target="_blank" rel="noopener noreffer">seafile-server-8.0.5-buster-armv7.tar.gz</a></div>
        </div>
    </div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 从 Github 下载 seafile-8.0.3-arm64 (链接包含加速，国内用户可直接下载)</span>
wget https://ghproxy.com/github.com/haiwen/seafile-rpi/releases/download/v8.0.3/seafile-server-8.0.3-buster-arm64v8.tar.gz
<span class="c1"># 解压 seafile-server-8.0.3-buster-arm64v8.tar.gz</span>
tar -xzf seafile-server-8.0.3-buster-arm64v8.tar.gz
<span class="c1"># 在 /opt 目录创建 seafile 文件夹</span>
sudo mkdir /opt/seafile
<span class="c1"># 将 seafile-server-8.0.3 移动到 /opt/seafile</span>
sudo mv seafile-server-8.0.3 /opt/seafile
<span class="c1"># 设置 /opt/seafile 属主及权限</span>
sudo chown -R seafile:seafile /opt/seafile/
sudo chmod -R <span class="m">755</span> /opt/seafile/
</code></pre></td></tr></table>
</div>
</div><h3 id="配置-seafile">配置 Seafile</h3>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>关于执行权限问题<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>由于树莓派默认用户为 <code>pi</code> 而 seafile 文件属主为 <code>seafile</code> ，我们无法直接执行 seafile 文件里面的<code>设置</code>、<code>启动</code>等脚本，解决方法:</p>
<ol>
<li>
<p>切换用户</p>
<p>使用 <code>su</code> 指令切换当前用户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo su seafile
</code></pre></td></tr></table>
</div>
</div><p>当终端以 <code>seafile@raspberrypi</code> 打头时，则表明切换成功，此时的所有操作均由 <code>seafile</code> 执行。</p>
</li>
<li>
<p>使用 <code>sudo -u seafile &lt;脚本&gt;</code> 来执行脚本</p>
<p>此时将会使用 seafile 执行这个脚本，而不影响其他指令。</p>
</li>
</ol>
<p>以下步骤将使用第二种方式。</p>
</div>
        </div>
    </div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /opt/seafile/seafile-server-8.0.3 <span class="c1"># 进入 seafile 目录</span>
sudo -u seafile ./setup-seafile-mysql.sh <span class="c1"># 运行配置脚本</span>
</code></pre></td></tr></table>
</div>
</div><p>按照提示进行配置，出现以下信息则表明配置成功。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">-----------------------------------------------------------------
Your seafile server configuration has been finished successfully.
-----------------------------------------------------------------

run seafile server:     ./seafile.sh <span class="o">{</span> start <span class="p">|</span> stop <span class="p">|</span> restart <span class="o">}</span>
run seahub  server:     ./seahub.sh  <span class="o">{</span> start &lt;port&gt; <span class="p">|</span> stop <span class="p">|</span> restart &lt;port&gt; <span class="o">}</span>

-----------------------------------------------------------------
If you are behind a firewall, remember to allow input/output of these tcp ports:
-----------------------------------------------------------------

port of seafile fileserver:   <span class="m">8082</span>
port of seahub:               <span class="m">8000</span>

When problems occur, Refer to

        https://download.seafile.com/published/seafile-manual/home.md

<span class="k">for</span> information.
</code></pre></td></tr></table>
</div>
</div><h3 id="启动-seafile">启动 Seafile</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo -u seafile ./seafile.sh start <span class="c1"># 一般seafile都能正常启动，除非有其他程序占用端口</span>
sudo -u seafile ./seahub.sh start <span class="c1"># 首次启动需要按照提示配置管理员账户II</span>
</code></pre></td></tr></table>
</div>
</div><p>若 Seahub 无法启动，请参考<a href="#%E5%85%B3%E4%BA%8E-seahub-%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98" rel="">关于 seahub 无法启动</a></p>
<h3 id="测试-seahub">测试 Seahub</h3>
<p>打开<code>/opt/seafile/conf/gunicorn.conf.py</code><br>
修改<code>bind = &quot;127.0.0.1:8000&quot;</code>为<code>bind = &quot;0.0.0.0:8000&quot;</code><br>
执行<code>sudo -u seafile ./seahub.sh restart</code>重启 seahub<br>
浏览器打开<code>http://&lt;IP&gt;:8000/</code>查看服务是否正常</p>
<p>若要使用反向代理，将<code>gunicorn.conf.py</code>改回原配置，重启 seahub，继续<a href="#%E9%85%8D%E7%BD%AE-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86" rel="">下列步骤</a></p>
<h3 id="设置-seafile-开机自启">设置 Seafile 开机自启</h3>
<p>创建并编辑<code>/etc/systemd/system/seafile.service</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>Unit<span class="o">]</span>
<span class="nv">Description</span><span class="o">=</span>Seafile
<span class="nv">After</span><span class="o">=</span>network.target mysql.service

<span class="o">[</span>Service<span class="o">]</span>
<span class="nv">Type</span><span class="o">=</span>oneshot
<span class="nv">ExecStart</span><span class="o">=</span>/opt/seafile/seafile-server-latest/seafile.sh start
<span class="nv">ExecStop</span><span class="o">=</span>/opt/seafile/seafile-server-latest/seafile.sh stop
<span class="nv">RemainAfterExit</span><span class="o">=</span>yes
<span class="nv">User</span><span class="o">=</span>seafile
<span class="nv">Group</span><span class="o">=</span>seafile

<span class="o">[</span>Install<span class="o">]</span>
<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></td></tr></table>
</div>
</div><p>创建并编辑<code>/etc/systemd/system/seahub.service</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>Unit<span class="o">]</span>
<span class="nv">Description</span><span class="o">=</span>Seafile hub
<span class="nv">After</span><span class="o">=</span>network.target seafile.service

<span class="o">[</span>Service<span class="o">]</span>
<span class="nv">ExecStart</span><span class="o">=</span>/opt/seafile/seafile-server-latest/seahub.sh start
<span class="nv">ExecStop</span><span class="o">=</span>/opt/seafile/seafile-server-latest/seahub.sh stop
<span class="nv">User</span><span class="o">=</span>seafile
<span class="nv">Group</span><span class="o">=</span>seafile
<span class="nv">Type</span><span class="o">=</span>oneshot
<span class="nv">RemainAfterExit</span><span class="o">=</span>yes

<span class="o">[</span>Install<span class="o">]</span>
<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></td></tr></table>
</div>
</div><p>设置开机自启</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo systemctl <span class="nb">enable</span> seafile
sudo systemctl <span class="nb">enable</span> seahub
</code></pre></td></tr></table>
</div>
</div><h2 id="配置-nginx-反向代理">配置 Nginx 反向代理</h2>
<h3 id="安装-nginx">安装 Nginx</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt install nginx -y
sudo systemctl <span class="nb">enable</span> --now nginx
</code></pre></td></tr></table>
</div>
</div><h3 id="准备证书及相关文件">准备证书及相关文件</h3>
<ol>
<li>
<p>前往自己的域名服务商或 Let&rsquo;s Encrypt 申请证书</p>
</li>
<li>
<p>使用下列指令下载 dhparam</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl https://ssl-config.mozilla.org/ffdhe2048.txt &gt; ./dhparam
sudo mv ./dhparam /var/www/
</code></pre></td></tr></table>
</div>
</div><h3 id="配置-nginx-并重启">配置 Nginx 并重启</h3>
<p>修改<code>/etc/nginx/sites-available/default</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">server {
    listen 80 default_server;
    listen [::]:80 default_server;
    location / {
        return 301 https://$host$request_uri;
    }
}
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name _; # 域名
    ssl_certificate /path/to/signed_cert_plus_intermediates; # 证书crt
    ssl_certificate_key /path/to/private_key; # 证书key
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;
    ssl_session_tickets off;
    ssl_dhparam /var/www/dhparam;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers on;
    add_header Strict-Transport-Security &#34;max-age=63072000&#34; always;

    proxy_set_header X-Forwarded-For $remote_addr;
    location / {
         proxy_pass         http://127.0.0.1:8000;
         proxy_set_header   Host $host;
         proxy_set_header   X-Real-IP $remote_addr;
         proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header   X-Forwarded-Host $server_name;
         proxy_read_timeout  1200s;
         client_max_body_size 0;

         access_log      /var/log/nginx/seahub.access.log;
         error_log       /var/log/nginx/seahub.error.log;
    }
    location /seafhttp {
        rewrite ^/seafhttp(.*)$ $1 break;
        proxy_pass http://127.0.0.1:8082;
        client_max_body_size 0;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_connect_timeout  36000s;
        proxy_read_timeout  36000s;
        proxy_send_timeout  36000s;
        send_timeout  36000s;
    }
    location /media {
        root /home/user/haiwen/seafile-server-latest/seahub; # seafile位置
    }
}
</code></pre></td></tr></table>
</div>
</div><p>以上配置包含了 TLS(https)设置，请在<code>第11行</code>填入自己的域名，例如: <code>server_name mycloud.com;</code>，在<code>第12、13行</code>填入自己的证书路径。<br>
若不需要启用 https 设置，请直接将<code>第4行</code>至<code>第22行</code>删除。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo nginx -t <span class="c1"># 检查配置是否有错误</span>
sudo systemctl restart nginx <span class="c1"># 重启Nginx</span>
</code></pre></td></tr></table>
</div>
</div><p>访问域名查看页面是否正常加载</p>
<h2 id="调整-openssl-ciphers-顺序优化-tls-性能">调整 openssl ciphers 顺序优化 TLS 性能</h2>
<p>TLSv1.2 的 ciphers 顺序可以在 Nginx 里面通过<code>ssl_ciphers</code>和<code>ssl_prefer_server_ciphers</code>进行设置，对于 TLSv1.3 Nginx 会从 OpenSSL 读取顺序，
但是！OpenSSL 的默认顺序是<code>TLS_AES_256_GCM_SHA384</code>、<code>TLS_CHACHA20_POLY1305_SHA256</code>、<code>TLS_AES_128_GCM_SHA256</code>，对于普通的服务器来说，这三种协议都能跑到 100M/s 以上，基本没什么区别，但是对于树莓派则不一样，因为树莓派鸡肋的性能且没有 AES 硬件加速，它在使用 AES256-GCM 作为加密方式时只能达到 20M/s 的速度，POLY1305 则可以稳定在 100M/s 以上。所以，我们要设置优先 ciphers 来提传输速度。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 查看配置文件所在位置</span>
openssl version -a <span class="p">|</span> grep OPENSSLDIR
</code></pre></td></tr></table>
</div>
</div><p>修改刚刚获得的目录下的<code>openssl.cnf</code>，在随后追加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ini" data-lang="ini"><span class="na">openssl_conf</span> <span class="o">=</span> <span class="s">default_conf</span>

<span class="k">[default_conf]</span>
<span class="na">ssl_conf</span> <span class="o">=</span> <span class="s">ssl_sect</span>

<span class="k">[ssl_sect]</span>
<span class="na">system_default</span> <span class="o">=</span> <span class="s">system_default_sect</span>

<span class="k">[system_default_sect]</span>
<span class="na">MinProtocol</span> <span class="o">=</span> <span class="s">TLSv1.2</span>
<span class="na">Ciphersuites</span> <span class="o">=</span> <span class="s">TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256</span>
<span class="na">CipherString</span> <span class="o">=</span> <span class="s">DEFAULT@SECLEVEL=2</span>
</code></pre></td></tr></table>
</div>
</div><p>验证</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">openssl ciphers -s -tls1_3
</code></pre></td></tr></table>
</div>
</div><p>重启 Nginx 生效</p>
<h2 id="安装-memcached">安装 Memcached</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt install memcached libmemcached-dev -y
sudo systemctl <span class="nb">enable</span> --now memcached
</code></pre></td></tr></table>
</div>
</div><p>修改<code>/opt/seafile/conf/seahub_settings.py</code>文件，追加以下代码:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-py" data-lang="py"><span class="n">CACHES</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">&#39;BACKEND&#39;</span><span class="p">:</span> <span class="s1">&#39;django_pylibmc.memcached.PyLibMCCache&#39;</span><span class="p">,</span>
        <span class="s1">&#39;LOCATION&#39;</span><span class="p">:</span> <span class="s1">&#39;127.0.0.1:11211&#39;</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="s1">&#39;locmem&#39;</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">&#39;BACKEND&#39;</span><span class="p">:</span> <span class="s1">&#39;django.core.cache.backends.locmem.LocMemCache&#39;</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}</span>
<span class="n">COMPRESS_CACHE_BACKEND</span> <span class="o">=</span> <span class="s1">&#39;locmem&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>重启 seahub 生效</p>
<h2 id="关于-seahub-无法启动的问题">关于 seahub 无法启动的问题</h2>
<h3 id="如何-debug">如何 Debug</h3>
<p>修改<code>/opt/seafile/conf/gunicorn.conf.py</code>文件<br>
找到<code>daemon = True</code>，将其改为<code>daemon = False</code><br>
再次运行<code>./seahub.sh start</code>以查看错误，使用<code>Ctrl</code>+<code>C</code>组合键结束进程</p>
<p><code>注: 记得 Debug 之后将其改回来</code>
<code>注: 部分错误无法使用 start-fastcgi 来 Debug</code></p>
<h3 id="错误-nameerror-name-_mysql-is-not-defined">错误: <code>NameError: name '_mysql' is not defined</code></h3>
<ul>
<li>原因: <code>MySQLdb</code>为 Python2 的模块，在 Python3 上无法运行</li>
<li>解决方法: 用<code>pymysql</code>替代<code>MySQLdb</code></li>
<li>具体操作: 安装 python 模块<code>pymysql</code>，并将以下代码添加入<code>/opt/seafile/seafile-server-latest/seahub/seahub/__init__.py</code>文件
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pymysql</span>
<span class="n">pymysql</span><span class="o">.</span><span class="n">install_as_MySQLdb</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="错误-modulenotfounderror-no-module-named-image">错误: <code>ModuleNotFoundError: No module named 'Image'</code></h3>
<ul>
<li>原因: seafile 内预装的 PIL 和 Pillow 有问题</li>
<li>解决方法: 对<code>Pillow</code>进行更新</li>
<li>具体操作: 使用以下指令
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="o">-</span><span class="n">U</span> <span class="n">Pillow</span> <span class="o">-</span><span class="n">t</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">seafile</span><span class="o">/</span><span class="n">seafile</span><span class="o">-</span><span class="n">server</span><span class="o">-</span><span class="n">latest</span><span class="o">/</span><span class="n">seahub</span><span class="o">/</span><span class="n">thirdpart</span>
<span class="c1"># 若下载缓慢请使用镜像加速</span>
<span class="n">pip3</span> <span class="n">install</span> <span class="o">-</span><span class="n">U</span> <span class="n">Pillow</span> <span class="o">-</span><span class="n">t</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">seafile</span><span class="o">/</span><span class="n">seafile</span><span class="o">-</span><span class="n">server</span><span class="o">-</span><span class="n">latest</span><span class="o">/</span><span class="n">seahub</span><span class="o">/</span><span class="n">thirdpart</span> <span class="o">-</span><span class="n">i</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">mirrors</span><span class="o">.</span><span class="n">sjtug</span><span class="o">.</span><span class="n">sjtu</span><span class="o">.</span><span class="n">edu</span><span class="o">.</span><span class="n">cn</span><span class="o">/</span><span class="n">pypi</span><span class="o">/</span><span class="n">web</span><span class="o">/</span><span class="n">simple</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="错误-modulenotfounderror-no-module-named-xxx">错误: <code>ModuleNotFoundError: No module named 'XXX'</code></h3>
<ul>
<li>原因: <code>XXX</code> 模块缺失或文件权限问题</li>
<li>解决方法: 使用 pip 安装或参考<a href="#%E6%8C%87%E4%BB%A4%E6%9C%AA%E6%89%BE%E5%88%B0%E5%8F%8A%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98" rel="">下一条</a></li>
</ul>
<h3 id="指令未找到及其他问题">指令未找到及其他问题</h3>
<ul>
<li>原因: seafile 文件权限问题</li>
<li>解决方法: 设置 seafile 文件权限</li>
<li>具体操作: 使用以下指令
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">sudo</span> <span class="n">chown</span> <span class="o">-</span><span class="n">R</span> <span class="n">seafile</span><span class="p">:</span><span class="n">seafile</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">seafile</span><span class="o">/</span>
<span class="n">sudo</span> <span class="n">chmod</span> <span class="o">-</span><span class="n">R</span> <span class="mi">755</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">seafile</span><span class="o">/</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="参考-issues">参考 Issues</h2>
<ul>
<li><a href="https://github.com/haiwen/seafile-rpi/issues/80">https://github.com/haiwen/seafile-rpi/issues/80</a></li>
<li><a href="https://github.com/haiwen/seafile-rpi/issues/65">https://github.com/haiwen/seafile-rpi/issues/65</a></li>
<li><a href="https://github.com/openssl/openssl/issues/7562">https://github.com/openssl/openssl/issues/7562</a></li>
</ul>
]]></description></item><item><title>Kubernetes 学习日记(未完成)</title><link>https://negoces.github.io/posts/baaa9162/</link><pubDate>Sat, 20 Mar 2021 22:59:49 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/baaa9162/</guid><description><![CDATA[<p>Kubernetes 是用于自动部署，扩展和管理容器化应用程序的开源系统。</p>
<div class="details admonition danger open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-skull-crossbones fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">当前处于草稿状态，且目前仅到安装 kubeadm 可以，创建集群暂未测试</div>
        </div>
    </div>
<div class="details admonition note">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>文章更新时间轴<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>2021/03/20 文章创建</li>
</ul>
</div>
        </div>
    </div>
<h2 id="引言">引言</h2>
<p>随着微服务、分布式的流行，容器化也逐渐流行起来，Kubernetes 也逐渐成为了一项技能，我便在课余时间抽时间来学习了一下。</p>
<p>Kubernetes 是一个容器编排工具，学习它肯定需要一个集群，但毕竟是学习，肯定没那么的资源来使用，我便使用虚拟机模拟了一个集群来进行学习。</p>
<h2 id="用虚拟机创建集群">用虚拟机创建集群</h2>
<p>考虑到 Kubernetes 的系统要求，我打算用 Fedora Server 作为虚拟机的系统，至于虚拟软件则因人而异了，有的人喜欢用 VM，我使用的是 KVM。</p>
<div class="details admonition tip">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Kubernetes 支持的系统<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>Ubuntu 16.04+</li>
<li>Debian 9+</li>
<li>CentOS 7+</li>
<li>Red Hat Enterprise Linux (RHEL) 7+</li>
<li>Fedora 25+</li>
<li>HypriotOS v1.0.1+</li>
<li>Flatcar Container Linux （使用 2512.3.0 版本测试通过）</li>
</ul>
</div>
        </div>
    </div>
<ol>
<li>前往 <a href="https://mirrors.aliyun.com/fedora/releases/33/Server/x86_64/iso/" target="_blank" rel="noopener noreffer">Aliyun</a> 下载<code>Fedora-*.iso</code>文件。</li>
<li>下载完毕后创建虚拟机，因为 k8s 的要求我们分配的虚拟机至少需要 <code>2 核 和 2G RAM</code>。</li>
<li>启动虚拟机，根据提示安装。</li>
<li>安装完毕后使用<code>reboot</code>重启，此时<code>iso</code>文件已经可以移除了。</li>
</ol>
<p>使用以上步骤创建至少两个虚拟机。</p>
<h2 id="安装-kubeadm-及其他组件">安装 kubeadm 及其他组件</h2>
<h3 id="每个节点上-mac-地址和-product_uuid-的唯一性">每个节点上 MAC 地址和 product_uuid 的唯一性</h3>
<p>Kubernetes 使用这些值来唯一确定集群中的节点。 如果这些值在每个节点上不唯一，可能会导致安装失败。</p>
<ul>
<li>你可以使用命令 <code>ip link</code> 或 <code>ifconfig -a</code> 来获取网络接口的 MAC 地址</li>
<li>可以使用 <code>sudo cat /sys/class/dmi/id/product_uuid</code> 命令对 product_uuid 校验</li>
</ul>
<h3 id="允许-iptables-检查桥接流量">允许 iptables 检查桥接流量</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo modprobe br_netfilter
cat <span class="s">&lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf
</span><span class="s">br_netfilter
</span><span class="s">EOF</span>

cat <span class="s">&lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
</span><span class="s">net.bridge.bridge-nf-call-ip6tables = 1
</span><span class="s">net.bridge.bridge-nf-call-iptables = 1
</span><span class="s">EOF</span>
sudo sysctl --system
</code></pre></td></tr></table>
</div>
</div><div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>放行端口<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>如果你用的是云服务器请确保以下端口已被放行</p>
<ul>
<li>控制平面节点: <code>6443</code>,<code>2379-2380</code>,<code>10250</code>,<code>10251</code>,<code>10252</code></li>
<li>工作节点: <code>10250</code>,<code>30000-32767</code></li>
</ul>
<p>端口的具体作用请查阅<a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports" target="_blank" rel="noopener noreffer">官网</a></p>
</div>
        </div>
    </div>
<h3 id="设置系统镜像">设置系统镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo rm -f /etc/yum.repos.d/*

<span class="nb">echo</span> <span class="s1">&#39;[fedora]
</span><span class="s1">name=Fedora $releasever - $basearch
</span><span class="s1">failovermethod=priority
</span><span class="s1">baseurl=https://mirrors.aliyun.com/fedora/releases/$releasever/Everything/$basearch/os/
</span><span class="s1">metadata_expire=28d
</span><span class="s1">gpgcheck=1
</span><span class="s1">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch
</span><span class="s1">skip_if_unavailable=False&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/yum.repos.d/fedora.repo &gt; /dev/null

<span class="nb">echo</span> <span class="s1">&#39;[updates]
</span><span class="s1">name=Fedora $releasever - $basearch - Updates
</span><span class="s1">failovermethod=priority
</span><span class="s1">baseurl=https://mirrors.aliyun.com/fedora/updates/$releasever/Everything/$basearch/
</span><span class="s1">enabled=1
</span><span class="s1">gpgcheck=1
</span><span class="s1">metadata_expire=6h
</span><span class="s1">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch
</span><span class="s1">skip_if_unavailable=False&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/yum.repos.d/fedora-updates.repo &gt; /dev/null

<span class="nb">echo</span> <span class="s1">&#39;[fedora-modular]
</span><span class="s1">name=Fedora Modular $releasever - $basearch
</span><span class="s1">failovermethod=priority
</span><span class="s1">baseurl=https://mirrors.aliyun.com/fedora/releases/$releasever/Modular/$basearch/os/
</span><span class="s1">enabled=1
</span><span class="s1">metadata_expire=7d
</span><span class="s1">gpgcheck=1
</span><span class="s1">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch
</span><span class="s1">skip_if_unavailable=False&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/yum.repos.d/fedora-modular.repo &gt; /dev/null

<span class="nb">echo</span> <span class="s1">&#39;[updates-modular]
</span><span class="s1">name=Fedora Modular $releasever - $basearch - Updates
</span><span class="s1">failovermethod=priority
</span><span class="s1">baseurl=https://mirrors.aliyun.com/fedora/updates/$releasever/Modular/$basearch/
</span><span class="s1">enabled=1
</span><span class="s1">gpgcheck=1
</span><span class="s1">metadata_expire=6h
</span><span class="s1">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch
</span><span class="s1">skip_if_unavailable=False&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/yum.repos.d/fedora-updates-modular.repo &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>系统更新: <code>sudo dnf update</code></p>
<h3 id="安装-docker">安装 Docker</h3>
<p>添加 mirrors</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo dnf -y install dnf-plugins-core
sudo dnf config-manager --add-repo <span class="se">\
</span><span class="se"></span>https://mirrors.aliyun.com/docker-ce/linux/fedora/docker-ce.repo
</code></pre></td></tr></table>
</div>
</div><p>安装 Docker</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo dnf install docker-ce docker-ce-cli containerd.io
</code></pre></td></tr></table>
</div>
</div><p>赋予账户可直接操作 Docker 的权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo usermod -aG docker <span class="nv">$USER</span>
newgrp docker
</code></pre></td></tr></table>
</div>
</div><p>添加 Docker 仓库加速</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="se">\
</span><span class="se"></span><span class="s1">&#39;{
</span><span class="s1">    &#34;exec-opts&#34;: [
</span><span class="s1">        &#34;native.cgroupdriver=systemd&#34;
</span><span class="s1">    ],
</span><span class="s1">    &#34;log-driver&#34;: &#34;json-file&#34;,
</span><span class="s1">    &#34;log-opts&#34;: {
</span><span class="s1">        &#34;max-size&#34;: &#34;100m&#34;
</span><span class="s1">    },
</span><span class="s1">    &#34;storage-driver&#34;: &#34;overlay2&#34;,
</span><span class="s1">    &#34;registry-mirrors&#34;: [
</span><span class="s1">        &#34;https://docker.mirrors.sjtug.sjtu.edu.cn&#34;
</span><span class="s1">    ]
</span><span class="s1">}&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/docker/daemon.json &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>启动 Docker 并设置自启</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo systemctl start docker
sudo systemctl <span class="nb">enable</span> docker
</code></pre></td></tr></table>
</div>
</div><h3 id="安装-kubeadm">安装 kubeadm</h3>
<p>添加 mirror</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
</span><span class="s">[kubernetes]
</span><span class="s">name=kubernetes
</span><span class="s">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
</span><span class="s">enabled=1
</span><span class="s">gpgcheck=1
</span><span class="s">repo_gpgcheck=1
</span><span class="s">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
</span><span class="s">exclude=kubelet kubeadm kubectl
</span><span class="s">EOF</span>
</code></pre></td></tr></table>
</div>
</div><p>禁用 SELinux</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">setenforce <span class="m">0</span>
sed -i <span class="s1">&#39;s/^SELINUX=enforcing$/SELINUX=permissive/&#39;</span> /etc/selinux/config
</code></pre></td></tr></table>
</div>
</div><p>安装并启动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo dnf install -y kubelet kubeadm kubectl --disableexcludes<span class="o">=</span>kubernetes

systemctl <span class="nb">enable</span> --now kubelet
</code></pre></td></tr></table>
</div>
</div><h2 id="使用-kubeadm-创建集群">使用 kubeadm 创建集群</h2>
<p>关闭防火墙</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">systemctl stop firewalld
systemctl disable firewalld
</code></pre></td></tr></table>
</div>
</div><p>关闭 swap</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">swapoff -a
sed -ri <span class="s1">&#39;s/.*swap.*/#&amp;/&#39;</span> /etc/fstab
</code></pre></td></tr></table>
</div>
</div><p>提前拉取所需镜像(因版本而异)，可用<code>kubeadm config images list</code>查看</p>
<blockquote>
<p>将<code>k8s.gcr.io</code>换成<code>registry.aliyuncs.com/google_containers/</code></p>
</blockquote>
<blockquote>
<p>也可修改配置实现加速<br>
<code>kubeadm config print-defaults --api-objects ClusterConfiguration &gt; kubeadm.conf</code>生成配置<br>
修改<code>kubernetesVersion:</code>为当前版本<br>
修改<code>imageRepository:</code>为<code>registry.aliyuncs.com/google_containers</code></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker pull registry.aliyuncs.com/google_containers/kube-apiserver:v1.20.5
docker pull registry.aliyuncs.com/google_containers/kube-controller-manager:v1.20.5
docker pull registry.aliyuncs.com/google_containers/kube-scheduler:v1.20.5
docker pull registry.aliyuncs.com/google_containers/kube-proxy:v1.20.5
docker pull registry.aliyuncs.com/google_containers/pause:3.2
docker pull registry.aliyuncs.com/google_containers/etcd:3.4.13-0
docker pull registry.aliyuncs.com/google_containers/coredns:1.7.0

docker tag registry.aliyuncs.com/google_containers/kube-apiserver:v1.20.5 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/kube-apiserver:v1.20.5
docker tag registry.aliyuncs.com/google_containers/kube-controller-manager:v1.20.5 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/kube-controller-manager:v1.20.5
docker tag registry.aliyuncs.com/google_containers/kube-scheduler:v1.20.5 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/kube-scheduler:v1.20.5
docker tag registry.aliyuncs.com/google_containers/kube-proxy:v1.20.5 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/kube-proxy:v1.20.5
docker tag registry.aliyuncs.com/google_containers/pause:3.2 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/pause:3.2
docker tag registry.aliyuncs.com/google_containers/etcd:3.4.13-0 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/etcd:3.4.13-0
docker tag registry.aliyuncs.com/google_containers/coredns:1.7.0 <span class="se">\
</span><span class="se"></span>k8s.gcr.io/coredns:1.7.0
</code></pre></td></tr></table>
</div>
</div><p>初始化</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">kubeadm init
<span class="c1"># 或</span>
kubeadm init --ignore-preflight-errors<span class="o">=</span>Swap
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>在Linux上安装cifsd启用SMB共享</title><link>https://negoces.github.io/posts/4ab61985/</link><pubDate>Wed, 17 Mar 2021 19:14:22 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/4ab61985/</guid><description><![CDATA[<p>用树莓派做了一个网络存储，想挂载到系统上，便想到了 SMB 协议，之前用过 Samba 但是性能实属不行，恰巧在 Github 上看到了 cifsd 这个项目，并且支持 RDMA 所以在树莓派上面安装试试，结果发现效果还不错，速度蛮快的。</p>
<h2 id="安装必要的依赖">安装必要的依赖</h2>
<p>Github 上只有源码，没有现成的二进制文件，软件仓库里面也没有，所以必须自己编译(其实并不意外，这个程序是作为内核模块运行的，所以才有如此之高的性能)。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt update
sudo apt install linux-headers gcc make git autoconf <span class="se">\
</span><span class="se"></span>libtool pkg-config libnl-3-dev libnl-genl-3-dev libglib2.0-dev -y
</code></pre></td></tr></table>
</div>
</div><h2 id="编译安装-cifsd">编译安装 cifsd</h2>
<p>克隆并进入目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> ~
git clone https://github.com.cnpmjs.org/cifsd-team/cifsd.git
<span class="nb">cd</span> cifsd
</code></pre></td></tr></table>
</div>
</div><p>编译并安装，如果出现问题。。。我相信你百度能力一直可以。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">make                <span class="c1"># 编译</span>
sudo make install   <span class="c1"># 安装</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="编译安装-ksmbd-tools">编译安装 ksmbd-tools</h2>
<p>克隆并进入目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> ~
git clone https://github.com.cnpmjs.org/cifsd-team/cifsd-tools.git
<span class="nb">cd</span> ksmbd-tools
</code></pre></td></tr></table>
</div>
</div><p>编译并安装，如果出现问题。。。我相信你百度能力一直可以。(悄悄告诉你，其实这一步最容易出错)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">./autogen.sh
./configure
make
sudo make install
</code></pre></td></tr></table>
</div>
</div><h2 id="加载模块并设置开机自动加载">加载模块并设置开机自动加载</h2>
<p>加载模块，并编辑<code>/etc/modules-load.d/ksmbd.conf</code>文件以设置开机自动加载。。。算了，怕你不会，直接运行下面的指令吧</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo modprobe ksmbd
<span class="nb">echo</span> <span class="s1">&#39;ksmbd&#39;</span> <span class="p">|</span> sudo tee /etc/modules-load.d/ksmbd.conf &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>用<code>lsmod | grep ksmbd</code>查看模块是否被加载</p>
<h2 id="创建并编辑配置">创建并编辑配置</h2>
<p>先创建配置文件夹</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo mkdir /etc/ksmbd/
</code></pre></td></tr></table>
</div>
</div><h3 id="创建用户">创建用户</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># $USER 换成你想用的用户名</span>
sudo ksmbd.adduser -a <span class="nv">$USER</span>
<span class="c1"># 输密码，回车，再输一遍，回车</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="创建共享">创建共享</h3>
<p>参考<a href="https://github.com/cifsd-team/ksmbd-tools/blob/master/Documentation/configuration.txt" target="_blank" rel="noopener noreffer">文档(Github)</a>对<code>/etc/ksmbd/smb.conf</code>进行配置，下面是一键生成示例配置的指令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="s1">&#39;[global]
</span><span class="s1">tcp port = 445
</span><span class="s1">
</span><span class="s1">[share]
</span><span class="s1">comment = Share
</span><span class="s1">path = /home/share
</span><span class="s1">read only = no
</span><span class="s1">browseable = yes
</span><span class="s1">writeable = yes&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/ksmbd/smb.conf &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>经测试<code>tcp port = 445</code>这一行必须存在且需在<code>[global]</code>键下面，否则服务将无法在网络上监听。</p>
</blockquote>
<h2 id="启动测试">启动测试</h2>
<p>使用下面的指令启动服务，并用其他设备连接测试(别和我说你不会连接 SMB)，如果测试成功就可以停止服务进行下一步了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 启动</span>
sudo ksmbd.mountd
<span class="c1"># 停止</span>
sudo ksmbd.control -s
</code></pre></td></tr></table>
</div>
</div><h2 id="创建-sevice-文件实现开机自启">创建 sevice 文件实现开机自启</h2>
<h3 id="创建-sevice-文件">创建 sevice 文件</h3>
<p>创建<code>/etc/systemd/system/cifsd.service</code>文件，以下是一键指令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="s1">&#39;[Unit]
</span><span class="s1">Description=CIFSD
</span><span class="s1">After=network.target network-online.target nss-lookup.target
</span><span class="s1">
</span><span class="s1">[Service]
</span><span class="s1">Type=oneshot
</span><span class="s1">StandardError=journal
</span><span class="s1">User=root
</span><span class="s1">Group=root
</span><span class="s1">ExecStart=/usr/local/sbin/ksmbd.mountd
</span><span class="s1">ExecStop=/usr/local/sbin/ksmbd.control -s
</span><span class="s1">RemainAfterExit=true
</span><span class="s1">Restart=on-failure
</span><span class="s1">RestartSec=1s
</span><span class="s1">
</span><span class="s1">[Install]
</span><span class="s1">WantedBy=multi-user.target&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/systemd/system/cifsd.service &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><h3 id="设置开机自启">设置开机自启</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo systemctl daemon-reload
sudo systemctl <span class="nb">enable</span> --now cifsd   <span class="c1"># 设置自启并立即启动</span>
sudo systemctl status cifsd         <span class="c1"># 查看当前进程状态</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>大功告成，可以存你喜欢的小姐姐了<br>
因为 <code>cifsd</code> 支持 <code>RDMA</code> 可以不经过 CPU 直接传输数据，所以理论上是可以跑满网络带宽的<br>
至于你的带宽有多少你可以使用 <code>iperf3</code> 进行测试</p>
</blockquote>]]></description></item><item><title>树莓派4安装Gitea</title><link>https://negoces.github.io/posts/a6cf258f/</link><pubDate>Thu, 04 Mar 2021 20:10:24 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/a6cf258f/</guid><description><![CDATA[<p>在树莓派上面搭建一个内网 git 服务器，用来存放一些代码及镜像一些常用仓库。顺便搭建个 DroneCI 玩玩。</p>
<blockquote>
<p>此文章依据怎么方便怎么来的准则，并未考虑稳定与性能，切勿用作生产环境！</p>
</blockquote>
<h2 id="安装-mariadb">安装 MariaDB</h2>
<h3 id="拉取-mariadb-镜像">拉取 mariadb 镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker pull mariadb
</code></pre></td></tr></table>
</div>
</div><h3 id="部署-mariadb">部署 mariadb</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker run -d <span class="se">\
</span><span class="se"></span>--name mariadb <span class="se">\
</span><span class="se"></span>-p 3306:3306 <span class="se">\
</span><span class="se"></span>-e <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span>&lt;password&gt; <span class="se">\
</span><span class="se"></span>--restart<span class="o">=</span>always <span class="se">\
</span><span class="se"></span>mariadb
</code></pre></td></tr></table>
</div>
</div><h2 id="安装-phpmyadmin">安装 phpMyAdmin</h2>
<h3 id="拉取-phpmyadmin-镜像">拉取 phpmyadmin 镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker pull phpmyadmin
</code></pre></td></tr></table>
</div>
</div><h3 id="部署-phpmyadmin">部署 phpmyadmin</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker run -d <span class="se">\
</span><span class="se"></span>--name phpmyadmin <span class="se">\
</span><span class="se"></span>-p 3380:80 <span class="se">\
</span><span class="se"></span>-e <span class="nv">PMA_HOST</span><span class="o">=</span>&lt;树莓派IP&gt; <span class="se">\
</span><span class="se"></span>--restart<span class="o">=</span>always <span class="se">\
</span><span class="se"></span>phpmyadmin
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意：&lt;树莓派 IP&gt;不能填写 127.0.0.1，负责无法连接到数据库</p>
</blockquote>
<h2 id="安装-gitea">安装 Gitea</h2>
<h3 id="创建-gitea-数据库">创建 Gitea 数据库</h3>
<p>登录<code>&lt;树莓派IP&gt;:3380</code>创建 gitea 用户并创建同名数据库并赋予权限，注意把密码记着</p>
<h3 id="获取-gitea">获取 Gitea</h3>
<p>下载地址: <a href="https://dl.gitea.io/gitea/">https://dl.gitea.io/gitea/</a></p>
<h3 id="安装-git">安装 git</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt install git git-lfs -y
</code></pre></td></tr></table>
</div>
</div><h3 id="创建文件夹并复制文件">创建文件夹并复制文件</h3>
<p>创建文件夹</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo mkdir /opt/gitea
sudo mkdir /opt/gitea/etc
sudo mkdir /opt/gitea/home
sudo mkdir /opt/gitea/var
sudo mkdir /opt/gitea/var/lib
</code></pre></td></tr></table>
</div>
</div><p>复制文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo mv gitea /opt/gitea
</code></pre></td></tr></table>
</div>
</div><p>设置权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo chown git:git -R /opt/gitea
sudo chmod <span class="m">775</span> -R /opt/gitea
</code></pre></td></tr></table>
</div>
</div><p>最终目录结构</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">/opt/gitea/
├── etc
├── gitea
├── home
└── var
    └── lib
</code></pre></td></tr></table>
</div>
</div><h3 id="创建-git-用户">创建 git 用户</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo useradd -d /opt/gitea/home -s /bin/bash -U git
</code></pre></td></tr></table>
</div>
</div><h3 id="创建-service-文件">创建 service 文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="se">\
</span><span class="se"></span><span class="s1">&#39;[Unit]
</span><span class="s1">Description=Gitea (Git with a cup of tea)
</span><span class="s1">After=syslog.target
</span><span class="s1">After=network.target docker.service
</span><span class="s1">Requires=docker.service
</span><span class="s1">
</span><span class="s1">[Service]
</span><span class="s1">RestartSec=2s
</span><span class="s1">Type=simple
</span><span class="s1">User=git
</span><span class="s1">Group=git
</span><span class="s1">WorkingDirectory=/opt/gitea/var/lib
</span><span class="s1">ExecStart=/opt/gitea/gitea web --config /opt/gitea/etc/app.ini
</span><span class="s1">Restart=always
</span><span class="s1">Environment=USER=git HOME=/opt/gitea/home GITEA_WORK_DIR=/opt/gitea/var/lib
</span><span class="s1">CapabilityBoundingSet=CAP_NET_BIND_SERVICE
</span><span class="s1">AmbientCapabilities=CAP_NET_BIND_SERVICE
</span><span class="s1">
</span><span class="s1">[Install]
</span><span class="s1">WantedBy=multi-user.target&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/systemd/system/gitea.service &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><h3 id="启动-gitea-并设置自启">启动 gitea 并设置自启</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo systemctl start gitea
sudo systemctl <span class="nb">enable</span> gitea
sudo systemctl status gitea
</code></pre></td></tr></table>
</div>
</div><p>访问<code>&lt;IP&gt;:3000</code>进行 Gitea 初始化设置</p>
<h2 id="配置-gitea">配置 Gitea</h2>
<p>编辑<code>/opt/gitea/etc/app.ini</code>，添加或修改以下内容以解除 release 发布限制</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ini" data-lang="ini"><span class="k">[attachment]</span>
<span class="na">ENABLE</span> <span class="o">=</span> <span class="s">true</span>
<span class="na">PATH</span> <span class="o">=</span> <span class="s">/opt/gitea/home/attachments</span>
<span class="na">ALLOWED_TYPES</span> <span class="o">=</span> <span class="s">&lt;文件格式&gt;</span>
<span class="na">MAX_SIZE</span> <span class="o">=</span> <span class="s">&lt;文件最大大小,单位M,不需要加&gt;</span>
<span class="na">MAX_FILES</span> <span class="o">=</span> <span class="s">&lt;文件最大数量&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>关于文件格式:</p>
<p>查询网址:</p>
<ul>
<li><a href="https://filext.com/" target="_blank" rel="noopener noreffer">filext.com</a></li>
<li><a href="https://tool.oschina.net/commons/" target="_blank" rel="noopener noreffer">OSChina</a></li>
</ul>
<p>比如要接受所有文件就填写</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ini" data-lang="ini"><span class="na">ALLOWED_TYPES</span> <span class="o">=</span> <span class="s">octet-stream</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="配置-nginx-反向代理">配置 Nginx 反向代理</h2>
<h3 id="安装-nginx">安装 Nginx</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt update
sudo apt install nginx -y
</code></pre></td></tr></table>
</div>
</div><h3 id="修改配置">修改配置</h3>
<p>编辑<code>/etc/nginx/sites-available/default</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">server {
    listen 80 default_server;
    listen [::]:80 default_server;

    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name &lt;域名&gt;;

    ssl_certificate &lt;证书路径&gt;;
    ssl_certificate_key &lt;密钥路径&gt;;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;
    ssl_session_tickets off;

    # curl https://ssl-config.mozilla.org/ffdhe2048.txt &gt; /path/to/dhparam
    ssl_dhparam /path/to/dhparam;

    # intermediate configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    add_header Strict-Transport-Security &#34;max-age=63072000&#34; always;

    client_max_body_size 4096M;
    location / {
        proxy_pass http://127.0.0.1:3000;
    }
}
</code></pre></td></tr></table>
</div>
</div><h3 id="重启-nginx">重启 Nginx</h3>
<p>检查配置并更新</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo nginx -t
sudo systemctl restart nginx
</code></pre></td></tr></table>
</div>
</div><h2 id="安装-droneci">安装 DroneCI</h2>
<h3 id="拉取镜像">拉取镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker pull drone/drone:1
docker pull drone/drone-runner-docker:1
</code></pre></td></tr></table>
</div>
</div><h3 id="生成-rpc-密钥">生成 RPC 密钥</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">openssl rand -hex <span class="m">16</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="部署-droneci">部署 DroneCI</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker run <span class="se">\
</span><span class="se"></span>--volume<span class="o">=</span>/var/lib/drone:/data <span class="se">\
</span><span class="se"></span>--env<span class="o">=</span><span class="nv">DRONE_GITEA_SERVER</span><span class="o">={{</span>DRONE_GITEA_SERVER<span class="o">}}</span> <span class="se">\
</span><span class="se"></span>--env<span class="o">=</span><span class="nv">DRONE_GITEA_CLIENT_ID</span><span class="o">={{</span>DRONE_GITEA_CLIENT_ID<span class="o">}}</span> <span class="se">\
</span><span class="se"></span>--env<span class="o">=</span><span class="nv">DRONE_GITEA_CLIENT_SECRET</span><span class="o">={{</span>DRONE_GITEA_CLIENT_SECRET<span class="o">}}</span> <span class="se">\
</span><span class="se"></span>--env<span class="o">=</span><span class="nv">DRONE_RPC_SECRET</span><span class="o">={{</span>DRONE_RPC_SECRET<span class="o">}}</span> <span class="se">\
</span><span class="se"></span>--env<span class="o">=</span><span class="nv">DRONE_SERVER_HOST</span><span class="o">={{</span>DRONE_SERVER_HOST<span class="o">}}</span> <span class="se">\
</span><span class="se"></span>--env<span class="o">=</span><span class="nv">DRONE_SERVER_PROTO</span><span class="o">={{</span>DRONE_SERVER_PROTO<span class="o">}}</span> <span class="se">\
</span><span class="se"></span>--env<span class="o">=</span><span class="nv">DRONE_USER_CREATE</span><span class="o">=</span>username:<span class="o">{{</span>ADMIN_USERNAME<span class="o">}}</span>,admin:true <span class="se">\
</span><span class="se"></span>--publish<span class="o">=</span>80:80 <span class="se">\
</span><span class="se"></span>--restart<span class="o">=</span>always <span class="se">\
</span><span class="se"></span>--detach<span class="o">=</span><span class="nb">true</span> <span class="se">\
</span><span class="se"></span>--name<span class="o">=</span>drone <span class="se">\
</span><span class="se"></span>drone/drone:1
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker run -d <span class="se">\
</span><span class="se"></span>-v /var/run/docker.sock:/var/run/docker.sock <span class="se">\
</span><span class="se"></span>-e <span class="nv">DRONE_RPC_PROTO</span><span class="o">=</span>https <span class="se">\
</span><span class="se"></span>-e <span class="nv">DRONE_RPC_HOST</span><span class="o">=</span>drone.company.com <span class="se">\
</span><span class="se"></span>-e <span class="nv">DRONE_RPC_SECRET</span><span class="o">=</span>super-duper-secret <span class="se">\
</span><span class="se"></span>-e <span class="nv">DRONE_RUNNER_CAPACITY</span><span class="o">=</span><span class="m">2</span> <span class="se">\
</span><span class="se"></span>-e <span class="nv">DRONE_RUNNER_NAME</span><span class="o">=</span><span class="si">${</span><span class="nv">HOSTNAME</span><span class="si">}</span> <span class="se">\
</span><span class="se"></span>-e <span class="nv">DRONE_UI_USERNAME</span><span class="o">=</span>admin <span class="se">\
</span><span class="se"></span>-e <span class="nv">DRONE_UI_PASSWORD</span><span class="o">=</span>admin <span class="se">\
</span><span class="se"></span>-p 3200:3000 <span class="se">\
</span><span class="se"></span>--restart always <span class="se">\
</span><span class="se"></span>--name runner <span class="se">\
</span><span class="se"></span>drone/drone-runner-docker:1
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker logs runner
</code></pre></td></tr></table>
</div>
</div><h3 id="配置-nginx-反代">配置 Nginx 反代</h3>
<p>在<code>/etc/nginx/sites-available/default</code>后面追加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">server <span class="o">{</span>
    listen <span class="m">443</span> ssl http2<span class="p">;</span>
    listen <span class="o">[</span>::<span class="o">]</span>:443 ssl http2<span class="p">;</span>

    server_name &lt;域名&gt;<span class="p">;</span>

    ssl_certificate &lt;证书路径&gt;<span class="p">;</span>
    ssl_certificate_key &lt;密钥路径&gt;<span class="p">;</span>
    ssl_session_timeout 1d<span class="p">;</span>
    ssl_session_cache shared:MozSSL:10m<span class="p">;</span>
    ssl_session_tickets off<span class="p">;</span>

    <span class="c1"># curl https://ssl-config.mozilla.org/ffdhe2048.txt &gt; /path/to/dhparam</span>
    ssl_dhparam /path/to/dhparam<span class="p">;</span>

    <span class="c1"># intermediate configuration</span>
    ssl_protocols TLSv1.2 TLSv1.3<span class="p">;</span>
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384<span class="p">;</span>
    ssl_prefer_server_ciphers off<span class="p">;</span>

    <span class="c1"># HSTS (ngx_http_headers_module is required) (63072000 seconds)</span>
    add_header Strict-Transport-Security <span class="s2">&#34;max-age=63072000&#34;</span> always<span class="p">;</span>

    client_max_body_size 4096M<span class="p">;</span>
    location / <span class="o">{</span>
        proxy_pass http://127.0.0.1:3100<span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Drone 默认会选择 amd64 架构的 runner，但是我们的树莓派是 arm64 的，会导致构建一直处于<code>Pending</code>状态，所以项目的<code>.drone.yml</code>需要指定平台，比如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">pipeline</span><span class="w">
</span><span class="w"></span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">docker</span><span class="w">
</span><span class="w"></span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span><span class="w"></span><span class="nt">platform</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">os</span><span class="p">:</span><span class="w"> </span><span class="l">linux</span><span class="w">
</span><span class="w">  </span><span class="nt">arch</span><span class="p">:</span><span class="w"> </span><span class="l">arm64</span><span class="w">
</span><span class="w"></span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">build</span><span class="w">
</span><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">golang</span><span class="w">
</span><span class="w">    </span><span class="nt">commands</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">go build</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>]]></description></item><item><title>树莓派4安装Docker</title><link>https://negoces.github.io/posts/c0b3720d/</link><pubDate>Wed, 03 Mar 2021 21:55:47 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/c0b3720d/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/c0b3720d/cover.png" referrerpolicy="no-referrer">
            </div><p>Docker 大法好！！！</p>
<h2 id="安装必要工具">安装必要工具</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt update
sudo apt install apt-transport-https ca-certificates curl gnupg -y
</code></pre></td></tr></table>
</div>
</div><h2 id="安装-docker">安装 Docker</h2>
<p>下载安装 GPG 密钥</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -fsSL https://mirror.sjtu.edu.cn/docker-ce/linux/debian/gpg <span class="p">|</span> sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
</code></pre></td></tr></table>
</div>
</div><p>添加镜像源</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="se">\
</span><span class="se"></span><span class="s2">&#34;deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirror.sjtu.edu.cn/docker-ce/linux/debian buster stable&#34;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>安装 Docker-ce</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt update
sudo apt install docker-ce docker-ce-cli containerd.io -y
</code></pre></td></tr></table>
</div>
</div><h2 id="赋予账户可直接操作-docker-的权限">赋予账户可直接操作 Docker 的权限</h2>
<p>将自己的账户添加到 docker 组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo usermod -aG docker <span class="nv">$USER</span>
newgrp docker
</code></pre></td></tr></table>
</div>
</div><h2 id="添加-docker-仓库加速">添加 Docker 仓库加速</h2>
<p>编辑或新建<code>/etc/docker/daemon.json</code>文件，向其中添加<code>registry-mirrors</code>项</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="se">\
</span><span class="se"></span><span class="s1">&#39;{
</span><span class="s1">    &#34;registry-mirrors&#34;: [&#34;https://docker.mirrors.sjtug.sjtu.edu.cn&#34;]
</span><span class="s1">}&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/docker/daemon.json &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><h2 id="启动-docker-并设置自启">启动 Docker 并设置自启</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo systemctl start docker
sudo systemctl <span class="nb">enable</span> docker
sudo systemctl status docker
</code></pre></td></tr></table>
</div>
</div><h2 id="安装-portainer-面板">安装 Portainer 面板</h2>
<p>为了防止待会部署面板时拉取过慢，我们提前拉取</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker pull portainer/portainer-ce
</code></pre></td></tr></table>
</div>
</div><p>部署面板</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">docker volume create portainer_data
docker run -d <span class="se">\
</span><span class="se"></span>-p 8000:8000 <span class="se">\
</span><span class="se"></span>-p 9000:9000 <span class="se">\
</span><span class="se"></span>--name<span class="o">=</span>portainer <span class="se">\
</span><span class="se"></span>--restart<span class="o">=</span>always <span class="se">\
</span><span class="se"></span>-v /var/run/docker.sock:/var/run/docker.sock <span class="se">\
</span><span class="se"></span>-v portainer_data:/data <span class="se">\
</span><span class="se"></span>portainer/portainer-ce
</code></pre></td></tr></table>
</div>
</div><p>到此为止，Docker 和 Portainer 面板均已部署完毕，可前往<code>&lt;ip&gt;：9000</code>访问面板</p>]]></description></item><item><title>把树莓派当作热点</title><link>https://negoces.github.io/posts/542347b3/</link><pubDate>Wed, 03 Mar 2021 21:18:18 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/542347b3/</guid><description><![CDATA[<p>将树莓派作为二级路由器</p>
<div class="details admonition danger open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-skull-crossbones fa-fw"></i>AP模式 与 路由模式<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>树莓派可作为纯 AP <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> 使用，这里启用了 NAT 作为二级路由使用。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>AP： 全称 WirelessAccessPoint(无线访问接入点) 是无线网和有线网之间沟通的桥梁 <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
</div>
        </div>
    </div>
<blockquote>
<p>测试环境:<br>
设备: RaspberryPi 3B+<br>
系统: Raspberry Pi OS (与 Raspbian 类似是官方的 64 位系统。)<br>
上级路由: 10.0.0.1 (OpenWRT)</p>
</blockquote>
<h2 id="安装系统">安装系统</h2>
<p>系统安装及设置语言等操作请参考<a href="/posts/04c00a0d/" rel="">此文章</a></p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">树莓派 3 与树莓派 4 的入门安装基本一致，区别在于树莓派 3 的 USB 启动不需要更新 eeprom</div>
        </div>
    </div>
<h2 id="安装必要软件">安装必要软件</h2>
<p>完全更新系统，防止安装软件时出现依赖不兼容等问题。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt update
sudo apt full-upgrade -y
</code></pre></td></tr></table>
</div>
</div><p>安装<code>hostapd</code>、<code>dnsmasq</code>等软件，其中<code>hostapd</code>可以将你的树莓派变成热点向外发出无线信号，<code>dnsmasq</code>作为 DHCP 服务器与 DNS 缓存，为连接的设备分配 IP 地址及提供 DNS 服务。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt install hostapd dnsmasq netfilter-persistent iptables-persistent -y
</code></pre></td></tr></table>
</div>
</div><h2 id="设置无线接口">设置无线接口</h2>
<p>编辑<code>/etc/dhcpcd.conf</code>添加下面配置(仅树莓派是修改此文件，debian 需修改<code>/etc/network/interfaces</code>文件)，为 wlan0 接口绑定 IP 地址，用于后面的<code>hostapd</code>绑定接口。</p>
<p><code>ip_address=</code>后的 IP 地址可以填写任意子网 IP，<code>但不要和你的上级路由重复</code>，比如一般家用路由器为 <code>192.168.1.1/24</code> 客户端可用的 IP 为 192.168.1.2 - 192.168.1.254 (192.168.1.1 为路由器自身地址，192.168.1.255 为广播地址)</p>
<div class="details admonition tip">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>子网范围<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>A 类: 10.0.0.0 - 10.255.255.255 (子网掩码: 255.0.0.0)</li>
<li>B 类: 172.16.0.0 - 172.31.255.255 (子网掩码: 255.240.0.0)</li>
<li>C 类: 192.168.0.0 - 192.168.255.255 (子网掩码: 255.255.0.0)</li>
</ul>
</div>
        </div>
    </div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">interface wlan0
    static ip_address=172.24.0.1/24
    nohook wpa_supplicant
</code></pre></td></tr></table>
</div>
</div><h2 id="开启内核转发">开启内核转发</h2>
<p>启用 Linux 内核转发功能，使得进入树莓派的流量能顺利的通过树莓派转发出去，否则之后将会出现可以连上树莓派但是无法联网的情况。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="s2">&#34;net.ipv4.ip_forward=1&#34;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/sysctl.d/routed-ap.conf &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><h2 id="配置无线国家代码">配置无线国家代码</h2>
<p>使用<code>raspi-config</code>工具设置 WLAN 国家代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo raspi-config
</code></pre></td></tr></table>
</div>
</div><p>依次选择<code>Localisation Options -&gt; WLAN Country -&gt; AU</code>，为什么不用 CN？不知道是不是树莓派的问题，CN 的 5G 频段少之又少，而且都不支持 80MHz，所以选择了 AU。设置完成后返回主菜单，<code>Finished</code>，<code>Reboot</code></p>
<h2 id="配置并启用-hostapd">配置并启用 hostapd</h2>
<p>先确保无线模块未被禁用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo rfkill unblock wlan
</code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>查询网卡支持的频段<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo iw reg <span class="nb">set</span> AU
sudo iw phy phy0 channels
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<p>编辑<code>/etc/hostapd/hostapd.conf</code>对 hostapd 进行设置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ini" data-lang="ini"><span class="c1"># 接口与频率设定</span>
<span class="c1"># 绑定接口</span>
<span class="na">interface</span><span class="o">=</span><span class="s">wlan0</span>
<span class="c1"># 802.11a</span>
<span class="na">hw_mode</span><span class="o">=</span><span class="s">a</span>
<span class="c1"># 信道</span>
<span class="na">channel</span><span class="o">=</span><span class="s">36</span>
<span class="c1"># 国家代码</span>
<span class="na">country_code</span><span class="o">=</span><span class="s">AU</span>
<span class="c1"># IEEE802.11d</span>
<span class="na">ieee80211d</span><span class="o">=</span><span class="s">1</span>
<span class="c1"># IEEE802.11h</span>
<span class="na">ieee80211h</span><span class="o">=</span><span class="s">1</span>
<span class="c1"># MAC地址过滤模式</span>
<span class="na">macaddr_acl</span><span class="o">=</span><span class="s">0</span>
<span class="c1"># 最大连接数</span>
<span class="na">max_num_sta</span><span class="o">=</span><span class="s">255</span>
<span class="c1"># 隐藏SSID</span>
<span class="na">ignore_broadcast_ssid</span><span class="o">=</span><span class="s">0</span>
<span class="c1"># 启用WMM</span>
<span class="na">wmm_enabled</span><span class="o">=</span><span class="s">1</span>

<span class="c1"># 802.11n/ac (HT/VHT) Settings</span>
<span class="c1"># IEEE802.11n</span>
<span class="na">ieee80211n</span><span class="o">=</span><span class="s">1</span>
<span class="c1"># IEEE802.11ac</span>
<span class="na">ieee80211ac</span><span class="o">=</span><span class="s">1</span>
<span class="na">ht_capab</span><span class="o">=</span><span class="s">[HT40-][HT40+][SHORT-GI-20][SHORT-GI-40][DSSS_CCK-40][MAX-AMSDU-3839]</span>
<span class="na">vht_capab</span><span class="o">=</span><span class="s">[MAX-MPDU-3895][SHORT-GI-80][SU-BEAMFORMER][SU-BEAMFORMEE]</span>
<span class="na">vht_oper_chwidth</span><span class="o">=</span><span class="s">1</span>
<span class="na">vht_oper_centr_freq_seg0_idx</span><span class="o">=</span><span class="s">42</span>
<span class="c1">#vht_oper_centr_freq_seg1_idx=159</span>

<span class="c1"># SSID及安全设置</span>
<span class="na">ssid</span><span class="o">=</span><span class="s">RaspAP</span>
<span class="na">wpa</span><span class="o">=</span><span class="s">2</span>
<span class="na">auth_algs</span><span class="o">=</span><span class="s">1</span>
<span class="na">rsn_pairwise</span><span class="o">=</span><span class="s">CCMP</span>
<span class="na">wpa_key_mgmt</span><span class="o">=</span><span class="s">WPA-PSK</span>
<span class="na">wpa_passphrase</span><span class="o">=</span><span class="s">22223333</span>
</code></pre></td></tr></table>
</div>
</div><div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>在我使用的过程中，ACS(自动选择信道)即<code>channel=0</code>会导致无法启动。</p>
<p>目前已知能正常启动且国外论坛建议的<code>channel / vht_oper_centr_freq_seg0_idx</code>的参数分别为<code>36/42</code>和<code>149/155</code>，即<code>36</code>或<code>149</code>信道。</p>
</div>
        </div>
    </div>
<p>先测试能否启动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo /usr/sbin/hostapd -P /run/hostapd.pid -dd /etc/hostapd/hostapd.conf
</code></pre></td></tr></table>
</div>
</div><p>如果<code>hostapd</code>正常启动则可通过<code>cltl^C</code>关闭，并使用下列指令设置开机自启并在后台运行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo systemctl unmask hostapd
sudo systemctl <span class="nb">enable</span> --now hostapd
sudo systemctl status hostapd
</code></pre></td></tr></table>
</div>
</div><p>手机的 WLAN 列表中会显示你的 WiFi 名称，但请不要尝试连接，现在并没有配置 DHCP 服务，你的设备会因为无法分配到 IP 导致无法连接</p>
<h2 id="配置并启用-dnsmasq">配置并启用 dnsmasq</h2>
<p>备份<code>dnsmasq</code>安装时生成的配置，以便于日后查阅</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo mv /etc/dnsmasq.conf /etc/dnsmasq.conf.bak
</code></pre></td></tr></table>
</div>
</div><p>创建<code>/etc/dnsmasq.conf</code>并编辑新配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">interface=wlan0
dhcp-range=172.24.0.2,172.24.0.254,255.255.255.0,2h
domain=wlan
server=223.5.5.5
address=/raspberry.lan/172.24.0.1
</code></pre></td></tr></table>
</div>
</div><p>设置开机自启并立即启动<code>dnsmasq</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo systemctl <span class="nb">enable</span> --now dnsmasq
sudo systemctl restart dnsmasq
sudo systemctl status dnsmasq
</code></pre></td></tr></table>
</div>
</div><h2 id="配置-iptables">配置 iptables</h2>
<p>配置 iptables 实现 NAT 功能，将发送到树莓派的流量截获并修改源地址实现 SNAT</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo iptables -t nat -A POSTROUTING -j MASQUERADE
</code></pre></td></tr></table>
</div>
</div><p>配置 iptables 永久化，使每次重启后 iptables 都能自动添加之前的规则</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo netfilter-persistent save
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>树莓派4入门指南(无显示器)</title><link>https://negoces.github.io/posts/04c00a0d/</link><pubDate>Wed, 03 Mar 2021 20:54:16 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/04c00a0d/</guid><description><![CDATA[<p>树莓派 4 无头启动(Headless)入门指南</p>
<div class="details admonition danger open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-skull-crossbones fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">以下部分内容仅适用于 <code>Debian 10 (buster)</code> 系统，最新的指南请前往 <a href="https://www.raspberrypi.org/documentation/" target="_blank" rel="noopener noreffer">官网(英文)</a> 查阅。</div>
        </div>
    </div>
<h2 id="准备">准备</h2>
<p>所需材料:</p>
<ul>
<li>树莓派*1</li>
<li>SD 卡*1</li>
<li>树莓派系统镜像*1</li>
<li>PC*1</li>
<li>Etcher*1</li>
<li>活人*1</li>
</ul>
<h2 id="制作带有系统的-sd-卡">制作带有系统的 SD 卡</h2>
<p>从 <a href="https://www.raspberrypi.org/software/operating-systems/" target="_blank" rel="noopener noreffer">官网</a> 或者 <a href="https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/" target="_blank" rel="noopener noreffer">TUNA</a> 下载 Raspberry Pi OS 的镜像(<code>raspios_lite_arm64</code>)。</p>
<p>打开 Etcher，点击最左侧的<code>Flash from file</code>，选择你所下载的树莓派镜像，点击中间的<code>Select target</code>，勾选你的 SD 卡，点击<code>Select</code>，点击最右边的<code>Flash</code>等待烧录完即可。</p>
<p>烧录完之后系统里面会多出一个命名为<code>boot</code>的分区，在此分区里面创建一个空白的名为<code>ssh</code>的文件以开启 ssh 远程访问。</p>
<div class="details admonition note">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>连接到WiFi网络<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>在<code>boot</code>分区创建<code>wpa_supplicant.conf</code>并编辑</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">ctrl_interface</span><span class="o">=</span><span class="nv">DIR</span><span class="o">=</span>/var/run/wpa_supplicant <span class="nv">GROUP</span><span class="o">=</span>netdev
<span class="nv">update_config</span><span class="o">=</span><span class="m">1</span>
<span class="nv">country</span><span class="o">=</span>&lt;填写ISO 3166-1国家码&gt;<span class="o">(</span>建议使用<span class="sb">`</span>US<span class="sb">`</span>,<span class="sb">`</span>CN<span class="sb">`</span>可能会导致连接不上WiFi<span class="o">)</span>

<span class="nv">network</span><span class="o">={</span>
 <span class="nv">ssid</span><span class="o">=</span><span class="s2">&#34;&lt;无线名称&gt;&#34;</span>
 <span class="nv">psk</span><span class="o">=</span><span class="s2">&#34;&lt;无线密码&gt;&#34;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<div class="details admonition note">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>使用USB启动<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>一、更新<code>eeprom</code></p>
<ol>
<li>准备一张 SD 卡，格式化成 FAT32 格式</li>
<li>前往<a href="https://github.com/raspberrypi/rpi-eeprom/releases/" target="_blank" rel="noopener noreffer">Github</a>下载<code>rpi-boot-eeprom-recovery-xxx.zip</code>(要求 vl805 以上的版本)</li>
<li>将 zip 内的文件解压到 SD 卡内</li>
<li>将 SD 卡插入树莓派，插电</li>
<li>等待一段时间，当绿灯开始规律闪烁时则表示更新完毕</li>
</ol>
<p>二、制作 USB 启动镜像</p>
<ul>
<li>与制作 SD 卡镜像一样，把勾选 SD 卡改为勾选 USB 设备即可</li>
</ul>
</div>
        </div>
    </div>
<h2 id="装配你的树莓派">装配你的树莓派</h2>
<p>插上 SD 卡(U 盘)，装上散热马甲(如果有的话)，插上网线，插上电源，静待开机</p>
<h2 id="连接你的树莓派">连接你的树莓派</h2>
<p>前往你的路由器查看你的树莓派 IP，一般主机名就是<code>raspberrypi</code>，我的树莓派分配到的 IP 是<code>10.0.0.181</code>，用 ssh 连接(默认用户名:<code>pi</code>密码:<code>raspberry</code>)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">ssh pi@10.0.0.181
<span class="c1"># 进去之后改一下密码</span>
passwd
<span class="c1"># 第一个输入当前密码，第二个和第三个是新密码</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="设置镜像并更新">设置镜像并更新</h2>
<div class="details admonition danger open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-skull-crossbones fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>下面的配置用的是 <code>testing</code> 更新通道，软件比较新但也可能出现 BUG</p>
<p>若想使用稳定版请将下面的<code>testing</code>全部替换成<code>buster</code></p>
</div>
        </div>
    </div>
<p>设置 Debian 仓库镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="se">\
</span><span class="se"></span><span class="s2">&#34;# /etc/apt/sources.list
</span><span class="s2">deb https://mirrors.sjtug.sjtu.edu.cn/debian testing main contrib non-free
</span><span class="s2">deb https://mirrors.sjtug.sjtu.edu.cn/debian testing-updates main contrib non-free
</span><span class="s2">deb https://mirrors.sjtug.sjtu.edu.cn/debian-security/ stable/updates main contrib non-free
</span><span class="s2">deb-src https://mirrors.sjtug.sjtu.edu.cn/debian testing main contrib non-free
</span><span class="s2">deb-src https://mirrors.sjtug.sjtu.edu.cn/debian testing-updates main contrib non-free
</span><span class="s2">deb-src https://mirrors.sjtug.sjtu.edu.cn/debian-security/ stable/updates main contrib non-free&#34;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/apt/sources.list &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>设置 RaspberryPi 仓库镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="se">\
</span><span class="se"></span><span class="s2">&#34;# /etc/apt/sources.list.d/raspi.list
</span><span class="s2">deb https://mirrors.sjtug.sjtu.edu.cn/raspberrypi/debian/ buster main
</span><span class="s2">deb-src https://mirrors.sjtug.sjtu.edu.cn/raspberrypi/debian/ buster main&#34;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/apt/sources.list.d/raspi.list &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>对系统镜像全量更新</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt update
sudo apt full-upgrade -y
</code></pre></td></tr></table>
</div>
</div><h2 id="设置中文">设置中文</h2>
<div class="details admonition danger open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-skull-crossbones fa-fw"></i>注意<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">如果你的树莓派连接了显示器且没有安装图形界面请不要设置中文，否则会导致乱码</div>
        </div>
    </div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="se">\
</span><span class="se"></span><span class="s1">&#39;LANG=zh_CN.UTF-8
</span><span class="s1">LANGUAGE=&#34;zh_CN:zh:en_US:en&#34;&#39;</span> <span class="p">|</span> <span class="se">\
</span><span class="se"></span>sudo tee /etc/environment &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div><p>然后重启</p>
<p>然后，Enjoy youself!</p>
<h2 id="更多设置">更多设置</h2>
<p>更多的设置(比如 GPIO 等)可以使用树莓派官方的工具进行配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo raspi-config
</code></pre></td></tr></table>
</div>
</div><div class="details admonition note">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>小技巧<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><h4 id="磁盘测速">磁盘测速</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>./test.dbf <span class="nv">bs</span><span class="o">=</span>512k <span class="nv">count</span><span class="o">=</span><span class="m">1024</span> <span class="nv">conv</span><span class="o">=</span>fdatasync
</code></pre></td></tr></table>
</div>
</div><p>将会在当前目录写入一个 512MiB 的<code>test.dbf</code>文件来测试写入速度</p>
<h4 id="查看温度">查看温度</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 方法一：直接查看系统文件</span>
cat /sys/class/thermal/thermal_zone0/temp
<span class="c1"># 方法二：通过vcgencmd查看</span>
vcgencmd measure_temp
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>]]></description></item><item><title>iptables从入门到放弃</title><link>https://negoces.github.io/posts/16e870f5/</link><pubDate>Mon, 18 Jan 2021 17:29:57 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/16e870f5/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/16e870f5/cover.png" referrerpolicy="no-referrer">
            </div><p>iptables 是 Linux 系统上常用的命令行工具，主要用来配置防火墙。运用 iptables 我们能够实现流量的转发、拦截等操作</p>
<h2 id="iptables-是什么">iptables 是什么</h2>
<p>iptables 是运行在用户空间的应用软件，通过控制 Linux 内核 netfilter 模块，来管理网络数据包的处理和转发。在大部分 Linux 发行版中，可以通过手册页或<code>man iptables</code>获取用户手册。</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>netfilter是什么(摘自Wiki)<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Netfilter，在 Linux 内核中的一个软件框架，用于管理网络数据包。不仅具有网络地址转换（NAT）的功能，也具备数据包内容修改、以及数据包过滤等防火墙功能。利用运作于用户空间的应用软件，如 iptables、ebtables 和 arptables 等，来控制 Netfilter，系统管理者可以管理通过 Linux 操作系统的各种网络数据包。1990 年代，Netfilter 在 Linux 2.3.15 版时进入 Linux 内核，正式应用于 Linux 2.4 版。</div>
        </div>
    </div>
<p>简而言之就是 Netfilter 的上层程序，用户通过 iptables 指定规则，由 Netfilter 来执行，实现流量的拦截、转发等操作。</p>
<h2 id="iptables-的链chain">iptables 的链(chain)</h2>
<p>iptables 中有 5 个链，分别与 netfilter 中的 hook 对应</p>
<ul>
<li><code>PREROUTING</code> - 对应<code>NF_IP_PRE_ROUTING</code>,任何进入网络堆栈的流量都会触发此 hook。</li>
<li><code>INPUT</code> - 对应<code>NF_IP_LOCAL_IN</code>，如果数据包发送到本地系统，则在路由传入数据包之后，将触发此 hook。</li>
<li><code>FORWARD</code> - 对应<code>NF_IP_FORWARD</code>，如果该数据包转发到另一台主机，则在路由输入数据包之后将触发此 hook。</li>
<li><code>OUTPUT</code> - 对应<code>NF_IP_LOCAL_OUT</code>，由本地的出栈流量触发。</li>
<li><code>POSTROUTING</code> - 对应<code>NF_IP_POST_ROUTING</code>，任何传出的流量都将触发此 hook。</li>
</ul>
<p>数据包走向:</p>
<ul>
<li>目的地址为本机的传入流量: -&gt; <code>PREROUTING</code> -&gt; <code>INPUT</code></li>
<li>目的地址为其他主机的传入流量: -&gt; <code>PREROUTING</code> -&gt; <code>FORWARD</code> -&gt; <code>POSTROUTING</code> -&gt;</li>
<li>本机出站流量: <code>OUTPUT</code> -&gt; <code>POSTROUTING</code> -&gt;</li>
</ul>
<h2 id="iptables-的表tables">iptables 的表(tables)</h2>
<h3 id="filter-表">filter 表</h3>
<p>filter 表是默认的表，如果不指明表则使用此表。其通常用于过滤数据包。其中的内建链包括：</p>
<ul>
<li>INPUT,OUTPUT,FORWARD</li>
</ul>
<h3 id="nat-表">nat 表</h3>
<p>nat 表如其名，用于地址转换操作。其中的内建链包括：</p>
<ul>
<li>PREROUTING,POSTROUTING,OUTPUT</li>
</ul>
<h3 id="mangle-表">mangle 表</h3>
<p>mangle 表用于处理数据包。其和 nat 表的主要区别在于，nat 表侧重连接而 mangle 表侧重每一个数据包。其中内建链列表如下。</p>
<ul>
<li>PREROUTING,OUTPUT,FORWARD,INPUT,POSTROUTING</li>
</ul>
<h3 id="raw-表">raw 表</h3>
<p>raw 表用于处理异常，有如下两个内建链：</p>
<ul>
<li>PREROUTING,OUTPUT</li>
</ul>
<figure>
     <figcaption>
            <h4>流量流向</h4>
        </figcaption>
</figure>

<h2 id="iptables-的规则rules">iptables 的规则(rules)</h2>
<p>根据规则匹配条件来尝试匹配报文，一旦匹配成功，就由规则定义的处理动作做出处理。</p>
<h3 id="匹配条件">匹配条件</h3>
<p>基本匹配条件：源地址，目标地址，传输层协议<br>
扩展匹配条件：由扩展模块定义</p>
<h3 id="处理动作">处理动作</h3>
<p>基本处理动作：ACCEPT、DROP<br>
扩展处理动作：REJECT、RETURN、LOG、REDIRECT</p>
<h3 id="iptables的链内置链和自定义链">iptables的链：内置链和自定义链</h3>
<p>内置链：对应于hook functions<br>
自定义链接：用于内置链的扩展和补充，可实现更灵活的规则管理机制；自定义链可以设置完之后，添加到内置链中，方便管理</p>
<blockquote>
<p>待续&hellip; (iptables的命令操作)</p>
</blockquote>]]></description></item><item><title>C语言链表实现</title><link>https://negoces.github.io/posts/53e2617f/</link><pubDate>Sat, 09 Jan 2021 00:29:35 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/53e2617f/</guid><description><![CDATA[<h2 id="实现思路">实现思路</h2>
<p>假设现在有个三节点的链表,每个节点具有两个指针:</p>
<ul>
<li>prev —— 上一节点地址</li>
<li>next —— 下一节点地址</li>
</ul>
<div class="mermaid" id="id-1"></div>
<h3 id="插入节点">插入节点</h3>
<p>注:虚线表示删除,D为插入的节点</p>
<div class="mermaid" id="id-2"></div>
<p>按照这个图的操作应该是:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">C</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">D</span>
<span class="n">D</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">C</span>
<span class="n">D</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">B</span>
<span class="n">B</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">D</span>
</code></pre></td></tr></table>
</div>
</div><p>假设此时的链表传入的table是B,插入的node为D,那么C语言代码为:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">node</span>
<span class="n">node</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span>
<span class="n">node</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">table</span>
<span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">node</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="删除节点">删除节点</h3>
<p>注:虚线表示删除,B为要删除的节点</p>
<div class="mermaid" id="id-3"></div>
<p>按照这个图的操作应该是:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">A</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">C</span>
<span class="n">C</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">A</span>
</code></pre></td></tr></table>
</div>
</div><p>假设此时的链表传入的table是B,那么C语言代码为:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">table</span><span class="o">-&gt;</span><span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
<span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
<span class="n">free</span><span class="p">(</span><span class="n">table</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="代码实现">代码实现</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">node</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>   <span class="c1">//节点ID
</span><span class="c1"></span>    <span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="n">prev</span><span class="p">;</span> <span class="c1">//上节点地址
</span><span class="c1"></span>    <span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span> <span class="c1">//下节点地址
</span><span class="c1"></span><span class="p">}</span> <span class="n">node</span><span class="p">;</span>

<span class="n">node</span> <span class="o">*</span><span class="nf">createNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">uid</span><span class="p">);</span>                      <span class="c1">//创建(节点ID)
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">addNode</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">table</span><span class="p">,</span> <span class="kt">int</span> <span class="n">uid</span><span class="p">,</span> <span class="kt">int</span> <span class="n">newUid</span><span class="p">);</span> <span class="c1">//增(链表,节点UID,新建节点UID)[在UID节点后插入]
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">delNode</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">table</span><span class="p">,</span> <span class="kt">int</span> <span class="n">uid</span><span class="p">);</span>             <span class="c1">//删(链表,节点UID)
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">printTable</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">table</span><span class="p">);</span>                   <span class="c1">//打印(链表)
</span><span class="c1"></span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">node</span> <span class="o">*</span><span class="n">table</span> <span class="o">=</span> <span class="n">createNode</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">addNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">addNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
    <span class="n">addNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">addNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
    <span class="n">addNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="n">addNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
    <span class="n">delNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">delNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
    <span class="n">delNode</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="n">printTable</span><span class="p">(</span><span class="n">table</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">node</span> <span class="o">*</span><span class="nf">createNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">uid</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">node</span> <span class="o">*</span><span class="n">newTable</span> <span class="o">=</span> <span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">node</span><span class="p">));</span>
    <span class="n">newTable</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">=</span> <span class="n">uid</span><span class="p">;</span>
    <span class="n">newTable</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">newTable</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">newTable</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">addNode</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">table</span><span class="p">,</span> <span class="kt">int</span> <span class="n">uid</span><span class="p">,</span> <span class="kt">int</span> <span class="n">newUid</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">table</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">//未查找到相应节点
</span><span class="c1"></span>            <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Node %d not find!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">uid</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">==</span> <span class="n">newUid</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">//节点ID已存在
</span><span class="c1"></span>            <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Node %d exist!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">newUid</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">==</span> <span class="n">uid</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">//查找到相应节点
</span><span class="c1"></span>            <span class="n">node</span> <span class="o">*</span><span class="n">newTable</span> <span class="o">=</span> <span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">node</span><span class="p">));</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="p">{</span> <span class="c1">//如果存在下一节点
</span><span class="c1"></span>                <span class="c1">//建立当前与下一链表的联系
</span><span class="c1"></span>                <span class="n">newTable</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
                <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">newTable</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="c1">//建立当前与上一链表的联系
</span><span class="c1"></span>            <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">newTable</span><span class="p">;</span>
            <span class="n">newTable</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">table</span><span class="p">;</span>
            <span class="c1">//写入当前链表ID
</span><span class="c1"></span>            <span class="n">newTable</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">=</span> <span class="n">newUid</span><span class="p">;</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">table</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">delNode</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">table</span><span class="p">,</span> <span class="kt">int</span> <span class="n">uid</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">table</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">//未查找到相应节点
</span><span class="c1"></span>            <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Node %d not find!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">uid</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">==</span> <span class="n">uid</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">//查找到相应节点
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="p">{</span> <span class="c1">//如果存在下一节点
</span><span class="c1"></span>                <span class="c1">//建立上一节点与下一节点的连接
</span><span class="c1"></span>                <span class="n">table</span><span class="o">-&gt;</span><span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
                <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span> <span class="c1">//如果不存在下一节点
</span><span class="c1"></span>                <span class="c1">//设置上一节点的next为NULL
</span><span class="c1"></span>                <span class="n">table</span><span class="o">-&gt;</span><span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="c1">//释放当前节点
</span><span class="c1"></span>            <span class="n">free</span><span class="p">(</span><span class="n">table</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">table</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">printTable</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">table</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">table</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Node: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">);</span>
        <span class="n">table</span> <span class="o">=</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>使用curl测试API</title><link>https://negoces.github.io/posts/9058bdc8/</link><pubDate>Sat, 07 Nov 2020 12:33:57 +0800</pubDate><author>作者</author><guid>https://negoces.github.io/posts/9058bdc8/</guid><description><![CDATA[<div class="featured-image">
                <img src="/cover.png" referrerpolicy="no-referrer">
            </div><p>curl是从服务器传输数据或向服务器传输数据的工具，熟悉其用法后，完全可以取代 Postman 这一类的图形界面工具。</p>
<h2 id="常规用法">常规用法</h2>
<p>模拟浏览器向网站发送请求<code>curl &lt;URL&gt;</code>,比如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl <span class="s2">&#34;https://www.bilibili.com&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="参数解释">参数解释</h2>
<h3 id="-x-指定请求方法">-X 指定请求方法</h3>
<p>指定 HTTP 请求的方法。RESTful API的四种方法:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -X GET <span class="s2">&#34;https://example.com&#34;</span>
curl -X POST <span class="s2">&#34;https://example.com&#34;</span>
curl -X PUT <span class="s2">&#34;https://example.com&#34;</span>
curl -X DELETE <span class="s2">&#34;https://example.com&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="-a-指定ua">-A 指定UA</h3>
<p>指定UA（<code>User-Agent</code>）。curl 的默认用户代理字符串是（<code>curl/[version]</code>）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -A <span class="s1">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#39;</span> https://google.com
</code></pre></td></tr></table>
</div>
</div><p>也可以通过<code>-H</code>参数直接指定</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -H <span class="s1">&#39;User-Agent: php/1.0&#39;</span> https://google.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-b-发送cookies">-b 发送Cookies</h3>
<p>向服务器发送 Cookies。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -b <span class="s1">&#39;foo1=bar;foo2=bar2&#39;</span> https://google.com
</code></pre></td></tr></table>
</div>
</div><p>或者发送本地文件中的Cookies</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -b cookies.txt https://www.google.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-c-保存cookies">-c 保存Cookies</h3>
<p>将服务器设置的 Cookies 写入一个文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -c cookies.txt https://www.google.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-d-发送post数据体">-d 发送POST数据体</h3>
<p>用于发送 POST 请求的数据体。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -d<span class="s1">&#39;login=emma＆password=123&#39;</span> -X POST https://google.com/login
<span class="c1">#或者使用本地文件</span>
curl -d <span class="s1">&#39;@data.txt&#39;</span> https://google.com/login
</code></pre></td></tr></table>
</div>
</div><p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p>
<h3 id="-e-设置referer">-e 设置Referer</h3>
<p>设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -e <span class="s1">&#39;https://google.com?q=example&#39;</span> https://www.example.com
</code></pre></td></tr></table>
</div>
</div><p>可以通过<code>-H</code>参数直接添加标头<code>Referer</code>，达到同样效果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -H <span class="s1">&#39;Referer: https://google.com?q=example&#39;</span> https://www.example.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-f-上传文件">-F 上传文件</h3>
<p>向服务器上传二进制文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -F <span class="s1">&#39;file=@photo.png&#39;</span> https://google.com/profile
</code></pre></td></tr></table>
</div>
</div><p>指定 MIME 类型。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -F <span class="s1">&#39;file=@photo.png;type=image/png&#39;</span> https://google.com/profile
</code></pre></td></tr></table>
</div>
</div><h3 id="-h-指定http标头">-H 指定HTTP标头</h3>
<p>添加 HTTP 请求的标头。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -H <span class="s1">&#39;Accept-Language: en-US&#39;</span> -H <span class="s1">&#39;Secret-Message: xyzzy&#39;</span> https://google.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-i-打印http标头">-i 打印HTTP标头</h3>
<p>打印出服务器回应的 HTTP 标头。收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -i https://www.example.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-k-跳过ssl检测">-k 跳过SSL检测</h3>
<p>跳过 SSL 检测。不会检查服务器的 SSL 证书是否正确。</p>
<h3 id="-l-开启重定向">-L 开启重定向</h3>
<p>让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p>
<h3 id="-o-保存为文件">-o 保存为文件</h3>
<p>将服务器的回应保存成文件，等同于<code>wget</code>命令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -o example.html https://www.example.com
</code></pre></td></tr></table>
</div>
</div><h3 id="-u-basic-auth认证">-u Basic Auth认证</h3>
<p>用来设置服务器认证的用户名和密码。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -u <span class="s1">&#39;bob:12345&#39;</span> https://google.com/login
<span class="c1">#或</span>
curl https://bob:12345@google.com/login
</code></pre></td></tr></table>
</div>
</div><h3 id="-x-设置代理">-x 设置代理</h3>
<p>指定 HTTP 请求的代理。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -x socks5://user:passwd@proxy.com:8080 https://www.example.com
</code></pre></td></tr></table>
</div>
</div><p>如果没有指定代理协议，默认为 HTTP。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">curl -x user:passwd@proxy.com:8080 https://www.example.com
</code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>