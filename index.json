[{"categories":["学习日记"],"content":"curl是从服务器传输数据或向服务器传输数据的工具，熟悉其用法后，完全可以取代 Postman 这一类的图形界面工具。 ","date":"2020-11-07","objectID":"/posts/9058bdc8/:0:0","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"常规用法 模拟浏览器向网站发送请求curl \u003cURL\u003e,比如 curl \"https://www.bilibili.com\" ","date":"2020-11-07","objectID":"/posts/9058bdc8/:1:0","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"参数解释 ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:0","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-X 指定请求方法 指定 HTTP 请求的方法。RESTful API的四种方法: curl -X GET \"https://example.com\" curl -X POST \"https://example.com\" curl -X PUT \"https://example.com\" curl -X DELETE \"https://example.com\" ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:1","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-A 指定UA 指定UA（User-Agent）。curl 的默认用户代理字符串是（curl/[version]）。 curl -A 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36' https://google.com 也可以通过-H参数直接指定 curl -H 'User-Agent: php/1.0' https://google.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:2","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-b 发送Cookies 向服务器发送 Cookies。 curl -b 'foo1=bar;foo2=bar2' https://google.com 或者发送本地文件中的Cookies curl -b cookies.txt https://www.google.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:3","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-c 保存Cookies 将服务器设置的 Cookies 写入一个文件。 curl -c cookies.txt https://www.google.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:4","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-d 发送POST数据体 用于发送 POST 请求的数据体。 curl -d'login=emma＆password=123' -X POST https://google.com/login #或者使用本地文件 curl -d '@data.txt' https://google.com/login 使用-d参数以后，HTTP 请求会自动加上标头Content-Type : application/x-www-form-urlencoded。并且会自动将请求转为 POST 方法，因此可以省略-X POST。 ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:5","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-e 设置Referer 设置 HTTP 的标头Referer，表示请求的来源。 curl -e 'https://google.com?q=example' https://www.example.com 可以通过-H参数直接添加标头Referer，达到同样效果。 curl -H 'Referer: https://google.com?q=example' https://www.example.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:6","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-F 上传文件 向服务器上传二进制文件。 curl -F 'file=@photo.png' https://google.com/profile 指定 MIME 类型。 curl -F 'file=@photo.png;type=image/png' https://google.com/profile ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:7","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-H 指定HTTP标头 添加 HTTP 请求的标头。 curl -H 'Accept-Language: en-US' -H 'Secret-Message: xyzzy' https://google.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:8","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-i 打印HTTP标头 打印出服务器回应的 HTTP 标头。收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。 curl -i https://www.example.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:9","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-k 跳过SSL检测 跳过 SSL 检测。不会检查服务器的 SSL 证书是否正确。 ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:10","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-L 开启重定向 让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。 ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:11","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-o 保存为文件 将服务器的回应保存成文件，等同于wget命令。 curl -o example.html https://www.example.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:12","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-u Basic Auth认证 用来设置服务器认证的用户名和密码。 curl -u 'bob:12345' https://google.com/login #或 curl https://bob:12345@google.com/login ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:13","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-x 设置代理 指定 HTTP 请求的代理。 curl -x socks5://user:passwd@proxy.com:8080 https://www.example.com 如果没有指定代理协议，默认为 HTTP。 curl -x user:passwd@proxy.com:8080 https://www.example.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:14","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"之前用过Hexo写过博客，用过一个插件叫hexo-abbrlink，可以生成文章唯一永久链接(8位16进制的字符串)，Hugo有个slug参数，可以用C++写个小程序生成一串字符并填入来模拟这个功能。 这个实现方式只是通过生成8个0-15的随机数实现的，有概率会出现生成的字符重复的现象(只不过概率特别低)，不过其他方法我也不会啊，只能想到这种实现方式了(我太菜了)，就当作是练习C++的面向对象编程吧。 ","date":"2020-11-05","objectID":"/posts/16ea70f5/:0:0","tags":["C++"],"title":"C++实现生成abbrlink","uri":"/posts/16ea70f5/"},{"categories":["学习日记"],"content":"源代码 引入头文件 #include \u003ciostream\u003e#include \u003ccstdlib\u003e#include \u003cctime\u003eusing namespace std; 声明对象 class Abbrlink { private: int abbr[8]; public: void New() { int seed = (int)time(0); for (int i = 0; i \u003c 8; i++) { int bytes = -1; while ((bytes \u003c 0) || (bytes \u003e 15)) { seed--; srand(seed); bytes = rand() % 16; } abbr[i] = bytes; } } void Print() { for (int i = 0; i \u003c 8; i++) { cout \u003c\u003c hex \u003c\u003c abbr[i]; } cout \u003c\u003c endl; } }; 主函数 int main() { Abbrlink abbr; abbr.New(); abbr.Print(); return 0; } ","date":"2020-11-05","objectID":"/posts/16ea70f5/:1:0","tags":["C++"],"title":"C++实现生成abbrlink","uri":"/posts/16ea70f5/"},{"categories":["测试"],"content":"HelloWorld 你好,这是一篇测试文章 前言 文本测试 斜体、粗体、斜体+粗体、删除线 链接 分割线: ","date":"2020-11-03","objectID":"/posts/6de19a38/:1:0","tags":["测试"],"title":"测试文章","uri":"/posts/6de19a38/"},{"categories":["测试"],"content":"图片测试 netdate\" netdate ","date":"2020-11-03","objectID":"/posts/6de19a38/:1:1","tags":["测试"],"title":"测试文章","uri":"/posts/6de19a38/"},{"categories":["测试"],"content":"代码测试 行内代码code 代码块: int main() { cout \u003c\u003c \"Hello World!\" \u003c\u003c endl; return 0; } ","date":"2020-11-03","objectID":"/posts/6de19a38/:1:2","tags":["测试"],"title":"测试文章","uri":"/posts/6de19a38/"},{"categories":["测试"],"content":"表格 一 二 三 1 2 3 4 5 6 7 8 9 ","date":"2020-11-03","objectID":"/posts/6de19a38/:1:3","tags":["测试"],"title":"测试文章","uri":"/posts/6de19a38/"},{"categories":["测试"],"content":"其他 todo1 todo2 ","date":"2020-11-03","objectID":"/posts/6de19a38/:1:4","tags":["测试"],"title":"测试文章","uri":"/posts/6de19a38/"},{"categories":null,"content":" 使用curl进行API测试 Unipus自动刷新脚本 ","date":"0001-01-01","objectID":"/todo/:0:0","tags":null,"title":"Todo","uri":"/todo/"},{"categories":null,"content":" 首先，欢迎您来到我的博客，然后，不知道该说什么了。来个自我介绍吧。 在某大学就读的废物一个，(我是废物！)，博客不会经常更新，想起了就更。(废物也写不出什么高质量的内容的吧(手动卑微))。 本博客使用Hugo强力驱动，使用LoveIt主题，在此对这两个项目表示感谢。 ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"}]