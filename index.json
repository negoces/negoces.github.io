[{"categories":["学习日记"],"content":"实现思路 假设现在有个三节点的链表,每个节点具有两个指针: prev —— 上一节点地址 next —— 下一节点地址 ","date":"2021-01-09","objectID":"/posts/53e2617f/:1:0","tags":["C++"],"title":"C语言链表实现","uri":"/posts/53e2617f/"},{"categories":["学习日记"],"content":"插入节点 注:虚线表示删除,D为插入的节点 按照这个图的操作应该是: C-\u003eprev = D D-\u003enext = C D-\u003eprev = B B-\u003enext = D 假设此时的链表传入的table是B,插入的node为D,那么C语言代码为: table-\u003enext-\u003eprev = node node-\u003enext = table-\u003enext node-\u003eprev = table table-\u003enext = node ","date":"2021-01-09","objectID":"/posts/53e2617f/:1:1","tags":["C++"],"title":"C语言链表实现","uri":"/posts/53e2617f/"},{"categories":["学习日记"],"content":"删除节点 注:虚线表示删除,B为要删除的节点 按照这个图的操作应该是: A-\u003enext = C C-\u003eprev = A 假设此时的链表传入的table是B,那么C语言代码为: table-\u003eprev-\u003enext = table-\u003enext; table-\u003enext-\u003eprev = table-\u003eprev; free(table) ","date":"2021-01-09","objectID":"/posts/53e2617f/:1:2","tags":["C++"],"title":"C语言链表实现","uri":"/posts/53e2617f/"},{"categories":["学习日记"],"content":"代码实现 #include \u003cstdio.h\u003e#include \u003cstdlib.h\u003e typedef struct node { int id; //节点ID struct node *prev; //上节点地址 struct node *next; //下节点地址 } node; node *createNode(int uid); //创建(节点ID) void addNode(node *table, int uid, int newUid); //增(链表,节点UID,新建节点UID)[在UID节点后插入] void delNode(node *table, int uid); //删(链表,节点UID) void printTable(node *table); //打印(链表) int main() { node *table = createNode(0); addNode(table, 0, 1); addNode(table, 1, 2); addNode(table, 2, 3); addNode(table, 3, 4); addNode(table, 4, 5); addNode(table, 5, 6); delNode(table, 1); delNode(table, 2); delNode(table, 5); printTable(table); exit(0); } node *createNode(int uid) { node *newTable = (node *)malloc(sizeof(node)); newTable-\u003eid = uid; newTable-\u003eprev = NULL; newTable-\u003enext = NULL; return newTable; } void addNode(node *table, int uid, int newUid) { while (1) { if (table == NULL) { //未查找到相应节点 printf(\"Node %d not find!\\n\", uid); return; } if (table-\u003eid == newUid) { //节点ID已存在 printf(\"Node %d exist!\\n\", newUid); return; } if (table-\u003eid == uid) { //查找到相应节点 node *newTable = (node *)malloc(sizeof(node)); if (table-\u003enext != NULL) { //如果存在下一节点 //建立当前与下一链表的联系 newTable-\u003enext = table-\u003enext; table-\u003enext-\u003eprev = newTable; } //建立当前与上一链表的联系 table-\u003enext = newTable; newTable-\u003eprev = table; //写入当前链表ID newTable-\u003eid = newUid; return; } table = table-\u003enext; } } void delNode(node *table, int uid) { while (1) { if (table == NULL) { //未查找到相应节点 printf(\"Node %d not find!\\n\", uid); return; } if (table-\u003eid == uid) { //查找到相应节点 if (table-\u003enext != NULL) { //如果存在下一节点 //建立上一节点与下一节点的连接 table-\u003eprev-\u003enext = table-\u003enext; table-\u003enext-\u003eprev = table-\u003eprev; } else { //如果不存在下一节点 //设置上一节点的next为NULL table-\u003eprev-\u003enext = NULL; } //释放当前节点 free(table); return; } table = table-\u003enext; } } void printTable(node *table) { while (table != NULL) { printf(\"Node: %d\\n\", table-\u003eid); table = table-\u003enext; } return; } ","date":"2021-01-09","objectID":"/posts/53e2617f/:2:0","tags":["C++"],"title":"C语言链表实现","uri":"/posts/53e2617f/"},{"categories":["学习日记"],"content":"iptables是运行在用户空间的应用软件，通过控制Linux内核netfilter模块，来管理网络数据包的处理和转发。在大部分Linux发行版中，可以通过手册页或man iptables获取用户手册。 iptables、ip6tables等都使用Xtables框架。存在“表（tables）”、“链（chain）”和“规则（rules）”三个层面。 ","date":"2020-12-31","objectID":"/posts/16e870f5/:0:0","tags":["iptables","Linux"],"title":"iptables详解","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"数据包走向 ","date":"2020-12-31","objectID":"/posts/16e870f5/:1:0","tags":["iptables","Linux"],"title":"iptables详解","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"表 ","date":"2020-12-31","objectID":"/posts/16e870f5/:2:0","tags":["iptables","Linux"],"title":"iptables详解","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"filter表 filter表是默认的表，如果不指明表则使用此表。其通常用于过滤数据包。其中的内建链包括： INPUT，输入链。发往本机的数据包通过此链。 OUTPUT，输出链。从本机发出的数据包通过此链。 FORWARD，转发链。本机转发的数据包通过此链。 ","date":"2020-12-31","objectID":"/posts/16e870f5/:2:1","tags":["iptables","Linux"],"title":"iptables详解","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"nat表 nat表如其名，用于地址转换操作。其中的内建链包括： PREROUTING，路由前链，在处理路由规则前通过此链，通常用于目的地址转换（DNAT）。 POSTROUTING，路由后链，完成路由规则后通过此链，通常用于源地址转换（SNAT）。 OUTPUT，输出链，类似PREROUTING，但是处理本机发出的数据包。 ","date":"2020-12-31","objectID":"/posts/16e870f5/:2:2","tags":["iptables","Linux"],"title":"iptables详解","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"mangle表 mangle表用于处理数据包。其和nat表的主要区别在于，nat表侧重连接而mangle表侧重每一个数据包。[4]其中内建链列表如下。 PREROUTING OUTPUT FORWARD INPUT POSTROUTING ","date":"2020-12-31","objectID":"/posts/16e870f5/:2:3","tags":["iptables","Linux"],"title":"iptables详解","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"raw表 raw表用于处理异常，有如下两个内建链： PREROUTING OUTPUT ","date":"2020-12-31","objectID":"/posts/16e870f5/:2:4","tags":["iptables","Linux"],"title":"iptables详解","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"curl是从服务器传输数据或向服务器传输数据的工具，熟悉其用法后，完全可以取代 Postman 这一类的图形界面工具。 ","date":"2020-11-07","objectID":"/posts/9058bdc8/:0:0","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"常规用法 模拟浏览器向网站发送请求curl \u003cURL\u003e,比如 curl \"https://www.bilibili.com\" ","date":"2020-11-07","objectID":"/posts/9058bdc8/:1:0","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"参数解释 ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:0","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-X 指定请求方法 指定 HTTP 请求的方法。RESTful API的四种方法: curl -X GET \"https://example.com\" curl -X POST \"https://example.com\" curl -X PUT \"https://example.com\" curl -X DELETE \"https://example.com\" ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:1","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-A 指定UA 指定UA（User-Agent）。curl 的默认用户代理字符串是（curl/[version]）。 curl -A 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36' https://google.com 也可以通过-H参数直接指定 curl -H 'User-Agent: php/1.0' https://google.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:2","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-b 发送Cookies 向服务器发送 Cookies。 curl -b 'foo1=bar;foo2=bar2' https://google.com 或者发送本地文件中的Cookies curl -b cookies.txt https://www.google.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:3","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-c 保存Cookies 将服务器设置的 Cookies 写入一个文件。 curl -c cookies.txt https://www.google.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:4","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-d 发送POST数据体 用于发送 POST 请求的数据体。 curl -d'login=emma＆password=123' -X POST https://google.com/login #或者使用本地文件 curl -d '@data.txt' https://google.com/login 使用-d参数以后，HTTP 请求会自动加上标头Content-Type : application/x-www-form-urlencoded。并且会自动将请求转为 POST 方法，因此可以省略-X POST。 ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:5","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-e 设置Referer 设置 HTTP 的标头Referer，表示请求的来源。 curl -e 'https://google.com?q=example' https://www.example.com 可以通过-H参数直接添加标头Referer，达到同样效果。 curl -H 'Referer: https://google.com?q=example' https://www.example.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:6","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-F 上传文件 向服务器上传二进制文件。 curl -F 'file=@photo.png' https://google.com/profile 指定 MIME 类型。 curl -F 'file=@photo.png;type=image/png' https://google.com/profile ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:7","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-H 指定HTTP标头 添加 HTTP 请求的标头。 curl -H 'Accept-Language: en-US' -H 'Secret-Message: xyzzy' https://google.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:8","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-i 打印HTTP标头 打印出服务器回应的 HTTP 标头。收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。 curl -i https://www.example.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:9","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-k 跳过SSL检测 跳过 SSL 检测。不会检查服务器的 SSL 证书是否正确。 ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:10","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-L 开启重定向 让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。 ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:11","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-o 保存为文件 将服务器的回应保存成文件，等同于wget命令。 curl -o example.html https://www.example.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:12","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-u Basic Auth认证 用来设置服务器认证的用户名和密码。 curl -u 'bob:12345' https://google.com/login #或 curl https://bob:12345@google.com/login ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:13","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-x 设置代理 指定 HTTP 请求的代理。 curl -x socks5://user:passwd@proxy.com:8080 https://www.example.com 如果没有指定代理协议，默认为 HTTP。 curl -x user:passwd@proxy.com:8080 https://www.example.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:14","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"之前用过Hexo写过博客，用过一个插件叫hexo-abbrlink，可以生成文章唯一永久链接(8位16进制的字符串)，Hugo有个slug参数，可以用C++写个小程序生成一串字符并填入来模拟这个功能。 这个实现方式只是通过生成8个0-15的随机数实现的，有概率会出现生成的字符重复的现象(只不过概率特别低)，不过其他方法我也不会啊，只能想到这种实现方式了(我太菜了)，就当作是练习C++的面向对象编程吧。 ","date":"2020-11-05","objectID":"/posts/16ea70f5/:0:0","tags":["C++"],"title":"C++实现生成abbrlink","uri":"/posts/16ea70f5/"},{"categories":["学习日记"],"content":"源代码 引入头文件 #include \u003ciostream\u003e#include \u003ccstdlib\u003e#include \u003cctime\u003eusing namespace std; 声明对象 class Abbrlink { private: int abbr[8]; public: void New() { int seed = (int)time(0); for (int i = 0; i \u003c 8; i++) { int bytes = -1; while ((bytes \u003c 0) || (bytes \u003e 15)) { seed--; srand(seed); bytes = rand() % 16; } abbr[i] = bytes; } } void Print() { for (int i = 0; i \u003c 8; i++) { cout \u003c\u003c hex \u003c\u003c abbr[i]; } cout \u003c\u003c endl; } }; 主函数 int main() { Abbrlink abbr; abbr.New(); abbr.Print(); return 0; } ","date":"2020-11-05","objectID":"/posts/16ea70f5/:1:0","tags":["C++"],"title":"C++实现生成abbrlink","uri":"/posts/16ea70f5/"},{"categories":null,"content":" Arduino入门 计算机引导的进化之路 ","date":"0001-01-01","objectID":"/todo/:0:0","tags":null,"title":"Todo","uri":"/todo/"},{"categories":null,"content":"关于网站 首先，欢迎您来到我的博客，至于我为什么会搭建这个博客，我引用一下主题作者的话: 人最重要的特点是会思考，写博客的初衷是保存思维的电子快照。 当然各种文档工具亦或是简单的文本编辑器也能随时记录点滴， 选择建个人网站无非是想满足技术爱好者的偏执。—— Dillon 因为学业繁忙(其实就是懒)，博客可能长年不更新，所以部分内容可能会过时。 ","date":"0001-01-01","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"关于作者 ▇▇岁，是学生(手动狗头) 💻 技术宅，想要探索关于计算机的一切 🤪 拖延症患者，导致想学的东西一直没有学完 ","date":"0001-01-01","objectID":"/about/:2:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"版权问题 除特殊说明外，本站所有内容均受CC BY-NC-SA 4.0保护。 许可协议条款摘要 署名 — 您必须给出适当的署名，提供指向本许可协议的链接，同时标明是否（对原始作品）作了修改。您可以用任何合理的方式来署名，但是不得以任何方式暗示许可人为您或您的使用背书。 非商业性使用 — 您不得将本作品用于商业目的。 相同方式共享 — 如果您再混合、转换或者基于本作品进行创作，您必须基于与原先许可协议相同的许可协议 分发您贡献的作品。 没有附加限制 — 您不得适用法律术语或者 技术措施 从而限制其他人做许可协议允许的事情。 ","date":"0001-01-01","objectID":"/about/:3:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":" 人最重要的特点是会思考，写博客的初衷是保存思维的电子快照。 当然各种文档工具亦或是简单的文本编辑器也能随时记录点滴， 选择建个人网站无非是想满足技术爱好者的偏执。—— Dillon 旧社会已经过去了，但是人们却开始给自己的大脑裹上小脚。 ","date":"0001-01-01","objectID":"/quot/:0:0","tags":null,"title":"凡人名言","uri":"/quot/"}]