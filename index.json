[{"categories":["学习日记"],"content":"准备 所需材料: 树莓派*1 SD卡*1 树莓派系统镜像*1 PC*1 Etcher*1 活人*1 ","date":"2021-03-03","objectID":"/posts/04c00a0d/:1:0","tags":["RaspberryPi"],"title":"树莓派4入门指南(无显示器)","uri":"/posts/04c00a0d/"},{"categories":["学习日记"],"content":"制作带有系统的SD卡 打开Etcher，点击最左侧的Flash from file，选择你所下载的树莓派镜像，点击中间的Select target，勾选你的SD卡，点击Select，点击最右边的Flash等待烧录完即可。 烧录完之后系统里面会多出一个命名为boot的分区，在此分区里面创建一个空白的名为ssh的文件以开启ssh远程访问。 ","date":"2021-03-03","objectID":"/posts/04c00a0d/:2:0","tags":["RaspberryPi"],"title":"树莓派4入门指南(无显示器)","uri":"/posts/04c00a0d/"},{"categories":["学习日记"],"content":"装配你的树莓派 插上SD卡，装上散热马甲(如果有的话)，插上网线，插上电源，静待开机 ","date":"2021-03-03","objectID":"/posts/04c00a0d/:3:0","tags":["RaspberryPi"],"title":"树莓派4入门指南(无显示器)","uri":"/posts/04c00a0d/"},{"categories":["学习日记"],"content":"连接你的树莓派 前往你的路由器查看你的树莓派IP，一般主机名就是raspberrypi，我的树莓派分配到的IP是10.0.0.181，用ssh连接(默认用户名:pi密码:raspberry) ssh pi@10.0.0.181 # 进去之后改一下密码 passwd # 第一个输入当前密码，第二个和第三个是新密码 ","date":"2021-03-03","objectID":"/posts/04c00a0d/:4:0","tags":["RaspberryPi"],"title":"树莓派4入门指南(无显示器)","uri":"/posts/04c00a0d/"},{"categories":["学习日记"],"content":"设置镜像并更新 我的配置用的是testing更新通道，软件比较新但也可能出现bug $ sudo nano /etc/apt/sources.list # 将文件修改如下 # /etc/apt/sources.list deb https://mirrors.sjtug.sjtu.edu.cn/debian testing main contrib non-free deb https://mirrors.sjtug.sjtu.edu.cn/debian testing-updates main contrib non-free deb https://mirrors.sjtug.sjtu.edu.cn/debian-security/ stable/updates main contrib non-free deb-src https://mirrors.sjtug.sjtu.edu.cn/debian testing main contrib non-free deb-src https://mirrors.sjtug.sjtu.edu.cn/debian testing-updates main contrib non-free deb-src https://mirrors.sjtug.sjtu.edu.cn/debian-security/ stable/updates main contrib non-free $ sudo nano /etc/apt/sources.list.d/raspi.list # 将文件修改如下 # /etc/apt/sources.list.d/raspi.list deb https://mirrors.sjtug.sjtu.edu.cn/raspberrypi/debian/ buster main deb-src https://mirrors.sjtug.sjtu.edu.cn/raspberrypi/debian/ buster main sudo apt update sudo apt full-upgrade ","date":"2021-03-03","objectID":"/posts/04c00a0d/:5:0","tags":["RaspberryPi"],"title":"树莓派4入门指南(无显示器)","uri":"/posts/04c00a0d/"},{"categories":["学习日记"],"content":"设置中文 $ sudo nano /etc/environment # 将文件修改如下 LANG=zh_CN.UTF-8 LANGUAGE=\"zh_CN:zh:en_US:en\" 然后重启 然后，Enjoy youdelf! ","date":"2021-03-03","objectID":"/posts/04c00a0d/:6:0","tags":["RaspberryPi"],"title":"树莓派4入门指南(无显示器)","uri":"/posts/04c00a0d/"},{"categories":["杂谈"],"content":"Linux 因为其稳定和安全被不少服务器所使用，我也因为偶然接触到了 Linux，发现了它的方便，甚至将它作为日常系统使用。 ","date":"2021-01-25","objectID":"/posts/2109a7df/:0:0","tags":["Linux"],"title":"Linux ane Me","uri":"/posts/2109a7df/"},{"categories":["杂谈"],"content":"第一次接触 Linux 我一个接触到的 Linux 叫Slax，我也不清楚它算不算一个发行版本，总之它是基于 Debian 的。 当时我高一，上的是封闭式学校，不给带电子产品，一周下来唯一能接触电子产品的时候便是微机课。因为平时的高强度学习，微机课一般都被我们当作放松时间(虽然要过会考)，便想着通过机房的电脑玩些什么。然而学校的老师们早就想到了这一点，通过路由切断了网络，安装了极域电子教室对 USB 进行管控(虽然后期通过注册表找到了卸载密码)。我曾因为重装家里面电脑的系统在 U 盘写了个老毛桃 PE，于是在微机室的电脑上启动试了一下发现可以启动。但是 PE 在运行时将系统加载到内存上，安装的软件关机之后就没有了。于是我在万恶的百度(当时还不会上谷歌)上面搜索\"口袋系统\"，我便在搜索结果里面看到了 Slax。 当时没管那么多，下载下来解压到 U 盘，执行安装脚本。进入系统之后看到了 KDE 桌面和浏览器，那时候只会上网，不知道怎么装软件。 之后官网更新了 Slax9 桌面环境变了，变成了 Slax 自己开发的桌面，但是因为软件太少我也从官网学会了用apt(debian 系 Linux 的包管理器)指令来安装软件，此时的我还没接触到镜像(mirrors)这一概念，看着十几 KB/s 的速度在那傻傻的等软件下好。 虽然当时没有通过 Slax 接触到 Linux 很深层的东西，但是也接触到了 Linux 的部分指令。 ","date":"2021-01-25","objectID":"/posts/2109a7df/:1:0","tags":["Linux"],"title":"Linux ane Me","uri":"/posts/2109a7df/"},{"categories":["杂谈"],"content":"再次接触 过了些时候，忽然不知道在哪看到了国产 Linux(Deepin) 然后就想去试一下，安装完之后被那华丽的动画惊艳了(那时配置不好，有点卡)，体验了一把，确实不错，但是最后被无线网卡的驱动给劝退了(还是因为当时不懂)。之后又看到了网上 Cyborg Hawk Linux(目前好像停止维护了) 的界面，觉得挺帅又去尝试了一下，发现自己不会用，卸载！ Cyborg Hawk Linux ","date":"2021-01-25","objectID":"/posts/2109a7df/:2:0","tags":["Linux"],"title":"Linux ane Me","uri":"/posts/2109a7df/"},{"categories":["杂谈"],"content":"深入接触 真正的接触 Linux 是我买了个树莓派，其系统 Raspbian 基于 Debian，也是因为树莓派让我接触到了 mirrors(镜像)这一概念，看着 9M/s 的下载速度真舒服，后来尝试这在树莓派上面搭建 Wordpress，出于树莓派的性能有限便抛弃了桌面环境使用指令对系统进行操作，刚开始是用 Xshell 连接到树莓派的，后来因为重装了系统懒得下载了便直接使用了 Windows10 自带的 ssh(发现 ssh 真香)。之后又不满足在内网里面搭建博客又在腾讯云买了个云服务器(用的是 Ubuntu Server)而且还搞了备案(因为服务器续费太贵且用不到便退还了服务器并撤销了备案)，然后又折腾了很长时间的 Nginx 和 HTTPS，最后发现服务器带宽太低了就 1Mbps 访问速度非常慢就没搞了。服务器买了一年放在那也是闲着就尝试着搭建了 Minecraft 服务器、内网穿透等等东西。 Raspbian 到此为止我学会了一些简单的指令，比如删除、复制、移动、新建文件夹、使用 nano 编辑文本等。 其实对 Linux 了解最为深入的还是买了笔记本然后在笔记本上装了个 Linux，刚开始装的是 Ubuntu 装了个 Geany 作为 C 语言学习环境，顺便装了个 JRE 用来玩我的世界。结果发现 Ubuntu 有 BUG，显卡驱动有问题，有时候还管不了机，正好看见这样一篇文章《人生苦短，我选 Manjaro》然后就尝试了一下 Manjaro，说实话真的方便安装驱动直接用mhwd指令就能完成。 Manjaro 目前 Manjaro GNOME 是我日常使用的系统，装了 VSCode 还有一些其他 IDE，众所周知，Linux 没用 QQ，我用的是用 yay 装的 com.qq.tim.spark 虽然托盘独立了看起来有点难受，但是使用起来并没有什么大问题。 ","date":"2021-01-25","objectID":"/posts/2109a7df/:3:0","tags":["Linux"],"title":"Linux ane Me","uri":"/posts/2109a7df/"},{"categories":["学习日记"],"content":"iptables 是 Linux 系统上常用的命令行工具，主要用来配置防火墙。运用 iptables 我们能够实现流量的转发、拦截等操作 ","date":"2021-01-18","objectID":"/posts/16e870f5/:0:0","tags":["iptables","Linux"],"title":"iptables从入门到放弃","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"iptables 是什么 iptables 是运行在用户空间的应用软件，通过控制 Linux 内核 netfilter 模块，来管理网络数据包的处理和转发。在大部分 Linux 发行版中，可以通过手册页或man iptables获取用户手册。 netfilter是什么(摘自Wiki) Netfilter，在 Linux 内核中的一个软件框架，用于管理网络数据包。不仅具有网络地址转换（NAT）的功能，也具备数据包内容修改、以及数据包过滤等防火墙功能。利用运作于用户空间的应用软件，如 iptables、ebtables 和 arptables 等，来控制 Netfilter，系统管理者可以管理通过 Linux 操作系统的各种网络数据包。1990 年代，Netfilter 在 Linux 2.3.15 版时进入 Linux 内核，正式应用于 Linux 2.4 版。 简而言之就是 Netfilter 的上层程序，用户通过 iptables 指定规则，由 Netfilter 来执行，实现流量的拦截、转发等操作。 ","date":"2021-01-18","objectID":"/posts/16e870f5/:1:0","tags":["iptables","Linux"],"title":"iptables从入门到放弃","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"iptables 的链(chain) iptables 中有 5 个链，分别与 netfilter 中的 hook 对应 PREROUTING - 对应NF_IP_PRE_ROUTING,任何进入网络堆栈的流量都会触发此 hook。 INPUT - 对应NF_IP_LOCAL_IN，如果数据包发送到本地系统，则在路由传入数据包之后，将触发此 hook。 FORWARD - 对应NF_IP_FORWARD，如果该数据包转发到另一台主机，则在路由输入数据包之后将触发此 hook。 OUTPUT - 对应NF_IP_LOCAL_OUT，由本地的出栈流量触发。 POSTROUTING - 对应NF_IP_POST_ROUTING，任何传出的流量都将触发此 hook。 数据包走向: 目的地址为本机的传入流量: -\u003e PREROUTING -\u003e INPUT 目的地址为其他主机的传入流量: -\u003e PREROUTING -\u003e FORWARD -\u003e POSTROUTING -\u003e 本机出站流量: OUTPUT -\u003e POSTROUTING -\u003e ","date":"2021-01-18","objectID":"/posts/16e870f5/:2:0","tags":["iptables","Linux"],"title":"iptables从入门到放弃","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"iptables 的表(tables) ","date":"2021-01-18","objectID":"/posts/16e870f5/:3:0","tags":["iptables","Linux"],"title":"iptables从入门到放弃","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"filter 表 filter 表是默认的表，如果不指明表则使用此表。其通常用于过滤数据包。其中的内建链包括： INPUT,OUTPUT,FORWARD ","date":"2021-01-18","objectID":"/posts/16e870f5/:3:1","tags":["iptables","Linux"],"title":"iptables从入门到放弃","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"nat 表 nat 表如其名，用于地址转换操作。其中的内建链包括： PREROUTING,POSTROUTING,OUTPUT ","date":"2021-01-18","objectID":"/posts/16e870f5/:3:2","tags":["iptables","Linux"],"title":"iptables从入门到放弃","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"mangle 表 mangle 表用于处理数据包。其和 nat 表的主要区别在于，nat 表侧重连接而 mangle 表侧重每一个数据包。其中内建链列表如下。 PREROUTING,OUTPUT,FORWARD,INPUT,POSTROUTING ","date":"2021-01-18","objectID":"/posts/16e870f5/:3:3","tags":["iptables","Linux"],"title":"iptables从入门到放弃","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"raw 表 raw 表用于处理异常，有如下两个内建链： PREROUTING,OUTPUT 流量流向 ","date":"2021-01-18","objectID":"/posts/16e870f5/:3:4","tags":["iptables","Linux"],"title":"iptables从入门到放弃","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"iptables 的规则(rules) 根据规则匹配条件来尝试匹配报文，一旦匹配成功，就由规则定义的处理动作做出处理。 ","date":"2021-01-18","objectID":"/posts/16e870f5/:4:0","tags":["iptables","Linux"],"title":"iptables从入门到放弃","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"匹配条件 基本匹配条件：源地址，目标地址，传输层协议 扩展匹配条件：由扩展模块定义 ","date":"2021-01-18","objectID":"/posts/16e870f5/:4:1","tags":["iptables","Linux"],"title":"iptables从入门到放弃","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"处理动作 基本处理动作：ACCEPT、DROP 扩展处理动作：REJECT、RETURN、LOG、REDIRECT ","date":"2021-01-18","objectID":"/posts/16e870f5/:4:2","tags":["iptables","Linux"],"title":"iptables从入门到放弃","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"iptables的链：内置链和自定义链 内置链：对应于hook functions 自定义链接：用于内置链的扩展和补充，可实现更灵活的规则管理机制；自定义链可以设置完之后，添加到内置链中，方便管理 待续… (iptables的命令操作) ","date":"2021-01-18","objectID":"/posts/16e870f5/:4:3","tags":["iptables","Linux"],"title":"iptables从入门到放弃","uri":"/posts/16e870f5/"},{"categories":["学习日记"],"content":"实现思路 假设现在有个三节点的链表,每个节点具有两个指针: prev —— 上一节点地址 next —— 下一节点地址 ","date":"2021-01-09","objectID":"/posts/53e2617f/:1:0","tags":["C++"],"title":"C语言链表实现","uri":"/posts/53e2617f/"},{"categories":["学习日记"],"content":"插入节点 注:虚线表示删除,D为插入的节点 按照这个图的操作应该是: C-\u003eprev = D D-\u003enext = C D-\u003eprev = B B-\u003enext = D 假设此时的链表传入的table是B,插入的node为D,那么C语言代码为: table-\u003enext-\u003eprev = node node-\u003enext = table-\u003enext node-\u003eprev = table table-\u003enext = node ","date":"2021-01-09","objectID":"/posts/53e2617f/:1:1","tags":["C++"],"title":"C语言链表实现","uri":"/posts/53e2617f/"},{"categories":["学习日记"],"content":"删除节点 注:虚线表示删除,B为要删除的节点 按照这个图的操作应该是: A-\u003enext = C C-\u003eprev = A 假设此时的链表传入的table是B,那么C语言代码为: table-\u003eprev-\u003enext = table-\u003enext; table-\u003enext-\u003eprev = table-\u003eprev; free(table) ","date":"2021-01-09","objectID":"/posts/53e2617f/:1:2","tags":["C++"],"title":"C语言链表实现","uri":"/posts/53e2617f/"},{"categories":["学习日记"],"content":"代码实现 #include \u003cstdio.h\u003e#include \u003cstdlib.h\u003e typedef struct node { int id; //节点ID struct node *prev; //上节点地址 struct node *next; //下节点地址 } node; node *createNode(int uid); //创建(节点ID) void addNode(node *table, int uid, int newUid); //增(链表,节点UID,新建节点UID)[在UID节点后插入] void delNode(node *table, int uid); //删(链表,节点UID) void printTable(node *table); //打印(链表) int main() { node *table = createNode(0); addNode(table, 0, 1); addNode(table, 1, 2); addNode(table, 2, 3); addNode(table, 3, 4); addNode(table, 4, 5); addNode(table, 5, 6); delNode(table, 1); delNode(table, 2); delNode(table, 5); printTable(table); exit(0); } node *createNode(int uid) { node *newTable = (node *)malloc(sizeof(node)); newTable-\u003eid = uid; newTable-\u003eprev = NULL; newTable-\u003enext = NULL; return newTable; } void addNode(node *table, int uid, int newUid) { while (1) { if (table == NULL) { //未查找到相应节点 printf(\"Node %d not find!\\n\", uid); return; } if (table-\u003eid == newUid) { //节点ID已存在 printf(\"Node %d exist!\\n\", newUid); return; } if (table-\u003eid == uid) { //查找到相应节点 node *newTable = (node *)malloc(sizeof(node)); if (table-\u003enext != NULL) { //如果存在下一节点 //建立当前与下一链表的联系 newTable-\u003enext = table-\u003enext; table-\u003enext-\u003eprev = newTable; } //建立当前与上一链表的联系 table-\u003enext = newTable; newTable-\u003eprev = table; //写入当前链表ID newTable-\u003eid = newUid; return; } table = table-\u003enext; } } void delNode(node *table, int uid) { while (1) { if (table == NULL) { //未查找到相应节点 printf(\"Node %d not find!\\n\", uid); return; } if (table-\u003eid == uid) { //查找到相应节点 if (table-\u003enext != NULL) { //如果存在下一节点 //建立上一节点与下一节点的连接 table-\u003eprev-\u003enext = table-\u003enext; table-\u003enext-\u003eprev = table-\u003eprev; } else { //如果不存在下一节点 //设置上一节点的next为NULL table-\u003eprev-\u003enext = NULL; } //释放当前节点 free(table); return; } table = table-\u003enext; } } void printTable(node *table) { while (table != NULL) { printf(\"Node: %d\\n\", table-\u003eid); table = table-\u003enext; } return; } ","date":"2021-01-09","objectID":"/posts/53e2617f/:2:0","tags":["C++"],"title":"C语言链表实现","uri":"/posts/53e2617f/"},{"categories":["学习日记"],"content":"curl是从服务器传输数据或向服务器传输数据的工具，熟悉其用法后，完全可以取代 Postman 这一类的图形界面工具。 ","date":"2020-11-07","objectID":"/posts/9058bdc8/:0:0","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"常规用法 模拟浏览器向网站发送请求curl \u003cURL\u003e,比如 curl \"https://www.bilibili.com\" ","date":"2020-11-07","objectID":"/posts/9058bdc8/:1:0","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"参数解释 ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:0","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-X 指定请求方法 指定 HTTP 请求的方法。RESTful API的四种方法: curl -X GET \"https://example.com\" curl -X POST \"https://example.com\" curl -X PUT \"https://example.com\" curl -X DELETE \"https://example.com\" ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:1","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-A 指定UA 指定UA（User-Agent）。curl 的默认用户代理字符串是（curl/[version]）。 curl -A 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36' https://google.com 也可以通过-H参数直接指定 curl -H 'User-Agent: php/1.0' https://google.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:2","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-b 发送Cookies 向服务器发送 Cookies。 curl -b 'foo1=bar;foo2=bar2' https://google.com 或者发送本地文件中的Cookies curl -b cookies.txt https://www.google.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:3","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-c 保存Cookies 将服务器设置的 Cookies 写入一个文件。 curl -c cookies.txt https://www.google.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:4","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-d 发送POST数据体 用于发送 POST 请求的数据体。 curl -d'login=emma＆password=123' -X POST https://google.com/login #或者使用本地文件 curl -d '@data.txt' https://google.com/login 使用-d参数以后，HTTP 请求会自动加上标头Content-Type : application/x-www-form-urlencoded。并且会自动将请求转为 POST 方法，因此可以省略-X POST。 ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:5","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-e 设置Referer 设置 HTTP 的标头Referer，表示请求的来源。 curl -e 'https://google.com?q=example' https://www.example.com 可以通过-H参数直接添加标头Referer，达到同样效果。 curl -H 'Referer: https://google.com?q=example' https://www.example.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:6","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-F 上传文件 向服务器上传二进制文件。 curl -F 'file=@photo.png' https://google.com/profile 指定 MIME 类型。 curl -F 'file=@photo.png;type=image/png' https://google.com/profile ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:7","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-H 指定HTTP标头 添加 HTTP 请求的标头。 curl -H 'Accept-Language: en-US' -H 'Secret-Message: xyzzy' https://google.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:8","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-i 打印HTTP标头 打印出服务器回应的 HTTP 标头。收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。 curl -i https://www.example.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:9","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-k 跳过SSL检测 跳过 SSL 检测。不会检查服务器的 SSL 证书是否正确。 ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:10","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-L 开启重定向 让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。 ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:11","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-o 保存为文件 将服务器的回应保存成文件，等同于wget命令。 curl -o example.html https://www.example.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:12","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-u Basic Auth认证 用来设置服务器认证的用户名和密码。 curl -u 'bob:12345' https://google.com/login #或 curl https://bob:12345@google.com/login ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:13","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"-x 设置代理 指定 HTTP 请求的代理。 curl -x socks5://user:passwd@proxy.com:8080 https://www.example.com 如果没有指定代理协议，默认为 HTTP。 curl -x user:passwd@proxy.com:8080 https://www.example.com ","date":"2020-11-07","objectID":"/posts/9058bdc8/:2:14","tags":["curl","Linux"],"title":"使用curl测试API","uri":"/posts/9058bdc8/"},{"categories":["学习日记"],"content":"之前用过Hexo写过博客，用过一个插件叫hexo-abbrlink，可以生成文章唯一永久链接(8位16进制的字符串)，Hugo有个slug参数，可以用C++写个小程序生成一串字符并填入来模拟这个功能。 这个实现方式只是通过生成8个0-15的随机数实现的，有概率会出现生成的字符重复的现象(只不过概率特别低)，不过其他方法我也不会啊，只能想到这种实现方式了(我太菜了)，就当作是练习C++的面向对象编程吧。 ","date":"2020-11-05","objectID":"/posts/16ea70f5/:0:0","tags":["C++"],"title":"C++实现生成abbrlink","uri":"/posts/16ea70f5/"},{"categories":["学习日记"],"content":"源代码 引入头文件 #include \u003ciostream\u003e#include \u003ccstdlib\u003e#include \u003cctime\u003eusing namespace std; 声明对象 class Abbrlink { private: int abbr[8]; public: void New() { int seed = (int)time(0); for (int i = 0; i \u003c 8; i++) { int bytes = -1; while ((bytes \u003c 0) || (bytes \u003e 15)) { seed--; srand(seed); bytes = rand() % 16; } abbr[i] = bytes; } } void Print() { for (int i = 0; i \u003c 8; i++) { cout \u003c\u003c hex \u003c\u003c abbr[i]; } cout \u003c\u003c endl; } }; 主函数 int main() { Abbrlink abbr; abbr.New(); abbr.Print(); return 0; } ","date":"2020-11-05","objectID":"/posts/16ea70f5/:1:0","tags":["C++"],"title":"C++实现生成abbrlink","uri":"/posts/16ea70f5/"},{"categories":null,"content":" Arduino入门 计算机引导的进化之路 ","date":"0001-01-01","objectID":"/todo/:0:0","tags":null,"title":"Todo","uri":"/todo/"},{"categories":null,"content":"关于网站 首先，欢迎您来到我的博客，至于我为什么会搭建这个博客，我引用一下主题作者的话: 人最重要的特点是会思考，写博客的初衷是保存思维的电子快照。 当然各种文档工具亦或是简单的文本编辑器也能随时记录点滴， 选择建个人网站无非是想满足技术爱好者的偏执。—— Dillon 因为学业繁忙(其实就是懒)，博客可能长年不更新，所以部分内容可能会过时。 ","date":"0001-01-01","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"关于作者 ▇▇岁，是学生(手动狗头) 💻 技术宅，想要探索关于计算机的一切 🤪 拖延症患者，导致想学的东西一直没有学完 ","date":"0001-01-01","objectID":"/about/:2:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"版权问题 除特殊说明外，本站所有内容均受CC BY-NC-SA 4.0保护。 许可协议条款摘要 署名 — 您必须给出适当的署名，提供指向本许可协议的链接，同时标明是否（对原始作品）作了修改。您可以用任何合理的方式来署名，但是不得以任何方式暗示许可人为您或您的使用背书。 非商业性使用 — 您不得将本作品用于商业目的。 相同方式共享 — 如果您再混合、转换或者基于本作品进行创作，您必须基于与原先许可协议相同的许可协议 分发您贡献的作品。 没有附加限制 — 您不得适用法律术语或者 技术措施 从而限制其他人做许可协议允许的事情。 ","date":"0001-01-01","objectID":"/about/:3:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":" 人最重要的特点是会思考，写博客的初衷是保存思维的电子快照。 当然各种文档工具亦或是简单的文本编辑器也能随时记录点滴， 选择建个人网站无非是想满足技术爱好者的偏执。—— Dillon 旧社会已经过去了，但是人们却开始给自己的大脑裹上小脚。 ","date":"0001-01-01","objectID":"/quot/:0:0","tags":null,"title":"凡人名言","uri":"/quot/"}]